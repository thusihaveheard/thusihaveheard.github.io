<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amote</title>
  <icon>https://www.gravatar.com/avatar/2d43ac97653017ba500ce506cb7c8500</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amote.xin/"/>
  <updated>2018-12-18T02:24:55.598Z</updated>
  <id>https://amote.xin/</id>
  
  <author>
    <name>如是我闻</name>
    <email>shuaichaogao@gamil.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile</title>
    <link href="https://amote.xin/2018/12/18/%E5%9F%BA%E4%BA%8Ejenkins%E5%AE%98%E6%96%B9%E7%9A%84Dockerfile%E4%BF%AE%E6%94%B9%E4%B9%8B%E5%90%8E%E9%A2%84%E8%A3%85%E9%95%9C%E5%83%8F%E7%9A%84Dockerfile/"/>
    <id>https://amote.xin/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/</id>
    <published>2018-12-18T01:05:06.000Z</published>
    <updated>2018-12-18T02:24:55.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为何要修改官方的Dockerfile？"><a href="#为何要修改官方的Dockerfile？" class="headerlink" title="为何要修改官方的Dockerfile？"></a>为何要修改官方的Dockerfile？</h1><p>官方的Dockerfile基于jenkins用户,修改后基于root用户,当然这个可以根据自己的需要去做修改，具体可以查看官方Dockerfile文件的注释！<br>Jenkins插件为王，不安装插件基本jenkins就报废。使用官方的Jenkins镜像在启动成功之后访问jenkins会提示安装必要的插件，当然可以略过，进去jenkins之后再选择需要的插件进行安装，但是毕竟插件仓库都在国外，网络不好或者网络限制会造成插件安装失败(我们公司就是！)。基于此,在官方Dockerfile的基础上制作jenkins镜像的时候，可以直接去预装插件！</p><font color="#FF0000">注：官方Dockerfile地址 <a href="https://github.com/jenkinsci/docker/blob/587b2856cd225bb152c4abeeaaa24934c75aa460/Dockerfile" target="_blank" rel="noopener">https://github.com/jenkinsci/docker/blob/587b2856cd225bb152c4abeeaaa24934c75aa460/Dockerfile</a></font><h1 id="制作jenkins镜像"><a href="#制作jenkins镜像" class="headerlink" title="制作jenkins镜像"></a>制作jenkins镜像</h1><p>docker build -t jenkins:2.60.3 .<br><img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/1.png"><br><img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/2.png"></p><font color="#FF0000">注：默认Dockerfile使用的是2.60.3版本jenkins的war包，如果要改变使用的jenkins版本，在build的镜像通过参数–build-arg JENKINS_VERSION =版本号 传递<br>如：docker build -t jenkins:2.60.3 –build-arg JENKINS_VERSION = 2.99 .<br>但是不同的jenkins版本基于的jdk版本不一样，Dockerfile的基类镜像是openjdk8的</font><h1 id="启动jenkins镜像"><a href="#启动jenkins镜像" class="headerlink" title="启动jenkins镜像"></a>启动jenkins镜像</h1><p>docker run –d -p 8088:8080 -p 50000:50000 –restart=always –name myjenkins -u root -v /var/jenkins_home:/var/jenkins_home 镜像id(或者repository:tag)<br>-d后台启动，-p映射端口号, –restart=always自动重启， –name容器名称， –u使用什么账号运行，-v挂载目录<br><img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/4.png"></p><h1 id="查看jenkins日志，并获取初始化admin用户的密码"><a href="#查看jenkins日志，并获取初始化admin用户的密码" class="headerlink" title="查看jenkins日志，并获取初始化admin用户的密码"></a>查看jenkins日志，并获取初始化admin用户的密码</h1><p>docker logs -f 0ad214f3c2c2<br>-f 查看实时日志，0ad214f3c2c2 容器id<br><img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/5.png"><br><img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/6.png"></p><font color="#FF0000">注：如果密码在日志里没有查到，可以去查找/var/jenkins_home/secrets/initialAdminPassword<br>文件，此文件已挂载到宿主机</font><h1 id="浏览器访问jenkins"><a href="#浏览器访问jenkins" class="headerlink" title="浏览器访问jenkins"></a>浏览器访问jenkins</h1> <img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/7.png"><p>输入上一步获取到的密码，点击Continue<br> <img src="/2018/12/18/基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile/8.png"><br>选择Install suggested plugins,进入后会看到插件都已安装上，忘记截图了！</p><h1 id="如何制作plugins-txt"><a href="#如何制作plugins-txt" class="headerlink" title="如何制作plugins.txt"></a>如何制作plugins.txt</h1><p>方法一：1.安装jenkins<br>2.安装需要的插件<br>3.导入已安装的插件到plugins.txt<br>curl -sSL “<a href="http://username:password@myhost.com:port/pluginManager/api/xml?depth=1&amp;xpath=/*/*/shortName|/*/*/version&amp;wrapper=plugins&quot;" target="_blank" rel="noopener">http://username:password@myhost.com:port/pluginManager/api/xml?depth=1&amp;xpath=/*/*/shortName|/*/*/version&amp;wrapper=plugins&quot;</a> | perl -pe ‘s/.<em>?<shortname>([\w-]+).</shortname></em>?<version>([^&lt;]+)()(&lt;\/\w+&gt;)+/\1 \2\n/g’|sed ‘s/ /:/‘ &gt; plugins.txt</version></p><p>方法二：1.创建空的plugins.txt<br>        2.打开plugins.txt文件，并填写插件名称，以及对应版本号<br> </p><p><font color="#FF0000">建议使用方法一！</font></p><h1 id="所需资源下载"><a href="#所需资源下载" class="headerlink" title="所需资源下载"></a>所需资源下载</h1><p><a href="jenkins.zip" style="color:#FF0000">相关资源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为何要修改官方的Dockerfile？&quot;&gt;&lt;a href=&quot;#为何要修改官方的Dockerfile？&quot; class=&quot;headerlink&quot; title=&quot;为何要修改官方的Dockerfile？&quot;&gt;&lt;/a&gt;为何要修改官方的Dockerfile？&lt;/h1&gt;&lt;p&gt;官方
      
    
    </summary>
    
      <category term="Jenkins" scheme="https://amote.xin/categories/Jenkins/"/>
    
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Jenkins" scheme="https://amote.xin/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建mysql数据库</title>
    <link href="https://amote.xin/2018/12/17/Docker%E6%90%AD%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://amote.xin/2018/12/17/Docker搭建mysql数据库/</id>
    <published>2018-12-17T07:47:34.000Z</published>
    <updated>2018-12-17T08:22:05.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p><font color="#FF0000"> 演示的是5.7.24版本 </font><br>docker pull mysql:5.7.24<br> <img src="/2018/12/17/Docker搭建mysql数据库/1.png"></p><h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><p>docker run –name mysql5.7.24 -p 3306:3306 -d –restart always -v /volume_data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1qaz2wsx! mysql:5.7.24<br>–name是容器别名，-p对外暴露端口，-d 后台执行挂了自动重启，-v 对外挂在目录，将mysql数据持久化到本地，-e MYSQL_ROOT_PASSWORD通过变量设置root账号的密码，最后是镜像名称。启动成功后可以在外部直接访问到数据库</p> <img src="/2018/12/17/Docker搭建mysql数据库/2.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt; 演示的是5.7.24版本 &lt;/font&gt;&lt;br&gt;docker pull mys
      
    
    </summary>
    
      <category term="Docker" scheme="https://amote.xin/categories/Docker/"/>
    
      <category term="mysql" scheme="https://amote.xin/categories/Docker/mysql/"/>
    
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://amote.xin/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>安装Ingress</title>
    <link href="https://amote.xin/2018/12/17/%E5%AE%89%E8%A3%85Ingress/"/>
    <id>https://amote.xin/2018/12/17/安装Ingress/</id>
    <published>2018-12-17T06:40:29.000Z</published>
    <updated>2018-12-17T06:49:20.413Z</updated>
    
    <content type="html"><![CDATA[<p>Ingress其实就是从kuberenets集群外部访问集群的一个入口，将外部的请求转发到集群内不同的Service 上，其实就相当于nginx、apache 等负载均衡代理服务器，再加上一个规则定义，路由信息的刷新需要靠Ingress controller来提供。<br>Ingress controller可以理解为一个监听器，通过不断地与kube-apiserver打交道，实时的感知后端service、pod 等的变化，当得到这些变化信息后，Ingress controller再结合Ingress的配置，更新反向代理负载均衡器，达到服务发现的作用。其实这点和服务发现工具consul的consul-template非常类似。<br># 创建rbac<br># 创建文件：ingress-rbac.yaml，用于service account验证</p><p>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: ingress<br>  namespace: kube-system<br>  -–<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>metadata:<br>  name: ingress<br>subjects:</p><ul><li>kind: ServiceAccount<br>name: ingress<br>namespace: kube-system<br>roleRef:<br>kind: ClusterRole<br>name: cluster-admin<br>apiGroup: rbac.authorization.k8s.io</li></ul><p># DaemonSet 形式部署traefik<br># 创建文件：traefik-daemonset.yaml，为保证traefik 总能提供服务，在每个节点上都部署一个traefik，所以这里使用DaemonSet 的形式</p><p>kind: ConfigMap<br>apiVersion: v1<br>metadata:<br>  name: traefik-conf<br>  namespace: kube-system<br>data:<br>  traefik-config: |-<br>​    defaultEntryPoints = [“http”,”https”]<br>​    [entryPoints]<br>​      [entryPoints.http]<br>​      address = “:80”<br>​        [entryPoints.http.redirect]<br>​          entryPoint = “https”<br>​      [entryPoints.https]<br>​      address = “:443”<br>​        [entryPoints.https.tls]<br>​          [[entryPoints.https.tls.certificates]]<br>​          CertFile = “/ssl/ssl.crt”<br>​          KeyFile = “/ssl/ssl.key”</p><hr><p>kind: DaemonSet<br>apiVersion: extensions/v1beta1<br>metadata:<br>  name: traefik-ingress<br>  namespace: kube-system<br>  labels:<br>​    k8s-app: traefik-ingress<br>spec:<br>  template:<br>​    metadata:<br>​      labels:<br>​        k8s-app: traefik-ingress<br>​        name: traefik-ingress<br>​    spec:<br>​      terminationGracePeriodSeconds: 60<br>​      restartPolicy: Always<br>​      serviceAccountName: ingress<br>​      containers:<br>​      - image: traefik:latest<br>​        name: traefik-ingress<br>​        ports:<br>​        - name: http<br>​          containerPort: 80<br>​          hostPort: 80<br>​        - name: https<br>​          containerPort: 443<br>​          hostPort: 443<br>​        - name: admin<br>​          containerPort: 8080<br>​        args:<br>​        - –configFile=/etc/traefik/traefik.toml<br>​        - -d<br>​        - –web<br>​        - –kubernetes<br>​        - –logLevel=DEBUG<br>​        volumeMounts:<br>​        - name: traefik-config-volume<br>​          mountPath: /etc/traefik<br>​        - name: traefik-ssl-volume<br>​          mountPath: /ssl<br>​      volumes:<br>​      - name: traefik-config-volume<br>​        configMap:<br>​          name: traefik-conf<br>​          items:<br>​          - key: traefik-config<br>​            path: traefik.toml<br>​      - name: traefik-ssl-volume<br>​        secret:<br>​          secretName: traefik-ssl<br>上面的yaml 文件中我们添加了一个名为traefik-conf的ConfigMap，该配置是用来将http 请求强制跳转成https，并指定https 所需CA 文件地址，这里我们使用secret的形式来指定CA 文件的路径：</p><p>OpenSSL生成CA证书<br>[root@lab1 /]# mkdir ssl<br>[root@lab1 /]# cd ssl/<br>[root@lab1 ssl]# openssl req -newkey rsa:2048 -nodes -keyout ssl.key -x509 -days 3650 -out ssl.crt<br>Generating a 2048 bit RSA private key<br>…………………………………………+++<br>…………………………..+++<br>writing new private key to ‘ssl.key’<br>-—-<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter ‘.’, the field will be left blank.<br>-—-<br>Country Name (2 letter code) [XX]:CN<br>State or Province Name (full name) []:BJ<br>Locality Name (eg, city) [Default City]:BJ<br>Organization Name (eg, company) [Default Company Ltd]:TRT<br>Organizational Unit Name (eg, section) []:OPS<br>Common Name (eg, your name or your server’s hostname) []:CA.test.com<br>Email Address []:<a href="mailto:shuaichao_gao@trtjk.com" target="_blank" rel="noopener">shuaichao_gao@trtjk.com</a><br>[root@lab1 ssl]# ls -l<br>total 8<br>-rw-r–r–. 1 root root 1391 Aug  3 13:16 ssl.crt<br>-rw-r–r–. 1 root root 1700 Aug  3 13:16 ssl.key</p><p>$ ls<br>ssl.crt     ssl.key<br>$ kubectl create secret generic traefik-ssl –from-file=ssl.crt –from-file=ssl.key –namespace=kube-system<br>secret “traefik-ssl” created<br># 创建ingress<br># 创建文件：traefik-ingress.yaml，现在可以通过创建ingress文件来定义请求规则了，根据自己集群中的service 自己修改相应的serviceName 和servicePort</p><p>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: traefik-ingress<br>spec:<br>  rules:</p><ul><li>host: traefik.nginx.io<br>http:<br>  paths:<ul><li>path: /<br>backend:<br>  serviceName: my-nginx<br>  servicePort: 80<br>$ kubectl create -f ingress-rbac.yaml<br>serviceaccount “ingress” created<br>clusterrolebinding “ingress” created<br>$ kubectl create -f traefik-daemonset.yaml<br>configmap “traefik-conf” created<br>daemonset “traefik-ingress” created<br>$ kubectl create -f traefik-ingress.yaml<br>ingress “traefik-ingress” created<br># Traefik UI<br># 创建文件：traefik-ui.yaml</li></ul></li></ul><p>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: traefik-ui<br>  namespace: kube-system<br>spec:<br>  selector:<br>​    k8s-app: traefik-ingress<br>  ports:</p><ul><li><p>name: web<br>port: 80<br>targetPort: 8080<br>-–<br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>name: traefik-ui<br>namespace: kube-system<br>spec:<br>rules:</p></li><li><p>host: traefik-ui.local<br>http:<br>  paths:</p><ul><li>path: /<br>backend:<br>  serviceName: traefik-ui<br>  servicePort: web<br># 部署完成后，在本地/etc/hosts添加一条配置</li></ul></li></ul><p># 将下面的xx.xx.xx.xx替换成任意节点IP<br>xx.xx.xx.xx master03 traefik.nginx.io traefik-ui.local</p><p># 配置完成后，在本地访问：traefik-ui.local，则可以访问到traefik的dashboard页面<br># 同样的可以访问traefik.nginx.io，得到正确的结果页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ingress其实就是从kuberenets集群外部访问集群的一个入口，将外部的请求转发到集群内不同的Service 上，其实就相当于nginx、apache 等负载均衡代理服务器，再加上一个规则定义，路由信息的刷新需要靠Ingress controller来提供。&lt;br&gt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://amote.xin/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://amote.xin/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>浮生如茶</title>
    <link href="https://amote.xin/2018/12/14/%E6%B5%AE%E7%94%9F%E5%A6%82%E8%8C%B6/"/>
    <id>https://amote.xin/2018/12/14/浮生如茶/</id>
    <published>2018-12-14T11:50:36.000Z</published>
    <updated>2018-12-14T12:20:45.251Z</updated>
    
    <content type="html"><![CDATA[<p>   一个屡屡失意的年轻人千里迢迢来到普济寺，慕名寻到老僧释圆，沮丧地对他说：“人生总不如意，活着也是苟且，有什么意思呢？”<br>　  释圆静静听着年轻人的叹息和絮叨，末了才吩咐小和尚说：“施主远道而来，烧一壶温水送过来。”<br>　　不一会儿，小和尚送来了一壶温水，释圆抓了茶叶放进杯子，然后用温水沏了，放在茶几上，微笑着请年轻人喝茶。杯子冒出微微的水汽，茶叶静静浮着。年轻人不解地询问：“宝刹怎么温茶？”<br>　　释圆笑而不语。年轻人喝一口细品，不由摇摇头：“一点茶香都没有呢。”<br>释圆说：“这可是闽地名茶铁观音啊。”<br>   年轻人又端起杯子品尝，然后肯定地说：“真的没有一丝茶香。”<br>　　释圆又吩咐小和尚：“再去烧一壶沸水送过来。”<br>　　又过了一会儿，小和尚便提着一壶冒着浓浓白汽的沸水进来。释圆起身，又取过一个杯子，放茶叶，倒沸水，再放在茶几上。年轻人俯首看去，茶叶在杯子里上下沉浮，丝丝清香不绝如缕，望而生津。<br>　　年轻人欲去端杯，释圆作势挡开，又提起水壶注入一线沸水。茶叶翻腾得更厉害了，一缕更醇厚更醉人的茶香袅袅升腾，在禅房弥漫开来。释圆这样注了五次水，杯子终于满了，那绿绿的一杯茶水，端在手上清香扑鼻，入口沁人心脾。<br>　　释圆笑着问：“施主可知道，同是铁观音，为什么茶味迥异吗？”<br>　　年轻人思忖着说：“一杯用温水，一杯用沸水，冲沏的水不同。”<br>　　释圆点头：“用水不同，则茶叶的沉浮就不一样。温水沏茶，茶叶轻浮水上，怎会散发清香？沸水沏茶，反复几次，茶叶沉沉浮浮，释放出四季的风韵：既有春的幽静夏的炽热，又有秋的丰盈和冬的清冽。世间芸芸众生，又何尝不是沉浮的茶叶呢？ 那些不经风雨的人，就像温水沏的茶叶，只在生活表面漂浮，根本浸泡不出生命的芳香；而那些栉风沐雨的人，如被沸水冲沏的酽茶，在沧桑岁月里几度沉浮，才有那沁人的清香啊。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   一个屡屡失意的年轻人千里迢迢来到普济寺，慕名寻到老僧释圆，沮丧地对他说：“人生总不如意，活着也是苟且，有什么意思呢？”&lt;br&gt;　  释圆静静听着年轻人的叹息和絮叨，末了才吩咐小和尚说：“施主远道而来，烧一壶温水送过来。”&lt;br&gt;　　不一会儿，小和尚送来了一壶温水，释圆
      
    
    </summary>
    
      <category term="生活" scheme="https://amote.xin/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://amote.xin/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="佛" scheme="https://amote.xin/tags/%E4%BD%9B/"/>
    
  </entry>
  
  <entry>
    <title>心若水</title>
    <link href="https://amote.xin/2018/12/14/%E5%BF%83%E8%8B%A5%E6%B0%B4/"/>
    <id>https://amote.xin/2018/12/14/心若水/</id>
    <published>2018-12-14T11:39:09.000Z</published>
    <updated>2018-12-14T11:43:12.078Z</updated>
    
    <content type="html"><![CDATA[<p>清风吹</p><p>伊人楼台随</p><p>近水楼台</p><p>雾里捕捉你的影</p><p>纤纤碎步</p><p>不知你是谁</p><p>月光皎洁</p><p>而你静静伫立</p><p>我只想去陪</p><p>伊人眉</p><p>似柳似叶使人醉</p><p>亭亭玉立</p><p>月色已在褪</p><p>白皙蝶衣</p><p>犹如玻璃脆</p><p>轻轻去唤</p><p>不肯来理会</p><p>上善若水</p><p>不惹世间之非</p><p>钟情缘</p><p>一生有几回</p><p>心若水</p><p>涟漪泛起 微风轻轻在吹</p><p>你的眼神是壁画的一笔</p><p>我看着你 只有生命的纯粹</p><p>心若水</p><p>一点一滴 就像晶莹的泪</p><p>你的寂静是憔悴的美</p><p>我感悟你 需要一生去品味<br>​                                       </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;清风吹&lt;/p&gt;
&lt;p&gt;伊人楼台随&lt;/p&gt;
&lt;p&gt;近水楼台&lt;/p&gt;
&lt;p&gt;雾里捕捉你的影&lt;/p&gt;
&lt;p&gt;纤纤碎步&lt;/p&gt;
&lt;p&gt;不知你是谁&lt;/p&gt;
&lt;p&gt;月光皎洁&lt;/p&gt;
&lt;p&gt;而你静静伫立&lt;/p&gt;
&lt;p&gt;我只想去陪&lt;/p&gt;
&lt;p&gt;伊人眉&lt;/p&gt;
&lt;p&gt;似柳似叶使人醉&lt;/p&gt;
      
    
    </summary>
    
      <category term="歌词" scheme="https://amote.xin/categories/%E6%AD%8C%E8%AF%8D/"/>
    
    
      <category term="诗" scheme="https://amote.xin/tags/%E8%AF%97/"/>
    
      <category term="歌" scheme="https://amote.xin/tags/%E6%AD%8C/"/>
    
      <category term="词" scheme="https://amote.xin/tags/%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>望穿秋水</title>
    <link href="https://amote.xin/2018/12/14/%E6%9C%9B%E7%A9%BF%E7%A7%8B%E6%B0%B4/"/>
    <id>https://amote.xin/2018/12/14/望穿秋水/</id>
    <published>2018-12-14T11:34:49.000Z</published>
    <updated>2018-12-14T11:43:02.979Z</updated>
    
    <content type="html"><![CDATA[<p>细水流涓涓 闲坐船</p><p>柳叶垂两岸 花自然</p><p>沏一杯毛尖 味醇酣</p><p>闻帘子间 谁将琵琶弹</p><p>忧伤溢满 泪水湿透衣衫</p><p>邀相见</p><p>憔悴容颜 已沉鱼落雁</p><p>心愈寒</p><p>相逢何必曾相见 侃侃而谈</p><p>人生何其短 知己有几番</p><p>举杯把酒言欢</p><p>落叶吹翻 不见故人又还</p><p>望眼欲穿 袅袅几缕炊烟</p><p>思念缠一线 分割两半</p><p>一半瞬间 一半永远</p><p>一行飞雁 捎去相思之念</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;细水流涓涓 闲坐船&lt;/p&gt;
&lt;p&gt;柳叶垂两岸 花自然&lt;/p&gt;
&lt;p&gt;沏一杯毛尖 味醇酣&lt;/p&gt;
&lt;p&gt;闻帘子间 谁将琵琶弹&lt;/p&gt;
&lt;p&gt;忧伤溢满 泪水湿透衣衫&lt;/p&gt;
&lt;p&gt;邀相见&lt;/p&gt;
&lt;p&gt;憔悴容颜 已沉鱼落雁&lt;/p&gt;
&lt;p&gt;心愈寒&lt;/p&gt;
&lt;p&gt;相逢何必曾相见 侃
      
    
    </summary>
    
      <category term="歌词" scheme="https://amote.xin/categories/%E6%AD%8C%E8%AF%8D/"/>
    
    
      <category term="诗" scheme="https://amote.xin/tags/%E8%AF%97/"/>
    
      <category term="歌" scheme="https://amote.xin/tags/%E6%AD%8C/"/>
    
      <category term="词" scheme="https://amote.xin/tags/%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>道德经</title>
    <link href="https://amote.xin/2018/12/14/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    <id>https://amote.xin/2018/12/14/道德经/</id>
    <published>2018-12-14T11:24:50.000Z</published>
    <updated>2018-12-14T11:32:40.491Z</updated>
    
    <content type="html"><![CDATA[<p>第 一 章</p><p>道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。</p><p>无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。</p><p>故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。</p><p>此 两 者 ， 同 出 而 异 名 ， 同 谓 之 玄 。</p><p>玄 之 又 玄 ， 众 妙 之 门 。</p><p>第 二 章</p><p>天 下 皆 知 美 之 为 美 ， 斯 恶 已 。</p><p>皆 知 善 之 为 善 ， 斯 不 善 已 。</p><p>有 无 相 生 ， 难 易 相 成 ， 长 短 相 形 ，高 下 相 盈 ， 音 声 相 和 ， 前 后 相 随 。恒 也 。</p><p>是 以 圣 人 处 无 为 之 事 ，行 不 言 之 教 ﹔</p><p>万 物 作 而 弗 始 ，生 而 弗 有 ， 为 而 弗 恃 ， 功 成 而 不 居 。</p><p>夫 唯 弗 居 ， 是 以 不 去 。</p><p>第 三 章</p><p>不 尚 贤 ， 使 民 不 争</p><p>不 贵 难 得 之 货 ， 使 民 不 为 盗 ﹔</p><p>不 见 可 欲 ， 使 民 心 不 乱 。</p><p>是 以 圣 人 之 治 ，</p><p>虚 其 心 ，实 其 腹 ，</p><p>弱 其 志 ，强 其 骨 。</p><p>常 使 民 无 知 无 欲 。</p><p>使 夫 智 者 不 敢 为 也 。</p><p>为 无 为 ， 则 无 不 治 。</p><p>第 四 章</p><p>道 冲 ， 而 用 之 或 不 盈 。</p><p>渊 兮 ， 似 万 物 之 宗 ﹔ 湛 兮 ， 似 或 存 。</p><p>吾 不 知 谁 之 子 ， 象 帝 之 先 。</p><p>第 五 章</p><p>天 地 不 仁 ， 以 万 物 为 刍 狗 ﹔</p><p>圣 人 不 仁 ， 以 百 姓 为 刍 狗 。</p><p>天 地 之 间 ， 其 犹 橐 龠 乎 。</p><p>虚 而 不 屈 ， 动 而 愈 出 。</p><p>多 言 数 穷 ， 不 如 守 中 。</p><p>第 六 章</p><p>谷 神 不 死 ， 是 谓 玄 牝 。</p><p>玄 牝 之 门 ， 是 谓 天 地 根 。</p><p>绵 绵 若 存 ， 用 之 不 勤 。</p><p>第 七 章</p><p>天 长 地 久 。</p><p>天 地 所 以 能 长 且 久 者 ，</p><p>以 其 不 自 生 ， 故 能 长 生 。</p><p>是 以 圣 人 后 其 身 而 身 先 ﹔ 外 其 身 而 身 存 。</p><p>非 以 其 无 私 邪 。故 能 成 其 私 。</p><p>第 八 章</p><p>上 善 若 水 。</p><p>水 善 利 万 物 而 不 争 ，</p><p>处 众 人 之 所 恶 ， 故 几 于 道 。</p><p>居 善 地 ，心 善 渊 ，</p><p>与 善 仁 ，言 善 信 ，</p><p>政 善 治 ， 事 善 能 ，动 善 时 。</p><p>夫 唯 不 争 ， 故 无 尤 。</p><p>第 九 章</p><p>持 而 盈 之 ， 不 如 其 已 ﹔</p><p>揣 而 锐 之 ， 不 可 长 保 。</p><p>金 玉 满 堂 ， 莫 之 能 守 ﹔</p><p>富 贵 而 骄 ， 自 遗 其 咎 。</p><p>功 遂 身 退 ， 天 之 道 也 。</p><p>第 十 章</p><p>载 营 魄 抱 一 ， 能 无 离 乎 。</p><p>专 气 致 柔 ， 能 如 婴 儿 乎 。</p><p>涤 除 玄 鉴 ， 能 无 疵 乎 。</p><p>爱 国 治 民 ， 能 无 为 乎 。</p><p>天 门 开 阖 ， 能 为 雌 乎 。</p><p>明 白 四 达 ， 能 无 知 乎 。</p><p>第 十 一 章</p><p>三 十 辐 ， 共 一 毂 ， 当 其 无 ， 有 车 之 用 。</p><p>埏 埴 以 为 器 ， 当 其 无 ， 有 器 之 用 。</p><p>凿 户 牖 以 为 室 ， 当 其 无 ， 有 室 之 用 。</p><p>故 有 之 以 为 利 ， 无 之 以 为 用 。</p><p>第 十 二 章</p><p>五 色 令 人 目 盲 ﹔ 五 音 令 人 耳 聋 ﹔ 五 味 令 人 口 爽 ﹔</p><p>驰 骋 畋 猎 ， 令 人 心 发 狂 ﹔ 难 得 之 货 ， 令 人 行 妨 。</p><p>是 以 圣 人 为 腹 不 为 目 ， 故 去 彼 取 此 。</p><p>第 十 三 章</p><p>宠 辱 若 惊 ， 贵 大 患 若 身 。</p><p>何 谓 宠 辱 若 惊 。</p><p>宠 为 下 ， 得 之 若 惊 ， 失 之 若 惊 ， 是 谓 宠 辱 若 惊 。</p><p>何 谓 贵 大 患 若 身 。</p><p>吾 所 以 有 大 患 者 ， 为 吾 有 身 ，</p><p>及 吾 无 身 ， 吾 有 何 患 。</p><p>故 贵 以 身 为 天 下 ， 若 可 寄 天 下 ﹔</p><p>爱 以 身 为 天 下 ， 若 可 托 天 下 。</p><p>第 十 四 章</p><p>视 之 不 见 ， 名 曰 夷 ﹔</p><p>听 之 不 闻 ， 名 曰 希 ﹔</p><p>搏 之 不 得 ， 名 曰 微 。</p><p>此 三 者 不 可 致 诘 ， 故 混 而 为 一 。</p><p>其 上 不 皦 ， 其 下 不 昧 。</p><p>绳 绳 兮 不 可 名 ， 复 归 于无 物 。</p><p>是 谓 无 状 之 状 ， 无 物 之 象 ， 是 谓 惚 恍 。</p><p>迎 之 不 见 其 首 ， 随 之 不 见 其 后 。</p><p>执 古 之 道 ， 以 御 今 之 有 。</p><p>能 知 古 始 ， 是 谓 道 纪 。</p><p>第 十 五 章</p><p>古 之 善 为 道 者 ， 微 妙 玄 通 ， 深 不 可 识 。</p><p>夫 唯 不 可 识 ， 故 强 为 之 容 ：</p><p>豫 兮 若 冬 涉 川 ﹔</p><p>犹 兮 若 畏 四 邻 ﹔</p><p>俨 兮 其 若 容 ﹔</p><p>涣 兮 若 冰 之 将 释 ﹔</p><p>敦 兮 其 若 朴 ﹔</p><p>旷 兮 其 若 谷 ﹔</p><p>混 兮 其 若 浊 ﹔</p><p>澹 兮 其 若 海 ﹔</p><p>飂 兮 若 无 止 。</p><p>孰 能 浊 以 静 之 徐 清 。</p><p>孰 能 安 以 动 之 徐 生 。</p><p>保 此 道 者 ， 不 欲 盈 。</p><p>夫 唯 不 盈 ， 故 能 蔽 而 新 成 。</p><p>第 十 六 章</p><p>致 虚 极 ， 守 静 笃。</p><p>万 物 并 作 ， 吾 以 观 复。</p><p>夫 物 芸 芸 ， 各 复 归 其 根 。</p><p>归 根 曰 静 ， 静 曰 复 命 。</p><p>复 命 曰 常 ， 知 常 曰 明 。</p><p>不 知 常 ， 妄 作 凶 。</p><p>知 常 容 ， 容 乃 公 ，</p><p>公 乃 全 ， 全 乃 天 ，</p><p>天 乃 道 ， 道 乃 久 ， 没 身 不 殆 。</p><p>第 十 七 章</p><p>太 上 ， 不 知 有 之 ﹔</p><p>其 次 ， 亲 而 誉 之 ﹔</p><p>其 次 ， 畏 之 ﹔</p><p>其 次 ， 侮 之 。</p><p>信 不 足 焉 ， 有 不 信 焉 。</p><p>悠 兮 其 贵 言 。</p><p>功 成 事 遂 ， 百 姓 皆 谓 ： 「 我 自 然 」 。</p><p>第 十 八 章</p><p>大 道 废 ， 有 仁 义 ﹔</p><p>智 慧 出 ， 有 大 伪 ﹔</p><p>六 亲 不 和 ， 有 孝 慈 ﹔</p><p>国 家 昏 乱 ， 有 忠 臣 。</p><p>第 十 九 章</p><p>绝 圣 弃 智 ， 民 利 百 倍 ﹔</p><p>绝 仁 弃 义 ， 民 复 孝 慈 ﹔</p><p>绝 巧 弃 利 ， 盗 贼 无 有 。</p><p>此 三 者 以 为 文  不 足 ，故 令 有 所 属 。 </p><p>见 素 抱 朴 ，少 思 寡 欲 ， 绝 学 无 忧 。</p><p>第 二 十 章</p><p>唯 之 与 阿 ， 相 去 几 何 。</p><p>善 之 与 恶 ， 相 去 若 何 。</p><p>人 之 所 畏 ， 不 可 不 畏 。</p><p>荒 兮 ， 其 未 央 哉 。</p><p>众 人 熙 熙 ， 如 享 太 牢 ， 如 春 登 台 。</p><p>我 独 泊 兮 ， 其 未 兆 ﹔</p><p>沌 沌 兮 ， 如 婴 儿 之 未 孩 ﹔</p><p>儽 儽 兮 ， 若 无 所 归 。</p><p>众 人 皆 有 余 ， 而 我 独 若 遗 。 我 愚 人 之 心 也 哉 。</p><p>俗 人 昭 昭 ， 我 独 昏 昏 。</p><p>俗 人 察 察 ， 我 独 闷 闷 。</p><p>众 人 皆 有 以 ， 而 我 独 顽 且 鄙 。</p><p>我 独 异 于 人 ， 而 贵 食 母 。</p><p>第 二 十 一 章</p><p>孔 德 之 容 ， 惟 道 是 从 。</p><p>道 之 为 物 ， 惟 恍 惟 惚 。</p><p>惚 兮 恍 兮 ， 其 中 有 象 ﹔</p><p>恍 兮 惚 兮 ， 其 中 有 物 。</p><p>窈 兮 冥 兮 ， 其 中 有 精 ﹔</p><p>其 精 甚 真 ， 其 中 有 信 。</p><p>自 今 及 古 ， 其 名 不 去 ， 以 阅 众 甫 。</p><p>吾 何 以 知 众 甫 之 状 哉 。 以 此 。</p><p>第 二 十 二 章</p><p>曲 则 全 ， 枉 则 直 ， 洼 则 盈 ，</p><p>敝 则 新 ， 少 则 得 ， 多 则 惑 。</p><p>是 以 圣 人 抱 一 为 天 下 式 。</p><p>不 自 见 ， 故 明 ﹔</p><p>不 自 是 ， 故 彰 ﹔</p><p>不 自 伐 ， 故 有 功 ﹔</p><p>不 自 矜 ， 故 长 。</p><p>夫 唯 不 争 ， 故 天 下 莫 能 与 之 争 。</p><p>古 之 所 谓 「 曲 则 全 」 者 ， 岂 虚 言 哉 。</p><p>诚 全 而 归 之 。</p><p>第 二 十 三 章</p><p>希 言 自 然 。</p><p>故 飘 风 不 终 朝 ， 骤 雨 不 终 日 。</p><p>孰 为 此 者 。</p><p>天 地 。 天 地 尚 不 能 久 ， 而 况 于 人 乎 。</p><p>故 从 事 于 道 者 ， 同 于 道 ﹔</p><p>德 者 ， 同 于 德 ﹔ 失 者 ， 同 于 失 。</p><p>同 于 道 者 ， 道 亦 乐 得 之 ﹔</p><p>同 于 德 者 ， 德 亦 乐 得 之 ﹔</p><p>同 于 失 者 ， 失 亦 乐 得 之 。</p><p>信 不 足 焉 ， 有 不 信 焉 。</p><p>第 二 十 四 章</p><p>企 者 不 立 ﹔ 跨 者 不 行 ﹔</p><p>自 见 者 不 明 ﹔ 自 是 者 不 彰 ﹔</p><p>自 伐 者 无 功 ﹔ 自 矜 者 不 长 。</p><p>其 在 道 也 ， 曰 ： 余 食 赘 形 。</p><p>物 或 恶 之 ， 故 有 道 者 不 处 。</p><p>第 二 十 五 章</p><p>有 物 混 成 ， 先 天 地 生 。</p><p>寂 兮 寥 兮 ， 独 立 而 不 改 ，</p><p>周 行 而 不 殆 ， 可 以 为 天 地 母 。</p><p>吾 不 知 其 名 ， 强 字 之 曰 道 ， 强 为 之 名 曰 大 。</p><p>大 曰 逝 ， 逝 曰 远 ， 远 曰 反 。</p><p>故 道 大 ， 天 大 ， 地 大 ， 人 亦 大 。</p><p>域 中 有 四 大 ， 而 人 居 其 一 焉 。</p><p>人 法 地 ， 地 法 天 ， 天 法 道 ， 道 法 自 然 。</p><p>第 二 十 六 章</p><p>重 为 轻 根 ， 静 为 躁 君 。</p><p>是 以 君 子 终 日 行 不 离 辎 重 。</p><p>虽 有 荣 观 ， 燕 处 超 然 。</p><p>奈 何 万 乘 之 主 ， 而 以 身 轻 天 下 。</p><p>轻 则 失 根 ， 躁 则 失 君 。</p><p>第 二 十 七 章</p><p>善 行 无 辙 迹 ， 善 言 无 瑕 谪 ﹔</p><p>善 数 不 用 筹 策 ﹔</p><p>善 闭 无 关 楗 而 不 可 开 ，</p><p>善 结 无 绳 约 而 不 可 解 。</p><p>是 以 圣 人 常 善 救 人 ， 故 无 弃 人 ﹔</p><p>常 善 救 物 ， 故 无 弃 物 。</p><p>是 谓 袭 明 。</p><p>故 善 人 者 ， 不 善 人 之 师 ﹔</p><p>不 善 人 者 ， 善 人 之 资 。</p><p>不 贵 其 师 ， 不 爱 其 资 ，</p><p>虽 智 大 迷 ， 是 谓 要 妙 。</p><p>第 二 十 八 章</p><p>知 其 雄 ， 守 其 雌 ， 为 天 下 溪 。</p><p>为 天 下 溪 ， 常 德 不 离 ， 复 归 于 婴 儿 。</p><p>知 其 白 ， 守 其黑 ， 为 天 下 式 。</p><p>为 天 下 式 ， 常 德 不 忒 ， 复 归 于 无 极 。</p><p>知 其 荣，守 其 辱，为 天 下 谷。</p><p>为 天 下 谷，常 德 乃 足。</p><p>复 归 於 朴，朴 散 则 为 器 。</p><p>圣 人 用 之 ，则 为 官 长 ， 故 大 制 不 割 。</p><p>第 二 十 九 章</p><p>将 欲 取 天 下 而 为 之 ， 吾 见 其 不 得 已 。</p><p>天 下 神 器 ， 不 可 为 也 ， 不 可 执 也 。</p><p>为 者 败 之 ， 执 者 失 之 。</p><p>是 以 圣 人 无 为 ， 故 无 败 ﹔</p><p>无 执 ， 故 无 失。</p><p>夫 物 或 行 或 随 ﹔ 或 嘘 或 吹 ﹔</p><p>或 强 或 羸 ﹔ 或 挫 或 隳 。</p><p>是 以 圣 人 去 甚 ， 去 奢 ， 去 泰 。</p><p>第 三 十 章</p><p>以 道 佐 人 主 者 ， 不 以 兵 强 天 下 。</p><p>其 事 好 远 。</p><p>师 之 所 处 ， 荆 棘 生 焉 。</p><p>大 军 之 后 ， 必 有 凶 年 。</p><p>善 有 果 而 已 ， 不 以 取 强 。</p><p>果 而 勿 矜 ， 果 而 勿 伐 ， 果 而 勿 骄 。</p><p>果 而 不 得 已 ， 果 而 勿 强 。</p><p>物 壮 则 老 ， 是 谓 不 道 ， 不 道 早 已 。</p><p>第 三 十 一 章</p><p>夫 兵 者 ， 不 祥 之 器 ，</p><p>物 或 恶 之 ， 故 有 道 者 不 处 。</p><p>君 子 居 则 贵 左 ， 用 兵 则 贵 右 。</p><p>兵 者 不 祥 之 器 ， 非 君 子 之 器 ，</p><p>不 得 已 而 用 之 ， 恬 淡 为 上 。</p><p>胜 而 不 美 ， 而 美 之 者 ， 是 乐 杀 人 。</p><p>夫 乐 杀 人 者 ， 则 不 可 得 志 于 天 下 矣 。</p><p>吉 事 尚 左 ， 凶 事 尚 右 。</p><p>偏 将 军 居 左 ， 上 将 军 居 右 ，言 以 丧 礼 处 之 。</p><p>杀 人 之 众 ， 以 悲 哀 泣 之 ， 战 胜 以 丧 礼 处 之 。</p><p>第 三 十 二 章</p><p>道 常 无 名  。</p><p>朴 虽 小 ， 天 下 莫 能 臣 。</p><p>侯 王 若 能 守 之 ， 万 物 将 自 宾 。</p><p>天 地 相 合 ， 以 降 甘 露 ， 民 莫 之 令 而 自 均 。</p><p>始 制 有 名 ， 名 亦 既 有 ，</p><p>夫 亦 将 知 止 ， 知 止 可 以 不 殆 。</p><p>譬 道 之 在 天 下 ， 犹 川 谷 之 于 江 海 。</p><p>第 三 十 三 章</p><p>知 人 者 智 ， 自 知 者 明 。</p><p>胜 人 者 有 力 ，</p><p>自 胜 者 强 ，知 足 者 富 。</p><p>强 行 者 有 志 。</p><p>不 失 其 所 者 久 。</p><p>死 而 不 亡 者 寿 。</p><p>第 三 十 四 章</p><p>大 道 泛 兮 ， 其 可 左 右 。</p><p>万 物 恃 之 以 生 而 不 辞 ， 功 成 而 不 有 。</p><p>衣 养 万 物 而 不 为 主 。常 无 欲 可 名 于 小 ﹔</p><p>万 物 归 焉 而 不 为 主 ， 可 名 为 大 。</p><p>以 其 终 不 自 为 大 ， 故 能 成 其 大 。</p><p>第 三 十 五 章</p><p>执 大 象 ， 天 下 往 。</p><p>往 而 不 害 ， 安 平 泰 。</p><p>乐 与 饵 ， 过 客 止 。</p><p>道 之 出 口 ， 淡 乎 其 无 味 ，</p><p>视 之 不 足 见 ， 听 之 不 足 闻 ， 用 之 不 足 既 。</p><p>第 三 十 六 章</p><p>将 欲 歙 之 ， 必 故 张 之 ﹔</p><p>将 欲 弱 之 ， 必 故 强 之 ﹔</p><p>将 欲 废 之 ， 必 故 兴 之 ﹔</p><p>将 欲 取 之 ， 必 故 与 之 。</p><p>是 谓 微 明 。</p><p>柔 弱 胜 刚 强 。</p><p>鱼 不 可 脱 于 渊 ， 国 之 利 器 不 可 以 示 人 。</p><p>第 三 十 七 章</p><p>道 常 无 为 而 无 不 为 。</p><p>侯 王 若 能 守 之 ， 万 物 将 自 化 。</p><p>化 而 欲 作 ， 吾 将 镇 之 以 无 名 之 朴 。</p><p> 无 名 之 朴 ， 夫 亦 将 不 欲 。</p><p>不 欲 以 静 ， 天 下 将 自 定 。</p><p>第 三 十 八 章</p><p>上 德 不 德 ， 是 以 有 德 ﹔</p><p>下 德 不 失 德 ， 是 以 无 德 。</p><p>上 德 无 为 而 无 以 为 ﹔</p><p>下 德 无 为 而 有 以 为 。</p><p>上 仁 为 之 而 无 以 为 ﹔</p><p>上 义 为 之 而 有 以 为 。</p><p>上 礼 为 之 而 莫 之 应 ，</p><p>则 攘 臂 而 扔 之 。</p><p>故 失 道 而 后 德 ， 失 德 而 后 仁 ，</p><p>失 仁 而 后 义 ， 失 义 而 后 礼 。</p><p>夫 礼 者 ， 忠 信 之 薄 ， 而 乱 之 首 。</p><p>前 识 者 ， 道 之 华 ， 而 愚 之 始 。</p><p>是 以 大 丈 夫 处 其 厚 ， 不 居 其 薄 ﹔</p><p>处 其 实 ， 不 居 其 华 。 故 去 彼 取 此 。</p><p>第 三 十 九 章</p><p>昔 之 得 一 者 ：</p><p>天 得 一 以 清 ﹔</p><p>地 得 一 以 宁 ﹔</p><p>神 得 一 以 灵 ﹔</p><p>谷 得 一 以 生 ﹔</p><p>侯 王 得 一 以 为 天 下 贞 。</p><p>其 致 之 也 ， 谓 天 无 以 清 ， 将 恐 裂 ﹔</p><p>地 无 以 宁 ， 将 恐 废 ﹔</p><p>神 无 以 灵 ， 将 恐 歇 ﹔</p><p>谷 无 以 盈 ， 将 恐 竭 ﹔</p><p>万 物 无 以 生 ， 将 恐 灭 ﹔</p><p>侯 王 无 以 贞 ， 将 恐 蹶 。</p><p>故 贵 以 贱 为 本 ， 高 以 下 为 基 。</p><p>是 以 侯 王 自 称 孤 、 寡 、 不 谷 。</p><p>此 非 以 贱 为 本 邪 。 非 乎 。 故 致 誉 无 誉 。</p><p>是 故 不 欲 琭 琭 如 玉 ， 珞 珞 如 石 。</p><p>第 四 十 章</p><p>反 者 道 之 动 ﹔ 弱 者 道 之 用 。</p><p>天 下 万 物 生 于 有 ， 有 生 于 无 。</p><p>第 四 十 一 章</p><p>上 士 闻 道 ， 勤 而 行 之 ﹔</p><p>中 士 闻 道 ， 若 存 若 亡 ﹔</p><p>下 士 闻 道 ， 大 笑 之 。</p><p>不 笑 不 足 以 为 道 。</p><p>故 建 言 有 之 ：</p><p>明 道 若 昧 ﹔进 道 若 退 ﹔夷 道 若 颣 ﹔</p><p>上 德 若 谷 ﹔广 德 若 不 足 ﹔</p><p>建 德 若 偷 ﹔质 真 若 渝 ﹔</p><p>大 白 若 辱 ﹔大 方 无 隅 ﹔</p><p>大 器 晚 成 ﹔大 音 希 声 ﹔</p><p>大 象 无 形 ﹔道 隐 无 名 。</p><p>夫 唯 道 ， 善 贷 且 成 。</p><p>第 四 十 二 章</p><p>道 生 一 ， 一 生 二 ， 二 生 三 ， 三 生 万 物 。</p><p>万 物 负 阴 而 抱 阳 ， 冲 气 以 为 和 。</p><p>人 之 所 恶 ， 唯 孤 、 寡 、 不 谷 ， 而 王 公 以 为 称 。</p><p>故 物 或 损 之 而 益 ， 或 益 之 而 损 。</p><p>人 之 所 教 ， 我 亦 教 之 。</p><p>强 梁 者 不 得 其 死 ， 吾 将 以 为 教 父 。</p><p>第 四 十 三 章</p><p>天 下 之 至 柔 ， 驰 骋 天 下 之 至 坚 。</p><p>无 有 入 无 间 ， 吾 是 以 知 无 为 之 有 益 。</p><p>不 言 之 教 ， 无 为 之 益 ， 天 下 希 及 之 。</p><p>第 四 十 四 章</p><p>名 与 身 孰 亲 。 身 与 货 孰 多 。 得 与 亡 孰 病 。</p><p>甚 爱 必 大 费 ﹔ 多 藏 必 厚 亡 。</p><p>故 知 足 不 辱 ， 知 止 不 殆 ， 可 以 长 久 。</p><p>第 四 十 五 章</p><p>大 成 若 缺 ， 其 用 不 弊 。</p><p>大 盈 若 冲 ， 其 用 不 穷 。</p><p>大 直 若 屈 ， 大 巧 若 拙 ， 大 辩 若 讷 。</p><p>静 胜 躁 ， 寒 胜 热 。 清 静 为 天 下 正 。</p><p>第 四 十 六 章</p><p>天 下 有 道 ， 却 走 马 以 粪 。</p><p>天 下 无 道 ， 戎 马 生 于 郊 。</p><p>祸 莫 大 于 不 知 足 ﹔ 咎 莫 大 于 欲 得 。</p><p>故 知 足 之 足 ， 常 足 矣 。</p><p>第 四 十 七 章</p><p>不 出 户 ， 知 天 下 ﹔ 不 窥 牖 ， 见 天 道 。</p><p>其 出 弥 远 ， 其 知 弥 少 。</p><p>是 以 圣 人 不 行 而 知 ， 不 见 而 明 ， 不 为 而 成 。</p><p>第 四 十 八 章</p><p>为 学 日 益 ， 为 道 日 损 。</p><p>损 之 又 损 ， 以 至 于 无 为 。</p><p>无 为 而 无 不 为 。</p><p>取 天 下 常 以 无 事 ， 及 其 有 事 ， 不 足 以 取 天 下 。</p><p>第 四 十 九 章</p><p>圣 人 常 无 心 ， 以 百 姓 心 为 心 。</p><p>善 者 ， 吾 善 之 ﹔ 不 善 者 ， 吾 亦 善 之 ﹔ 德 善 。</p><p>信 者 ， 吾 信 之 ﹔ 不 信 者 ， 吾 亦 信 之 ﹔ 德 信 。</p><p>圣 人 在 天 下 ， 歙 歙 焉 ， 为 天 下 浑 其 心 ，</p><p>百 姓 皆 注 其 耳 目 ， 圣 人 皆 孩 之 。</p><p>第 五 十 章</p><p>出 生 入 死 。</p><p>生 之 徒 ， 十 有 三 ﹔</p><p>死 之 徒 ， 十 有 三 ﹔</p><p>人 之 生 ， 动 之 于 死 地 ， 亦 十 有 三 。</p><p>夫 何 故 ，以 其 生 之 厚 。</p><p>盖 闻 善 摄 生 者 ， 路 行 不 遇 兕 虎 ， 入 军 不 被 甲 兵 ﹔</p><p>兕 无 所 投 其 角 ， 虎 无 所 用 其 爪 ， 兵 无 所 容 其 刃 。</p><p>夫 何 故 ，以 其 无 死 地 。</p><p>第 五 十 一 章</p><p>道 生 之 ， 德 畜 之 ，</p><p>物 形 之 ， 势 成 之 。</p><p>是 以 万 物 莫 不 尊 道 而 贵 德 。</p><p>道 之 尊 ， 德 之 贵 ， 夫 莫 之 命 而 常 自 然 。</p><p>故 道 生 之 ， 德 畜 之 ﹔</p><p>长 之 育 之 ﹔ 成 之 熟 之 ﹔ 养 之 覆 之 。</p><p>生 而 不 有 ， 为 而 不 恃 ，</p><p>长 而 不 宰 。 是 谓 玄 德 。</p><p>第 五 十 二 章</p><p>天 下 有 始 ， 以 为 天 下 母 。</p><p>既 得 其 母 ， 以 知 其 子 ，</p><p>复 守 其 母 ， 没 身 不 殆 。</p><p>塞 其 兑 ， 闭 其 门 ， 终 身 不 勤 。</p><p>开 其 兑 ， 济 其 事 ， 终 身 不 救 。</p><p>见 小 曰 明 ， 守 柔 曰 强 。</p><p>用 其 光 ， 复 归 其 明 ，</p><p>无 遗 身 殃 ﹔ 是 为 袭 常 。</p><p>第 五 十 三 章</p><p>使 我 介 然 有 知 ， 行 于 大 道 ， 唯 施 是 畏 。</p><p>大 道 甚 夷 ， 而 人 好 径 。</p><p>朝 甚 除 ， 田 甚 芜 ， 仓 甚 虚 ﹔</p><p>服 文 采 ， 带 利 剑 ， 厌 饮 食 ，</p><p>财 货 有 余 ﹔ 是 为 盗 夸 。</p><p>非 道 也 哉 。</p><p>第 五 十 四 章</p><p>善 建 者 不 拔 ，</p><p>善 抱 者 不 脱 ， 子 孙 以 祭 祀 不 辍 。</p><p>修 之 于 身 ， 其 德 乃 真 ﹔</p><p>修 之 于 家 ， 其 德 乃 余 ﹔</p><p>修 之 于 乡 ， 其 德 乃 长 ﹔</p><p>修 之 于 邦 ， 其 德 乃 丰 ﹔</p><p>修 之 于 天 下 ， 其 德 乃 普 。</p><p>故 以 身 观 身 ，以 家 观 家 ，以 乡 观 乡 ，以 邦 观 邦 ， 以 天 下 观 天 下 。</p><p>吾 何 以 知 天 下 然 哉 。 以 此 。</p><p>第 五 十 五 章</p><p>含 「 德 」 之 厚 ， 比 于 赤 子 。</p><p>毒 虫 不 螫 ， 猛 兽 不 据 ， 攫 鸟 不 搏 。</p><p>骨 弱 筋 柔 而 握 固 。</p><p>未 知 牝 牡 之 合 而 峻 作 ， 精 之 至 也 。</p><p>终 日 号 而 不 嗄 ， 和 之 至 也 。</p><p>知 和 曰 「 常 」 ，知 常 曰 「 明 」 。</p><p>益 生 曰 祥 。 心 使 气 曰 强 。</p><p>物 壮 则 老 ， 谓 之 不 道 ， 不 道 早 已 。</p><p>第 五 十 六 章</p><p>知 者 不 言 ， 言 者 不 知 。</p><p>挫 其 锐 ， 解 其 纷 。</p><p>和 其 光 ，同 其 尘 ， 是 谓 「 玄 同 」 。</p><p>故 不 可 得 而 亲 ， 不 可 得 而 疏 ﹔</p><p>不 可 得 而 利 ， 不 可 得 而 害 ﹔</p><p>不 可 得 而 贵 ， 不 可 得 而 贱 。 故 为 天 下 贵 。</p><p>第 五 十 七 章</p><p>以 正 治 国 ， 以 奇 用 兵 ， 以 无 事 取 天 下 。</p><p>吾 何 以 知 其 然 哉 。 以 此 ：</p><p>天 下 多 忌 讳 ， 而 民 弥 贫 ﹔</p><p>人 多 利 器 ， 国 家 滋 昏 ﹔</p><p>人 多 伎 巧 ， 奇 物 滋 起 ﹔</p><p>法 令 滋 彰 ， 盗 贼 多 有 。</p><p>故 圣 人 云 ：</p><p>「 我 无 为 ， 而 民 自 化 ﹔</p><p>我 好 静 ， 而 民 自 正 ﹔</p><p>我 无 事 ， 而 民 自 富 ﹔</p><p>我 无 欲 ， 而 民 自 朴 。 」</p><p>第 五 十 八 章</p><p>其 政 闷 闷 ， 其 民 淳 淳 ﹔</p><p>其 政 察 察 ， 其 民 缺 缺 。</p><p>祸 兮 福 之 所 倚 ， 福 兮 祸 之 所 伏 。</p><p>孰 知 其 极 。 其 无 正 也 。</p><p>正 复 为 奇 ， 善 复 为 妖 。</p><p>人 之 迷 ， 其 日 固 久 。</p><p>是 以 圣 人 方 而 不 割 ， 廉 而 不 刿 ，直 而 不 肆 ， 光 而 不 耀 。</p><p>第 五 十 九 章</p><p>治 人 事 天 ， 莫 若 啬 。</p><p>夫 唯 啬 ， 是 谓 早 服 ﹔</p><p>早 服 谓 之 重 积 德 ﹔ 重 积 德 则 无 不 克 ﹔</p><p>无 不 克 则 莫 知 其 极 ﹔ 莫 知 其 极 ， 可 以 有 国 ﹔</p><p>有 国 之 母 ， 可 以 长 久 ﹔</p><p>是 谓 深 根 固 柢 ， 长 生 久 视 之 道 。</p><p>第 六 十 章</p><p>治 大 国 ， 若 烹 小 鲜 。</p><p>以 道 莅 天 下 ， 其 鬼 不 神 ﹔</p><p>非 其 鬼 不 神 ， 其 神 不 伤 人 ﹔</p><p>非 其 神 不 伤 人 ， 圣 人 亦 不 伤 人 。</p><p>夫 两 不 相 伤 ， 故 德 交 归 焉 。</p><p>第 六 十 一 章</p><p>大 邦 者 下 流 ， 天 下 之 交 ，天 下 之 牝  。</p><p>牝 常 以 静 胜 牡 ， 以 静 为 下 。</p><p>故 大 邦 以 下 小 邦 ， 则 取 小 邦 ﹔</p><p>小 邦 以 下 大 邦 ， 则 取 大 邦 。</p><p>故 或 下 以 取 ， 或 下 而 取 。</p><p>大 邦 不 过 欲 兼 畜 人 ，</p><p>小 邦 不 过 欲 入 事 人 。</p><p>夫 两 者 各 得 所 欲 ， 大 者 宜 为 下 。</p><p>第 六 十 二 章</p><p>道 者 万 物 之 奥 。 善 人 之 宝 ， 不 善 人 之 所 保 。</p><p>美 言 可 以 市 尊 ， 美 行 可 以 加 人 。</p><p>人 之 不 善 ， 何 弃 之 有 。</p><p>故 立 天 子 ， 置 三 公 ，</p><p>虽 有 拱 璧 以 先 驷 马 ，不 如 坐 进 此 道 。</p><p>古 之 所 以 贵 此 道 者 何 。</p><p>不 曰 ： 求 以 得 ， 有 罪 以 免 邪 。 故 为 天 下 贵 。</p><p>第 六 十 三 章</p><p>为 无 为 ， 事 无 事 ， 味 无 味 。</p><p>图 难 于 其 易 ， 为 大 于 其 细 ﹔</p><p>天 下 难 事 ， 必 作 于 易 ，</p><p>天 下 大 事 ， 必 作 于 细 。</p><p>是 以 圣 人 终 不 为 大 ， 故 能 成 其 大 。</p><p>夫 轻 诺 必 寡 信 ， 多 易 必 多 难 。</p><p>是 以 圣 人 犹 难 之 ， 故 终 无 难 矣 。</p><p>第 六 十 四 章</p><p>其 安 易 持 ， 其 未 兆 易 谋 。</p><p>其 脆 易 泮 ， 其 微 易 散 。</p><p>为 之 于 未 有 ， 治 之 于 未 乱 。</p><p>合 抱 之 木 ， 生 于 毫 末 ﹔</p><p>九 层 之 台 ， 起 于 累 土 ﹔</p><p>千 里 之 行 ， 始 于 足 下。</p><p>民 之 从 事 ， 常 于 几 成 而 败 之 。</p><p>慎 终 如 始 ， 则 无 败 事 。</p><p>第 六 十 五 章</p><p>古 之 善 为 道 者 ， 非 以 明 民 ， 将 以 愚 之 。</p><p>民 之 难 治 ， 以 其 智 多 。</p><p>故 以 智 治 国 ， 国 之 贼 ﹔</p><p>不 以 智 治 国 ， 国 之 福 。</p><p>知 此 两 者 亦 稽 式 。</p><p>常 知 稽 式 ， 是 谓 「 玄 德 」 。</p><p>「 玄 德 」 深 矣 ， 远 矣 ， 与 物 反 矣 ， 然 后 乃 至 大 顺 。</p><p>第 六 十 六 章</p><p>江 海 之 所 以 能 为 百 谷 王 者 ，</p><p>以 其 善 下 之 ， 故 能 为 百 谷 王 。</p><p>是 以 圣 人 欲 上 民 ， 必 以 言 下 之 ﹔</p><p>欲 先 民 ， 必 以 身 后 之 。</p><p>是 以 圣 人 处 上 而 民 不 重 ， 处 前 而 民 不 害 。</p><p>是 以 天 下 乐 推 而 不 厌 。</p><p>以 其 不 争 ， 故 天 下 莫 能 与 之 争 。</p><p>第 六 十 七 章</p><p>天 下 皆 谓 我 道 大 ， 似 不 肖 。</p><p>夫 唯 大 ， 故 似 不 肖 。</p><p>若 肖 ， 久 矣 其 细 也 夫 。</p><p>我 有 三 宝 ， 持 而 保 之 。</p><p>一 曰 慈 ，二 曰 俭 ，</p><p>三 曰 不 敢 为 天 下 先 。</p><p>慈 故 能 勇 ﹔ 俭 故 能 广 ﹔</p><p>不 敢 为 天 下 先 ， 故 能 成 器 长 。</p><p>今 舍 慈 且 勇 ﹔ 舍 俭 且 广 ﹔</p><p>舍 后 且 先 ﹔ 死 矣 。</p><p>夫 慈 以 战 则 胜 ， 以 守 则 固 。</p><p>天 将 救 之 ， 以 慈 卫 之 。</p><p>第 六 十 八 章</p><p>善 为 士 者 ， 不 武 ﹔</p><p>善 战 者 ， 不 怒 ﹔</p><p>善 胜 敌 者 ， 不 与 ﹔</p><p>善 用 人 者 ， 为 之 下 。</p><p>是 谓 不 争 之 德 ，</p><p>是 谓 用 人 之 力 ，</p><p>是 谓 配 天 古 之 极 。</p><p>第 六 十 九 章</p><p>用 兵 有 言 ：</p><p>「 吾 不 敢 为 主 ， 而 为 客 ﹔</p><p>不 敢 进 寸 ， 而 退 尺 。 」</p><p>是 谓 行 无 行 ﹔ 攘 无 臂 ﹔</p><p>扔 无 敌 ﹔ 执 无 兵 。</p><p>祸 莫 大 于 轻 敌 ， 轻 敌 几 丧 吾 宝 。</p><p>故 抗 兵 相 若 ， 哀 者 胜 矣 。</p><p>第 七 十 章</p><p>吾 言 甚 易 知 ， 甚 易 行 。</p><p>天 下 莫 能 知 ， 莫 能 行 。</p><p>言 有 宗 ， 事 有 君 。</p><p>夫 唯 无 知 ， 是 以 不 我 知 。</p><p>知 我 者 希 ， 则 我 者 贵 。</p><p>是 以 圣 人 被 褐 而 怀 玉 。</p><p>第 七 十 一 章</p><p>知 不 知 ， 尚 矣 ﹔</p><p>不 知 知 ， 病 也 。</p><p>圣 人 不 病 ， 以 其 病 病 。</p><p>夫 唯 病 病 ， 是 以 不 病 。</p><p>第 七 十 二 章</p><p>民 不 畏 威 ，则 大 威 至 。</p><p>无 狎 其 所 居 ，无 厌 其 所 生 。</p><p>夫 唯 不 厌 ，是 以 不 厌 。</p><p>是 以 圣 人 自 知 不 自 见 ﹔</p><p>自 爱 不 自 贵 。故 去 彼 取 此 。</p><p>第 七 十 三 章</p><p>勇 于 敢 则 杀 ， 勇 于 不 敢 则 活 。</p><p>此 两 者 ， 或 利 或 害 。</p><p>天 之 所 恶 ， 孰 知 其 故 。</p><p>天 之 道 ，不 争 而 善 胜 ， 不 言 而 善 应 ，不 召 而 自 来 ， 繟 然 而 善 谋 。</p><p>天 网 恢 恢 ， 疏 而 不 失 。</p><p>第 七 十 四 章</p><p>民 不 畏 死 ， 奈 何 以 死 惧 之 。</p><p>若 使 民 常 畏 死 ， 而 为 奇 者 ，</p><p>吾 得 执 而 杀 之 ， 孰 敢 。</p><p>常 有 司 杀 者 杀 。</p><p>夫 代 司 杀 者 杀 ， 是 谓 代 大 匠 斲 ，</p><p>夫 代 大 匠 斲 者 ， 希 有 不 伤 其 手 矣 。</p><p>第 七 十 五 章</p><p>民 之 饥 ， 以 其 上 食 税 之 多 ， 是 以 饥 。</p><p>民 之 难 治 ， 以 其 上 之 有 为 ， 是 以 难 治 。</p><p>民 之 轻 死 ， 以 其 上 求 生 之 厚 ， 是 以 轻 死 。</p><p>夫 唯 无 以 生 为 者 ， 是 贤 于 贵 生 。</p><p>第 七 十 六 章</p><p>人 之 生 也 柔 弱 ， 其 死 也 坚 强 。</p><p>草 木 之 生 也 柔 脆 ， 其 死 也 枯 槁 。</p><p>故 坚 强 者 死 之 徒 ， 柔 弱 者 生 之 徒 。</p><p>是 以 兵 强 则 灭 ， 木 强 则 折 。</p><p>强 大 处 下 ， 柔 弱 处 上 。</p><p>第 七 十 七 章</p><p>天 之 道 ， 其 犹 张 弓 欤 。</p><p>高 者 抑 之 ， 下 者 举 之 ﹔</p><p>有 余 者 损 之 ， 不 足 者 补 之 。</p><p>天 之 道 ， 损 有 余 而 补 不 足 。</p><p>人 之 道 ， 则 不 然 ， 损 不 足 以 奉 有 余 。</p><p>孰 能 有 余 以 奉 天 下 ， 唯 有 道 者 。</p><p>是 以 圣 人 为 而 不 恃 ， 功 成 而 不 处 ， 其 不 欲 见 贤 。</p><p>第 七 十 八 章</p><p>天 下 莫 柔 弱 于 水 ， 而 攻 坚 强 者 莫 之 能 胜 ， 以 其 无 以 易 之 。</p><p>弱 之 胜 强 ， 柔 之 胜 刚 ，</p><p>天 下 莫 不 知 ， 莫 能 行 。</p><p>是 以 圣 人 云 ：</p><p>「 受 国 之 垢 ， 是 谓 社 稷 主 ﹔</p><p>受 国 不 祥 ， 是 为 天 下 王 。 」</p><p>正 言 若 反 。</p><p>第 七 十 九 章</p><p>和 大 怨 ， 必 有 余 怨 ﹔</p><p>报 怨 以 德 ， 安 可 以 为 善 。</p><p>是 以 圣 人 执 左 契 ， 而 不 责 于 人 。</p><p>有 德 司 契 ， 无 德 司 彻 。</p><p>天 道 无 亲 ， 常 与 善 人 。</p><p>第 八 十 章</p><p>小 国 寡 民 。</p><p>使 有 什 伯 之 器 而 不 用 ﹔</p><p>使 民 重 死 而 不 远 徙 。</p><p>虽 有 舟 舆 ， 无 所 乘 之 ，</p><p>虽 有 甲 兵 ， 无 所 陈 之 。</p><p>使 民 复 结 绳 而 用 之 。</p><p>甘 其 食 ， 美 其 服 ， 安 其 居 ， 乐 其 俗 。</p><p>邻 国 相 望 ， 鸡 犬 之 声 相 闻 ，</p><p>民 至 老 死 ， 不 相 往 来 。</p><p>第 八 十 一 章</p><p>信 言 不 美 ， 美 言 不 信 。</p><p>善 者 不 辩 ， 辩 者 不 善 。</p><p>知 者 不 博 ， 博 者 不 知 。</p><p>圣 人 不 积 ， 既 以 为 人 己 愈 有 ，</p><p>既 以 与 人 己 愈 多 。</p><p>天 之 道 ， 利 而 不 害 ﹔</p><p>圣 人 之 道 ， 为 而 不 争 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第 一 章&lt;/p&gt;
&lt;p&gt;道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。&lt;/p&gt;
&lt;p&gt;无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。&lt;/p&gt;
&lt;p&gt;故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。&lt;/p&gt;
&lt;p&gt;此 两 者
      
    
    </summary>
    
      <category term="道" scheme="https://amote.xin/categories/%E9%81%93/"/>
    
    
      <category term="道" scheme="https://amote.xin/tags/%E9%81%93/"/>
    
      <category term="道德经" scheme="https://amote.xin/tags/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    
      <category term="老子" scheme="https://amote.xin/tags/%E8%80%81%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>般若波罗蜜多心经</title>
    <link href="https://amote.xin/2018/12/14/%E8%88%AC%E8%8B%A5%E6%B3%A2%E7%BD%97%E8%9C%9C%E5%A4%9A%E5%BF%83%E7%BB%8F/"/>
    <id>https://amote.xin/2018/12/14/般若波罗蜜多心经/</id>
    <published>2018-12-14T11:19:28.000Z</published>
    <updated>2018-12-14T11:44:33.841Z</updated>
    
    <content type="html"><![CDATA[<p>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。</p><p>舍利子，色不异空，空不异色，色即是空，空即是色，受想行识亦复如是。</p><p>舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界乃至无意识界，无无明亦无无明尽，乃至无老死，亦无老死尽，无苦集灭道，无智亦无得。</p><p>以无所得故，菩提萨埵，依般若波罗蜜多故，心无挂碍；无挂碍故，无有恐怖，远离颠倒梦想，究竟涅槃。</p><p>三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。</p><p>故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。</p><p>故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。&lt;/p&gt;
&lt;p&gt;舍利子，色不异空，空不异色，色即是空，空即是色，受想行识亦复如是。&lt;/p&gt;
&lt;p&gt;舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界乃至
      
    
    </summary>
    
      <category term="佛" scheme="https://amote.xin/categories/%E4%BD%9B/"/>
    
    
      <category term="佛" scheme="https://amote.xin/tags/%E4%BD%9B/"/>
    
      <category term="心经" scheme="https://amote.xin/tags/%E5%BF%83%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>centos安装NFS</title>
    <link href="https://amote.xin/2018/12/14/centos%E5%AE%89%E8%A3%85NFS/"/>
    <id>https://amote.xin/2018/12/14/centos安装NFS/</id>
    <published>2018-12-14T11:12:11.000Z</published>
    <updated>2018-12-14T11:16:17.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器端安装"><a href="#服务器端安装" class="headerlink" title="服务器端安装"></a>服务器端安装</h1><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>$ systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service</p><h2 id="安装配置nfs"><a href="#安装配置nfs" class="headerlink" title="安装配置nfs"></a>安装配置nfs</h2><p>$ yum -y install nfs-utils rpcbind<br>$ mkdir -p /data/k8s<br>$ chmod 755 /data/k8s/</p><h2 id="nfs-的默认配置文件在-etc-exports-文件下，在该文件中添加下面的配置信息"><a href="#nfs-的默认配置文件在-etc-exports-文件下，在该文件中添加下面的配置信息" class="headerlink" title="nfs 的默认配置文件在 /etc/exports 文件下，在该文件中添加下面的配置信息"></a>nfs 的默认配置文件在 /etc/exports 文件下，在该文件中添加下面的配置信息</h2><p>$ vi /etc/exports<br>/data/k8s  *(rw,sync,no_root_squash)</p><h2 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h2><p>/data/k8s：是共享的数据目录<br>*：表示任何人都有权限连接，当然也可以是一个网段，一个 IP，也可以是域名<br>rw：读写的权限<br>sync：表示文件同时写入硬盘和内存<br>no_root_squash：当登录 NFS 主机使用共享目录的使用者是 root 时，其权限将被转换成为匿名使用者，通常它的 UID 与 GID，都会变成 nobody 身份<br>3、启动nfs<br># 启动服务 nfs 需要向 rpc 注册，rpc 一旦重启了，注册的文件都会丢失，向他注册的服务都需要重启<br># 注意启动顺序，先启动 rpcbind</p><p>$ systemctl start rpcbind.service &amp;&amp; systemctl enable rpcbind<br>$ systemctl status rpcbind<br>● rpcbind.service - RPC bind service<br>   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)<br>   Active: active (running) since Mon 2018-07-30 15:56:09 CST; 12s ago<br> Main PID: 24517 (rpcbind)<br>   CGroup: /system.slice/rpcbind.service<br>           └─24517 /sbin/rpcbind -w</p><p>Jul 30 15:56:09 lab1 systemd[1]: Starting RPC bind service…<br>Jul 30 15:56:09 lab1 systemd[1]: Started RPC bind service.</p><p>$ systemctl start nfs.service &amp;&amp; systemctl enable nfs<br>$ systemctl status nfs<br>● nfs-server.service - NFS server and services<br>   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)<br>  Drop-In: /run/systemd/generator/nfs-server.service.d<br>           └─order-with-mounts.conf<br>   Active: active (exited) since Mon 2018-07-30 15:56:46 CST; 11s ago<br> Main PID: 24742 (code=exited, status=0/SUCCESS)<br>   CGroup: /system.slice/nfs-server.service</p><p>Jul 30 15:56:46 lab1 systemd[1]: Starting NFS server and services…<br>Jul 30 15:56:46 lab1 systemd[1]: Started NFS server and services.</p><h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><h2 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>$ systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service<br>安装nfs<br>$ yum -y install nfs-utils rpcbind</p><h2 id="先启动-rpc、然后启动-nfs"><a href="#先启动-rpc、然后启动-nfs" class="headerlink" title="先启动 rpc、然后启动 nfs"></a>先启动 rpc、然后启动 nfs</h2><p>$ systemctl start rpcbind.service &amp;&amp; systemctl enable rpcbind.service</p><p>$ systemctl start nfs.service &amp;&amp; systemctl enable nfs.service</p><h1 id="验证、测试"><a href="#验证、测试" class="headerlink" title="验证、测试"></a>验证、测试</h1><h2 id="确认服务端启动"><a href="#确认服务端启动" class="headerlink" title="确认服务端启动"></a>确认服务端启动</h2><p>$ rpcinfo -p|grep nfs<br>    100003    3   tcp   2049  nfs<br>    100003    4   tcp   2049  nfs<br>    100227    3   tcp   2049  nfs_acl<br>    100003    3   udp   2049  nfs<br>    100003    4   udp   2049  nfs<br>    100227    3   udp   2049  nfs_acl</p><h2 id="服务端查看具体目录挂载权限"><a href="#服务端查看具体目录挂载权限" class="headerlink" title="服务端查看具体目录挂载权限"></a>服务端查看具体目录挂载权限</h2><p>$ cat /var/lib/nfs/etab<br>/data/k8s       *(rw,sync,wdelay,hide,nocrossmnt,secure,no_root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,secure,no_root_squash,no_all_squash)</p><h2 id="客户端挂载测试"><a href="#客户端挂载测试" class="headerlink" title="客户端挂载测试"></a>客户端挂载测试</h2><h3 id="查看nfs-是否有共享目录"><a href="#查看nfs-是否有共享目录" class="headerlink" title="查看nfs 是否有共享目录"></a>查看nfs 是否有共享目录</h3><p>$ showmount -e 11.11.11.111<br>Export list for 11.11.11.111:<br>/data/k8s *</p><h3 id="客户端上新建目录"><a href="#客户端上新建目录" class="headerlink" title="客户端上新建目录"></a>客户端上新建目录</h3><p>$ mkdir -p /root/zhang</p><p>$ mount -t nfs 11.11.11.111:/data/k8s /root/zhang<br>$ touch /root/zhang/test.txt</p><h3 id="在服务器端查看"><a href="#在服务器端查看" class="headerlink" title="在服务器端查看"></a>在服务器端查看</h3><p>$ ls -ls /data/k8s/<br>total 0<br>0 -rw-r–r–. 1 root root 0 Jul 30 16:09 test.txt<br>参考地址：<a href="https://blog.qikqiak.com/post/kubernetes-persistent-volume1/" target="_blank" rel="noopener">https://blog.qikqiak.com/post/kubernetes-persistent-volume1/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器端安装&quot;&gt;&lt;a href=&quot;#服务器端安装&quot; class=&quot;headerlink&quot; title=&quot;服务器端安装&quot;&gt;&lt;/a&gt;服务器端安装&lt;/h1&gt;&lt;h2 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="存储" scheme="https://amote.xin/categories/%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="NFS" scheme="https://amote.xin/tags/NFS/"/>
    
      <category term="存储" scheme="https://amote.xin/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="centos" scheme="https://amote.xin/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos7使用kubeadm安装k8s-1.11版本多主高可用</title>
    <link href="https://amote.xin/2018/12/14/centos7%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85k8s-1-11%E7%89%88%E6%9C%AC%E5%A4%9A%E4%B8%BB%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://amote.xin/2018/12/14/centos7使用kubeadm安装k8s-1-11版本多主高可用/</id>
    <published>2018-12-14T10:27:26.000Z</published>
    <updated>2018-12-14T11:09:34.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h1><h2 id="实验架构图"><a href="#实验架构图" class="headerlink" title="实验架构图"></a>实验架构图</h2><p>lab1: etcd master haproxy keepalived 11.11.11.111<br>lab2: etcd master haproxy keepalived 11.11.11.112<br>lab3: etcd master haproxy keepalived 11.11.11.113<br>lab4: node  11.11.11.114<br>lab5: node  11.11.11.115<br>lab6: node  11.11.11.116</p><p>vip(loadblancer ip): 11.11.11.110<br>复制代码<br>实验使用的Vagrantfile<br># -<em>- mode: ruby -</em>-<br># vi: set ft=ruby :</p><p>ENV[“LC_ALL”] = “en_US.UTF-8”</p><p>Vagrant.configure(“2”) do |config|<br>​    (1..6).each do |i|<br>​      config.vm.define “lab#{i}” do |node|<br>​        node.vm.box = “centos-7.4-docker-17”<br>​        node.ssh.insert_key = false<br>​        node.vm.hostname = “lab#{i}”<br>​        node.vm.network “private_network”, ip: “11.11.11.11#{i}”<br>​        node.vm.provision “shell”,<br>​          inline: “echo hello from node #{i}”<br>​        node.vm.provider “virtualbox” do |v|<br>​          v.cpus = 2<br>​          v.customize [“modifyvm”, :id, “–name”, “lab#{i}”, “–memory”, “2048”]<br>​        end<br>​      end<br>​    end<br>end</p><h1 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h1><p>v1.11.0版本推荐使用docker v17.03, v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。 测试发现17.09无法正常使用，不能使用资源限制(内存CPU)<br>如下操作在所有节点操作</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p># 卸载安装指定版本docker-ce<br>yum remove -y docker-ce docker-ce-selinux container-selinux<br>yum install -y –setopt=obsoletes=0 \<br>docker-ce-17.03.1.ce-1.el7.centos \<br>docker-ce-selinux-17.03.1.ce-1.el7.centos</p><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><p>systemctl enable docker &amp;&amp; systemctl restart docker</p><h1 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h1><font color="#FF0000"> 如下操作在所有节点操作</font><br>## 使用阿里镜像安装<br># 配置源<br>cat &lt;<eof> /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</a><br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=<a href="https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a> <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a><br>EOF<br><br># 安装<br>yum install -y kubelet kubeadm kubectl ipvsadm<br><br>## 配置系统相关参数<br># 临时禁用selinux<br># 永久关闭 修改/etc/sysconfig/selinux文件设置<br>sed -i ‘s/SELINUX=permissive/SELINUX=disabled/‘ /etc/sysconfig/selinux<br>setenforce 0<br><br># 临时关闭swap<br># 永久关闭 注释/etc/fstab文件里swap相关的行<br>swapoff -a<br><br># 开启forward<br># Docker从1.13版本开始调整了默认的防火墙规则<br># 禁用了iptables filter表中FOWARD链<br># 这样会引起Kubernetes集群中跨Node的Pod无法通信<br><br>iptables -P FORWARD ACCEPT<br><br># 配置转发相关参数，否则可能会出错<br>cat &lt;<eof>  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>vm.swappiness=0<br>EOF<br>sysctl –system<br><br># 加载ipvs相关内核模块<br># 如果重新开机，需要重新加载<br>modprobe ip_vs<br>modprobe ip_vs_rr<br>modprobe ip_vs_wrr<br>modprobe ip_vs_sh<br>modprobe nf_conntrack_ipv4<br>lsmod | grep ip_vs<br><br>## 配置hosts解析<br><font color="#FF0000"> 如下操作在所有节点操作</font><br>cat &gt;&gt;/etc/hosts&lt;&lt;EOF<br>11.11.11.111 lab1<br>11.11.11.112 lab2<br>11.11.11.113 lab3<br>11.11.11.114 lab4<br>11.11.11.115 lab5<br>11.11.11.116 lab6<br>EOF<br><br># 配置haproxy代理和keepalived<br><font color="#FF0000"> 如下操作在节点lab1,lab2,lab3操作</font><br># 拉取haproxy镜像<br>docker pull haproxy:1.7.8-alpine<br>mkdir /etc/haproxy<br>cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF<br>global<br>  log 127.0.0.1 local0 err<br>  maxconn 50000<br>  uid 99<br>  gid 99<br>  #daemon<br>  nbproc 1<br>  pidfile haproxy.pid<br><br>defaults<br>  mode http<br>  log 127.0.0.1 local0 err<br>  maxconn 50000<br>  retries 3<br>  timeout connect 5s<br>  timeout client 30s<br>  timeout server 30s<br>  timeout check 2s<br><br>listen admin_stats<br>  mode http<br>  bind 0.0.0.0:1080<br>  log 127.0.0.1 local0 err<br>  stats refresh 30s<br>  stats uri     /haproxy-status<br>  stats realm   Haproxy\ Statistics<br>  stats auth    will:will<br>  stats hide-version<br>  stats admin if TRUE<br><br>frontend k8s-https<br>  bind 0.0.0.0:8443<br>  mode tcp<br>  #maxconn 50000<br>  default_backend k8s-https<br><br>backend k8s-https<br>  mode tcp<br>  balance roundrobin<br>  server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3<br>  server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3<br>  server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3<br>EOF<br><br># 启动haproxy<br>docker run -d –name my-haproxy \<br>-v /etc/haproxy:/usr/local/etc/haproxy:ro \<br>-p 8443:8443 \<br>-p 1080:1080 \<br>–restart always \<br>haproxy:1.7.8-alpine<br><br># 查看日志<br>docker logs my-haproxy<br><br># 浏览器查看状态<br><a href="http://11.11.11.111:1080/haproxy-status" target="_blank" rel="noopener">http://11.11.11.111:1080/haproxy-status</a><br><a href="http://11.11.11.112:1080/haproxy-status" target="_blank" rel="noopener">http://11.11.11.112:1080/haproxy-status</a><br><br># 拉取keepalived镜像<br>docker pull osixia/keepalived:1.4.4<br><br># 启动<br># 载入内核相关模块<br>lsmod | grep ip_vs<br>modprobe ip_vs<br><br># 启动keepalived<br># eth1为本次实验11.11.11.0/24网段的所在网卡<br>docker run –net=host –cap-add=NET_ADMIN \<br>-e KEEPALIVED_INTERFACE=eth1 \<br>-e KEEPALIVED_VIRTUAL_IPS=”#PYTHON2BASH:[‘11.11.11.110’]” \<br>-e KEEPALIVED_UNICAST_PEERS=”#PYTHON2BASH:[‘11.11.11.111’,’11.11.11.112’,’11.11.11.113’]” \<br>-e KEEPALIVED_PASSWORD=hello \<br>–name k8s-keepalived \<br>–restart always \<br>-d osixia/keepalived:1.4.4<br><br># 查看日志<br># 会看到两个成为backup 一个成为master<br>docker logs k8s-keepalived<br><br># 此时会配置 11.11.11.110 到其中一台机器<br># ping测试<br>ping -c4 11.11.11.110<br><br># 如果失败后清理后，重新实验<br>docker rm -f k8s-keepalived<br>ip a del 11.11.11.110/32 dev eth1<br><br># 配置启动kubelet<br><font color="#FF0000"> 如下操作在所有节点操作</font><br># 配置kubelet使用国内pause镜像<br># 配置kubelet的cgroups<br># 获取docker的cgroups<br>DOCKER_CGROUPS=$(docker info | grep ‘Cgroup’ | cut -d’ ‘ -f3)<br>echo $DOCKER_CGROUPS<br>cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF<br>KUBELET_EXTRA_ARGS=”–cgroup-driver=$DOCKER_CGROUPS –pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1”<br>EOF<br><br># 启动<br>systemctl daemon-reload<br>systemctl enable kubelet &amp;&amp; systemctl restart kubelet<br><br># 配置master<br>## 配置第一个master节点<br><font color="#FF0000"> 如下操作在lab1节点操作</font><br># 1.11 版本 centos 下使用 ipvs 模式会出问题<br># 参考 <a href="https://github.com/kubernetes/kubernetes/issues/65461" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/65461</a><br><br># 生成配置文件<br>CP0_IP=”11.11.11.111”<br>CP0_HOSTNAME=”lab1”<br>cat &gt;kubeadm-master.config&lt;&lt;EOF<br>apiVersion: kubeadm.k8s.io/v1alpha2<br>kind: MasterConfiguration<br>kubernetesVersion: v1.11.0<br>imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers<br><br>apiServerCertSANs:<br>- “lab1”<br>- “lab2”<br>- “lab3”<br>- “11.11.11.111”<br>- “11.11.11.112”<br>- “11.11.11.113”<br>- “11.11.11.110”<br>- “127.0.0.1”<br><br>api:<br>  advertiseAddress: $CP0_IP<br>  controlPlaneEndpoint: 11.11.11.110:8443<br><br>etcd:<br>  local:<br>​    extraArgs:<br>​      listen-client-urls: “<a href="https://127.0.0.1:2379,https://$CP0_IP:2379&quot;" target="_blank" rel="noopener">https://127.0.0.1:2379,https://$CP0_IP:2379&quot;</a><br>​      advertise-client-urls: “https://$CP0_IP:2379”<br>​      listen-peer-urls: “https://$CP0_IP:2380”<br>​      initial-advertise-peer-urls: “https://$CP0_IP:2380”<br>​      initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380”<br>​    serverCertSANs:<br>​      - $CP0_HOSTNAME<br>​      - $CP0_IP<br>​    peerCertSANs:<br>​      - $CP0_HOSTNAME<br>​      - $CP0_IP<br><br>controllerManagerExtraArgs:<br>  node-monitor-grace-period: 10s<br>  pod-eviction-timeout: 10s<br><br>networking:<br>  podSubnet: 10.244.0.0/16<br><br>kubeProxy:<br>  config:<br>​    # mode: ipvs<br>​    mode: iptables<br>EOF<br><br># 提前拉取镜像<br># 如果执行失败 可以多次执行<br>kubeadm config images pull –config kubeadm-master.config<br><br># 初始化<br># 注意保存返回的 join 命令<br>kubeadm init –config kubeadm-master.config<br><br># 打包ca相关文件上传至其他master节点<br># 前提是lab2,lab3已设置免密ssh，如何设置免密ssh,请查看相关文档<br>cd /etc/kubernetes &amp;&amp; tar cvzf k8s-key.tgz admin.conf pki/ca.<em> pki/sa.</em> pki/front-proxy-ca.<em> pki/etcd/ca.</em><br>scp k8s-key.tgz lab2:~/<br>scp k8s-key.tgz lab3:~/<br>ssh lab2 ‘tar xf k8s-key.tgz -C /etc/kubernetes/‘<br>ssh lab3 ‘tar xf k8s-key.tgz -C /etc/kubernetes/‘<br><br>## 配置第二个master节点<br>如下操作在<font color="#FF0000"> lab2</font>节点操作<br># 1.11 版本 centos 下使用 ipvs 模式会出问题<br># 参考 <a href="https://github.com/kubernetes/kubernetes/issues/65461" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/65461</a><br><br># 生成配置文件<br>CP0_IP=”11.11.11.111”<br>CP0_HOSTNAME=”lab1”<br>CP1_IP=”11.11.11.112”<br>CP1_HOSTNAME=”lab2”<br>cat &gt;kubeadm-master.config&lt;&lt;EOF<br>apiVersion: kubeadm.k8s.io/v1alpha2<br>kind: MasterConfiguration<br>kubernetesVersion: v1.11.0<br>imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers<br><br>apiServerCertSANs:<br>- “lab1”<br>- “lab2”<br>- “lab3”<br>- “11.11.11.111”<br>- “11.11.11.112”<br>- “11.11.11.113”<br>- “11.11.11.110”<br>- “127.0.0.1”<br><br>api:<br>  advertiseAddress: $CP1_IP<br>  controlPlaneEndpoint: 11.11.11.110:8443<br><br>etcd:<br>  local:<br>​    extraArgs:<br>​      listen-client-urls: “<a href="https://127.0.0.1:2379,https://$CP1_IP:2379&quot;" target="_blank" rel="noopener">https://127.0.0.1:2379,https://$CP1_IP:2379&quot;</a><br>​      advertise-client-urls: “https://$CP1_IP:2379”<br>​      listen-peer-urls: “https://$CP1_IP:2380”<br>​      initial-advertise-peer-urls: “https://$CP1_IP:2380”<br>​      initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380”<br>​      initial-cluster-state: existing<br>​    serverCertSANs:<br>​      - $CP1_HOSTNAME<br>​      - $CP1_IP<br>​    peerCertSANs:<br>​      - $CP1_HOSTNAME<br>​      - $CP1_IP<br><br>controllerManagerExtraArgs:<br>  node-monitor-grace-period: 10s<br>  pod-eviction-timeout: 10s<br><br>networking:<br>  podSubnet: 10.244.0.0/16<br><br>kubeProxy:<br>  config:<br>​    # mode: ipvs<br>​    mode: iptables<br>EOF<br><br># 配置kubelet<br>kubeadm alpha phase certs all –config kubeadm-master.config<br>kubeadm alpha phase kubelet config write-to-disk –config kubeadm-master.config<br>kubeadm alpha phase kubelet write-env-file –config kubeadm-master.config<br>kubeadm alpha phase kubeconfig kubelet –config kubeadm-master.config<br>systemctl restart kubelet<br><br># 添加etcd到集群中<br>CP0_IP=”11.11.11.111”<br>CP0_HOSTNAME=”lab1”<br>CP1_IP=”11.11.11.112”<br>CP1_HOSTNAME=”lab2”<br>KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-${CP0_HOSTNAME} – etcdctl –ca-file /etc/kubernetes/pki/etcd/ca.crt –cert-file /etc/kubernetes/pki/etcd/peer.crt –key-file /etc/kubernetes/pki/etcd/peer.key –endpoints=https://${CP0_IP}:2379 member add ${CP1_HOSTNAME} https://${CP1_IP}:2380<br>kubeadm alpha phase etcd local –config kubeadm-master.config<br><br># 提前拉取镜像<br># 如果执行失败 可以多次执行<br>kubeadm config images pull –config kubeadm-master.config<br><br># 部署<br>kubeadm alpha phase kubeconfig all –config kubeadm-master.config<br>kubeadm alpha phase controlplane all –config kubeadm-master.config<br>kubeadm alpha phase mark-master –config kubeadm-master.config<br><br>## 配置第三个master节点<br>如下操作在<font color="#FF0000"> lab3</font>节点操作<br># 1.11 版本 centos 下使用 ipvs 模式会出问题<br># 参考 <a href="https://github.com/kubernetes/kubernetes/issues/65461" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/65461</a><br><br># 生成配置文件<br>CP0_IP=”11.11.11.111”<br>CP0_HOSTNAME=”lab1”<br>CP1_IP=”11.11.11.112”<br>CP1_HOSTNAME=”lab2”<br>CP2_IP=”11.11.11.113”<br>CP2_HOSTNAME=”lab3”<br>cat &gt;kubeadm-master.config&lt;&lt;EOF<br>apiVersion: kubeadm.k8s.io/v1alpha2<br>kind: MasterConfiguration<br>kubernetesVersion: v1.11.0<br>imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers<br><br>apiServerCertSANs:<br>- “lab1”<br>- “lab2”<br>- “lab3”<br>- “11.11.11.111”<br>- “11.11.11.112”<br>- “11.11.11.113”<br>- “11.11.11.110”<br>- “127.0.0.1”<br><br>api:<br>  advertiseAddress: $CP2_IP<br>  controlPlaneEndpoint: 11.11.11.110:8443<br><br>etcd:<br>  local:<br>​    extraArgs:<br>​      listen-client-urls: “<a href="https://127.0.0.1:2379,https://$CP2_IP:2379&quot;" target="_blank" rel="noopener">https://127.0.0.1:2379,https://$CP2_IP:2379&quot;</a><br>​      advertise-client-urls: “https://$CP2_IP:2379”<br>​      listen-peer-urls: “https://$CP2_IP:2380”<br>​      initial-advertise-peer-urls: “https://$CP2_IP:2380”<br>​      initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380,$CP2_HOSTNAME=https://$CP2_IP:2380”<br>​      initial-cluster-state: existing<br>​    serverCertSANs:<br>​      - $CP2_HOSTNAME<br>​      - $CP2_IP<br>​    peerCertSANs:<br>​      - $CP2_HOSTNAME<br>​      - $CP2_IP<br><br>controllerManagerExtraArgs:<br>  node-monitor-grace-period: 10s<br>  pod-eviction-timeout: 10s<br><br>networking:<br>  podSubnet: 10.244.0.0/16<br><br>kubeProxy:<br>  config:<br>​    # mode: ipvs<br>​    mode: iptables<br>EOF<br><br># 配置kubelet<br>kubeadm alpha phase certs all –config kubeadm-master.config<br>kubeadm alpha phase kubelet config write-to-disk –config kubeadm-master.config<br>kubeadm alpha phase kubelet write-env-file –config kubeadm-master.config<br>kubeadm alpha phase kubeconfig kubelet –config kubeadm-master.config<br>systemctl restart kubelet<br><br># 添加etcd到集群中<br>CP0_IP=”11.11.11.111”<br>CP0_HOSTNAME=”lab1”<br>CP2_IP=”11.11.11.113”<br>CP2_HOSTNAME=”lab3”<br>KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-${CP0_HOSTNAME} – etcdctl –ca-file /etc/kubernetes/pki/etcd/ca.crt –cert-file /etc/kubernetes/pki/etcd/peer.crt –key-file /etc/kubernetes/pki/etcd/peer.key –endpoints=https://${CP0_IP}:2379 member add ${CP2_HOSTNAME} https://${CP2_IP}:2380<br>kubeadm alpha phase etcd local –config kubeadm-master.config<br><br># 提前拉取镜像<br># 如果执行失败 可以多次执行<br>kubeadm config images pull –config kubeadm-master.config<br><br># 部署<br>kubeadm alpha phase kubeconfig all –config kubeadm-master.config<br>kubeadm alpha phase controlplane all –config kubeadm-master.config<br>kubeadm alpha phase mark-master –config kubeadm-master.config<br><br># 配置使用kubectl<br>如下操作在任意master节点操作<br>rm -rf $HOME/.kube<br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br># 查看node节点<br>kubectl get nodes<br><br># 只有网络插件也安装配置完成之后，才能会显示为ready状态<br># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件<br># 如 dashboard, heapster, efk等<br>kubectl taint nodes –all node-role.kubernetes.io/master-<br><br># 配置使用网络插件<br>如下操作在任意<font color="#FF0000"> master</font>节点操作<br># 下载配置<br>mkdir flannel &amp;&amp; cd flannel<br>wget <a href="https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</a><br><br># 修改配置<br># 此处的ip配置要与上面kubeadm的pod-network一致<br>  net-conf.json: |<br>​    {<br>​      “Network”: “10.244.0.0/16”,<br>​      “Backend”: {<br>​        “Type”: “vxlan”<br>​      }<br>​    }<br><br># 修改镜像<br>image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br>docker pull registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br><br># 修改image为registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br># 如果Node有多个网卡的话，参考flannel issues 39701，<br># <a href="https://github.com/kubernetes/kubernetes/issues/39701" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/39701</a><br># 目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，<br># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，<br># flanneld启动参数加上–iface=<iface-name><br>​    containers:<br>​      - name: kube-flannel<br>​        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br>​        command:<br>​        - /opt/bin/flanneld<br>​        args:<br>​        - –ip-masq<br>​        - –kube-subnet-mgr<br>​        - –iface=eth1<br><br># 启动<br>kubectl apply -f kube-flannel.yml<br><br># 查看<br>kubectl get pods –namespace kube-system<br>kubectl get svc –namespace kube-system<br><br># 配置node节点加入集群<br>如下操作在所有<font color="#FF0000"> node</font>节点操作<br># 此命令为初始化master成功后返回的结果<br>kubeadm join 11.11.11.110:8443 –token yzb7v7.dy40mhlljt1d48i9 –discovery-token-ca-cert-hash sha256:61ec309e6f942305006e6622dcadedcc64420e361231eff23cb535a183c0e77a<br><br># 常见错误<br>## coredns不正常<br>ubectl get pods<br>kubectl get svc<br>kubectl describe svc example-service<br><img src="/2018/12/14/centos7使用kubeadm安装k8s-1-11版本多主高可用/1.png"><br><br>查看日志<br><img src="/2018/12/14/centos7使用kubeadm安装k8s-1-11版本多主高可用/2.png"><br># 解决方案<br># <a href="https://github.com/rancher/rancher/issues/13310" target="_blank" rel="noopener">https://github.com/rancher/rancher/issues/13310</a><br># edit /etc/sysconfig/docker and remove –selinux-enabled from the OPTIONS variable (or –selinux-enabled=false)<br><img src="/2018/12/14/centos7使用kubeadm安装k8s-1-11版本多主高可用/3.png"><br><br><font color="#FF0000"><br>在所有节点操作！<br>重启docker<br>systemctl restart docker<br></font><h1 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h1><h2 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h2><p>配置好网络之后，kubeadm会自动部署coredns<br>如下测试可以在配置kubectl的节点上操作</p><p>启动<br>kubectl run nginx –replicas=2 –image=nginx:alpine –port=80<br>kubectl expose deployment nginx –type=NodePort –name=example-service-nodeport<br>kubectl expose deployment nginx –name=example-service</p><p>查看状态<br>kubectl get deploy<br>kubectl get pods<br>kubectl get svc<br>kubectl describe svc example-service</p><p>DNS解析<br>kubectl run curl –image=radial/busyboxplus:curl -i –tty<br>nslookup kubernetes<br>nslookup example-service<br>curl example-service</p><p>访问测试<br># 10.96.59.56 为查看svc时获取到的clusterip<br>curl “10.96.59.56:80”</p><p># 32223 为查看svc时获取到的 nodeport<br><a href="http://11.11.11.112:32223/" target="_blank" rel="noopener">http://11.11.11.112:32223/</a><br><a href="http://11.11.11.113:32223/" target="_blank" rel="noopener">http://11.11.11.113:32223/</a></p><p>清理删除<br>kubectl delete svc example-service example-service-nodeport<br>kubectl delete deploy nginx curl</p><h1 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h1><p>关闭任一master节点测试集群是能否正常执行上一步的基础测试，查看相关信息，不能同时关闭两个节点，因为3个节点组成的etcd集群，最多只能有一个当机。</p><p># 查看组件状态<br>kubectl get pod –all-namespaces -o wide<br>kubectl get pod –all-namespaces -o wide | grep lab1<br>kubectl get pod –all-namespaces -o wide | grep lab2<br>kubectl get pod –all-namespaces -o wide | grep lab3<br>kubectl get nodes -o wide<br>kubectl get deploy<br>kubectl get pods<br>kubectl get svc</p><p># 访问测试<br>CURL_POD=$(kubectl get pods | grep curl | grep Running | cut -d ‘ ‘ -f1)<br>kubectl exec -ti $CURL_POD – sh –tty<br>nslookup kubernetes<br>nslookup example-service<br>curl example-service</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>忘记初始master节点时的node节点加入集群命令怎么办</p><p># 简单方法<br>kubeadm token create –print-join-command</p><p># 第二种方法<br>token=$(kubeadm token generate)<br>kubeadm token create $token –print-join-command –ttl=0</p></iface-name></eof></eof>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验环境说明&quot;&gt;&lt;a href=&quot;#实验环境说明&quot; class=&quot;headerlink&quot; title=&quot;实验环境说明&quot;&gt;&lt;/a&gt;实验环境说明&lt;/h1&gt;&lt;h2 id=&quot;实验架构图&quot;&gt;&lt;a href=&quot;#实验架构图&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://amote.xin/categories/kubernetes/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Centos7" scheme="https://amote.xin/tags/Centos7/"/>
    
      <category term="kubernetes" scheme="https://amote.xin/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>centos7使用kubeadm安装k8s-1.11版本</title>
    <link href="https://amote.xin/2018/12/14/centos7%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85k8s-1-11%E7%89%88%E6%9C%AC/"/>
    <id>https://amote.xin/2018/12/14/centos7使用kubeadm安装k8s-1-11版本/</id>
    <published>2018-12-14T10:06:23.000Z</published>
    <updated>2018-12-14T10:24:46.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方地址："><a href="#官方地址：" class="headerlink" title="官方地址："></a>官方地址：</h1><p><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></p><p><a href="https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/</a></p><h1 id="实验架构："><a href="#实验架构：" class="headerlink" title="实验架构："></a>实验架构：</h1><p>lab1: master 11.11.11.111<br>lab2: node 11.11.11.112<br>lab3: node 11.11.11.113</p><p>#cat /etc/redhat-release<br>CentOS Linux release 7.4.1708 (Core)</p><h1 id="如下操作在所有节点操作："><a href="#如下操作在所有节点操作：" class="headerlink" title="如下操作在所有节点操作："></a>如下操作在所有节点操作：</h1><h2 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h2><p>配置源<br>cat &lt;<eof> /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</a><br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=<a href="https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a> <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a><br>EOF</eof></p><p>安装<br>yum install -y kubelet kubeadm kubectl ipvsadm</p><h2 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h2><p>临时禁用selinux<br>永久关闭 修改/etc/sysconfig/selinux文件设置<br>sed -i ‘s/SELINUX=permissive/SELINUX=disabled/‘ /etc/sysconfig/selinux<br>setenforce 0</p><p>临时关闭swap<br>永久关闭 注释/etc/fstab文件里swap相关的行<br>swapoff -a</p><p>开启forward<br>Docker从1.13版本开始调整了默认的防火墙规则<br>禁用了iptables filter表中FOWARD链<br>这样会引起Kubernetes集群中跨Node的Pod无法通信</p><p>iptables -P FORWARD ACCEPT</p><p>配置转发相关参数，否则可能会出错<br>cat &lt;<eof>  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>vm.swappiness=0<br>EOF<br>sysctl –system</eof></p><p>加载ipvs相关内核模块<br>如果重新开机，需要重新加载<br>modprobe ip_vs<br>modprobe ip_vs_rr<br>modprobe ip_vs_wrr<br>modprobe ip_vs_sh<br>modprobe nf_conntrack_ipv4<br>lsmod | grep ip_vs</p><h2 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h2><p>配置kubelet使用国内pause镜像<br>配置kubelet的cgroups<br>获取docker的cgroups<br>DOCKER_CGROUPS=$(docker info | grep ‘Cgroup’ | cut -d’ ‘ -f3)<br>echo $DOCKER_CGROUPS<br>cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF<br>KUBELET_EXTRA_ARGS=”–cgroup-driver=$DOCKER_CGROUPS –pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1”<br>EOF</p><p>启动<br>systemctl daemon-reload<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet</p><h1 id="如下操作在master节点操作"><a href="#如下操作在master节点操作" class="headerlink" title="如下操作在master节点操作"></a>如下操作在master节点操作</h1><h2 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h2><p>1.11 版本 centos 下使用 ipvs 模式会出问题<br>参考 <a href="https://github.com/kubernetes/kubernetes/issues/65461" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/65461</a></p><p>生成配置文件<br>cat &gt;kubeadm-master.config&lt;&lt;EOF<br>apiVersion: kubeadm.k8s.io/v1alpha2<br>kind: MasterConfiguration<br>kubernetesVersion: v1.11.0<br>imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers<br>api:<br>  advertiseAddress: 11.11.11.111</p><p>controllerManagerExtraArgs:<br>  node-monitor-grace-period: 10s<br>  pod-eviction-timeout: 10s</p><p>networking:<br>  podSubnet: 10.244.0.0/16</p><p>kubeProxy:<br>  config:<br>​    # mode: ipvs<br>​    mode: iptables<br>EOF</p><p>提前拉取镜像<br>如果执行失败 可以多次执行<br>kubeadm config images pull –config kubeadm-master.config</p><p>初始化<br>kubeadm init –config kubeadm-master.config</p><h2 id="配置使用kubectl"><a href="#配置使用kubectl" class="headerlink" title="配置使用kubectl"></a>配置使用kubectl</h2><p>rm -rf $HOME/.kube<br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config</p><p>查看node节点<br>kubectl get nodes</p><p>只有网络插件也安装配置完成之后，才能会显示为ready状态<br>设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件<br>如 dashboard, heapster, efk等<br>kubectl taint nodes –all node-role.kubernetes.io/master-</p><h2 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h2><p>下载配置<br>mkdir flannel &amp;&amp; cd flannel<br>wget <a href="https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</a></p><p>修改配置<br>此处的ip配置要与上面kubeadm的pod-network一致<br>  net-conf.json: |<br>​    {<br>​      “Network”: “10.244.0.0/16”,<br>​      “Backend”: {<br>​        “Type”: “vxlan”<br>​      }<br>​    }</p><p>修改镜像<br>image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</p><p>docker registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64</p><p>如果Node有多个网卡的话，参考flannel issues 39701，<br><a href="https://github.com/kubernetes/kubernetes/issues/39701" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/39701</a><br>目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，<br>否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，<br>flanneld启动参数加上–iface=<iface-name><br>​    containers:<br>​      - name: kube-flannel<br>​        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br>​        command:<br>​        - /opt/bin/flanneld<br>​        args:<br>​        - –ip-masq<br>​        - –kube-subnet-mgr<br>​        - –iface=eth1</iface-name></p><p>启动<br>kubectl apply -f kube-flannel.yml</p><p>查看<br>kubectl get pods –namespace kube-system<br>kubectl get svc –namespace kube-system</p><h1 id="如下操作在Node节点操作"><a href="#如下操作在Node节点操作" class="headerlink" title="如下操作在Node节点操作"></a>如下操作在Node节点操作</h1><h2 id="配置node节点加入集群"><a href="#配置node节点加入集群" class="headerlink" title="配置node节点加入集群"></a>配置node节点加入集群</h2><p>此命令为初始化master成功后返回的结果<br>kubeadm join 11.11.11.111:6443 –token ocj4qp.qzshbzjpv095e418 –discovery-token-ca-cert-hash sha256:9ea06d48a41289b538aadb2103bbe794b3d2cb70740e522bd97ac6ef129e11e6</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>kubectl run nginx –replicas=2 –image=nginx:alpine –port=80<br>kubectl expose deployment nginx –type=NodePort –name=example-service-nodeport<br>kubectl expose deployment nginx –name=example-service</p><p>kubectl get deploy<br>kubectl get pods<br>kubectl get svc<br>kubectl describe svc example-service</p><p>kubectl run curl –image=radial/busyboxplus:curl -i –tty<br>nslookup kubernetes<br>nslookup example-service<br>curl example-service</p><p>10.96.100.22 为查看svc时获取到的clusterip<br>curl “10.96.100.22”</p><p>32223 为查看svc时获取到的 nodeport<br><a href="http://11.11.11.112:32058/" target="_blank" rel="noopener">http://11.11.11.112:32058/</a><br><a href="http://11.11.11.113:32058/" target="_blank" rel="noopener">http://11.11.11.113:32058/</a></p><p>清理删除<br>kubectl delete svc example-service example-service-nodeport<br>kubectl delete deploy nginx curl</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="忘记初始master节点时的node节点加入集群命令怎么办"><a href="#忘记初始master节点时的node节点加入集群命令怎么办" class="headerlink" title="忘记初始master节点时的node节点加入集群命令怎么办"></a>忘记初始master节点时的node节点加入集群命令怎么办</h2><p>简单方法<br>kubeadm token create –print-join-command</p><p>第二种方法<br>token=$(kubeadm token generate)<br>kubeadm token create $token –print-join-command –ttl=0</p><h2 id="安装dashboard"><a href="#安装dashboard" class="headerlink" title="安装dashboard"></a>安装dashboard</h2><p>wget <a href="https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</a></p><p> 将Service改成NodePort类型<br>……<br>spec:<br>  type: NodePort<br>  ports:<br>​    - port: 443<br>​      targetPort: 8443<br>  selector:<br>​    k8s-app: kubernetes-dashboard<br>……</p><p>将镜像修改<br> image: registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3<br> docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3<br> docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3 k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3</p><p>$ kubectl create -f kubernetes-dashboard.yaml<br>我们创建一个admin用户并授予admin 角色绑定，使用下面的yaml文件创建admin用户并赋予他管理员权限，然后就可以通过token 登陆dashbaord，这种认证方式本质实际上是通过Service Account 的身份认证加上Bearer token请求 API server 的方式实现，参考 Kubernetes 中的认证。<br>生成token<br><a href="https://blog.qikqiak.com/post/update-kubernetes-dashboard-more-secure/" target="_blank" rel="noopener">https://blog.qikqiak.com/post/update-kubernetes-dashboard-more-secure/</a></p><p>$ cat &gt; admin.yaml&lt;&lt;EOF<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>metadata:<br>  name: admin<br>  annotations:<br>​    rbac.authorization.kubernetes.io/autoupdate: “true”<br>roleRef:<br>  kind: ClusterRole<br>  name: cluster-admin<br>  apiGroup: rbac.authorization.k8s.io<br>subjects:</p><ul><li>kind: ServiceAccount<br>name: admin<br>namespace: kube-system</li></ul><hr><p>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: admin<br>  namespace: kube-system<br>  labels:<br>​    kubernetes.io/cluster-service: “true”<br>​    addonmanager.kubernetes.io/mode: Reconcile<br>EOF</p><p>$ kubectl create -f admin.yaml</p><p>获取token<br>第一种方法<br>$ kubectl get secret -n kube-system|grep admin-token<br>admin-token-gtzqz                                kubernetes.io/service-account-token   3         14s<br>$ kubectl get secret admin-token-d5jsg -o jsonpath={.data.token} -n kube-system |base64 -d<br>会生成一串很长的base64后的字符串</p><p>第二种方法<br>$ kubectl -n kube-system describe secret <code>kubectl -n kube-system get secret|grep admin-token|cut -d &quot; &quot; -f1</code>|grep “token:”|tr -s “ “|cut -d “ “ -f2</p><h2 id="安装所需镜像"><a href="#安装所需镜像" class="headerlink" title="安装所需镜像"></a>安装所需镜像</h2><p>master节点所需镜像<br>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.11.0<br>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.11.0<br>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.11.0<br>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0<br>registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1<br>registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.18<br>registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3</p><p>node节点所需镜像<br>docker pull registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64 &amp;&amp; \<br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0 &amp;&amp; \<br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 &amp;&amp; \<br>docker pull quay.io/coreos/flannel:v0.10.0-arm &amp;&amp; \<br>docker pull quay.io/coreos/flannel:v0.10.0-ppc64le &amp;&amp; \<br>docker pull quay.io/coreos/flannel:v0.10.0-s390x</p><h2 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h2><p>查看kubeadm配置<br>$ kubeadm config view</p><p>/etc/kubernetes/admin.conf<br>/etc/kubernetes/kubelet.conf<br>/etc/kubernetes/controller-manager.conf<br>/etc/kubernetes/scheduler.conf</p><h1 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h1><h2 id="coredns不正常，参考：https-medium-com-joatmon08-playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706"><a href="#coredns不正常，参考：https-medium-com-joatmon08-playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706" class="headerlink" title="coredns不正常，参考：https://medium.com/@joatmon08/playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706"></a>coredns不正常，参考：<a href="https://medium.com/@joatmon08/playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706" target="_blank" rel="noopener">https://medium.com/@joatmon08/playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706</a></h2><p>发现coredns不正常</p><p>$ kubectl get pod –all-namespaces<br>NAMESPACE     NAME                                    READY     STATUS             RESTARTS   AGE<br>blog          mysql-deploy-88dffb7cf-7lsf4            1/1       Running            0          24m<br>blog          wordpress-deploy-66bcc48bdb-5vgmv       0/1       Init:0/1           0          24m<br>default       curl-87b54756-6hxk6                     1/1       Running            0          3h<br>default       nginx-5dbb4c75cd-5rkhg                  1/1       Running            0          4h<br>default       nginx-5dbb4c75cd-mcbdm                  1/1       Running            0          4h<br>kube-system   coredns-777d78ff6f-6l57g                0/1       CrashLoopBackOff   76         6h<br>kube-system   coredns-777d78ff6f-pzjhs                0/1       CrashLoopBackOff   76         6h<br>kube-system   etcd-lab1                               1/1       Running            0          7h<br>kube-system   kube-apiserver-lab1                     1/1       Running            0          7h<br>kube-system   kube-controller-manager-lab1            1/1       Running            0          7h<br>kube-system   kube-flannel-ds-hlmjr                   1/1       Running            0          6h<br>kube-system   kube-flannel-ds-ksk79                   1/1       Running            0          7h<br>kube-system   kube-flannel-ds-nvd8g                   1/1       Running            0          6h<br>kube-system   kube-proxy-glpgs                        1/1       Running            0          7h<br>kube-system   kube-proxy-nnb2n                        1/1       Running            0          7h<br>kube-system   kube-proxy-pfxrn                        1/1       Running            0          6h<br>kube-system   kube-scheduler-lab1                     1/1       Running            0          7h<br>kube-system   kubernetes-dashboard-754f4d5f69-t7mcl   1/1       Running            0          6h<br>查看日志，显示报错<br>$ kubectl logs  coredns-777d78ff6f-6l57g -n kube-system<br>Error from server (NotFound): the server could not find the requested resource ( pods/log coredns-777d78ff6f-6l57g)<br>$ kubectl get nodes lab2 -o yaml<br>apiVersion: v1<br>kind: Node<br>metadata:<br>  annotations:<br>​    flannel.alpha.coreos.com/backend-data: ‘{“VtepMAC”:”fe:28:b1:8d:81:ce”}’<br>​    flannel.alpha.coreos.com/backend-type: vxlan<br>​    flannel.alpha.coreos.com/kube-subnet-manager: “true”<br>​    flannel.alpha.coreos.com/public-ip: 10.0.2.15<br>​    kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock<br>​    node.alpha.kubernetes.io/ttl: “0”<br>​    volumes.kubernetes.io/controller-managed-attach-detach: “true”<br>  creationTimestamp: 2018-07-30T02:24:33Z<br>  labels:<br>​    beta.kubernetes.io/arch: amd64<br>​    beta.kubernetes.io/os: linux<br>​    kubernetes.io/hostname: lab2<br>  name: lab2<br>  resourceVersion: “41316”<br>  selfLink: /api/v1/nodes/lab2<br>  uid: b2481ea3-939f-11e8-93c1-525400ad3b43<br>spec:<br>  podCIDR: 10.244.1.0/24<br>status:<br>  addresses:</p><ul><li>address: 10.0.2.15<br>type: InternalIP</li><li>address: lab2<br>type: Hostname<br>allocatable:<br>cpu: “2”<br>ephemeral-storage: “36190907537”<br>hugepages-2Mi: “0”<br>memory: 1780976Ki<br>pods: “110”<br>capacity:<br>cpu: “2”<br>ephemeral-storage: 39269648Ki<br>hugepages-2Mi: “0”<br>memory: 1883376Ki<br>pods: “110”<br>conditions:</li><li>lastHeartbeatTime: 2018-07-30T09:30:54Z<br>lastTransitionTime: 2018-07-30T09:13:40Z<br>message: kubelet has sufficient disk space available<br>reason: KubeletHasSufficientDisk<br>status: “False”<br>type: OutOfDisk</li><li>lastHeartbeatTime: 2018-07-30T09:30:54Z<br>lastTransitionTime: 2018-07-30T09:13:40Z<br>message: kubelet has sufficient memory available<br>reason: KubeletHasSufficientMemory<br>status: “False”<br>type: MemoryPressure</li><li>lastHeartbeatTime: 2018-07-30T09:30:54Z<br>lastTransitionTime: 2018-07-30T09:13:40Z<br>message: kubelet has no disk pressure<br>reason: KubeletHasNoDiskPressure<br>status: “False”<br>type: DiskPressure</li><li>lastHeartbeatTime: 2018-07-30T09:30:54Z<br>lastTransitionTime: 2018-07-30T02:24:33Z<br>message: kubelet has sufficient PID available<br>reason: KubeletHasSufficientPID<br>status: “False”<br>type: PIDPressure</li><li>lastHeartbeatTime: 2018-07-30T09:30:54Z<br>lastTransitionTime: 2018-07-30T09:13:40Z<br>message: kubelet is posting ready status<br>reason: KubeletReady<br>status: “True”<br>type: Ready<br>daemonEndpoints:<br>kubeletEndpoint:<br>  Port: 10250<br>images:</li><li>names:<ul><li>docker.io/wordpress@sha256:7f8aa332e6c905d1cb6efc6632801e4c6b52d9a91e41a25a1de7668fb6f1a6da</li><li>docker.io/wordpress:latest<br>sizeBytes: 408103498</li></ul></li><li>names:<ul><li>docker.io/mysql@sha256:aaba540cdd9313645d892f4f20573e8b42b30e5be71c054b7befed2f7da5f85b</li><li>docker.io/mysql:5.7<br>sizeBytes: 371941626</li></ul></li><li>names:<ul><li>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64@sha256:4be24eb360668859f75b85829f99e006639683606d0fe077e47f4dea292439cd</li><li>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0<br>sizeBytes: 97772373</li></ul></li><li>names:<ul><li>registry.cn-hangzhou.aliyuncs.com/google_containers/coredns@sha256:d929e48a87979279307111fd28a52272d3fac0ed1dc8f2f53a9489be45e5f2eb</li><li>registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3<br>sizeBytes: 45587362</li></ul></li><li>names:<ul><li>quay.io/coreos/flannel@sha256:88f2b4d96fae34bfff3d46293f7f18d1f9f3ca026b4a4d288f28347fcb6580ac</li><li>quay.io/coreos/flannel:v0.10.0-amd64<br>sizeBytes: 44598861</li></ul></li><li>names:<ul><li>registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel@sha256:25e23320b5965ec8d5063ecf9f5a154372f6c230334dd11d76a0290184e789be</li><li>registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64<br>sizeBytes: 44598861</li></ul></li><li>names:<ul><li>docker.io/nginx@sha256:23e4dacbc60479fa7f23b3b8e18aad41bd8445706d0538b25ba1d575a6e2410b</li><li>docker.io/nginx:alpine<br>sizeBytes: 18638463</li></ul></li><li>names:<ul><li>docker.io/radial/busyboxplus@sha256:a68c05ab1112fd90ad7b14985a48520e9d26dbbe00cb9c09aa79fdc0ef46b372</li><li>docker.io/radial/busyboxplus:curl<br>sizeBytes: 4233788</li></ul></li><li>names:<ul><li>docker.io/busybox@sha256:d21b79794850b4b15d8d332b451d95351d14c951542942a816eea69c9e04b240</li><li>docker.io/busybox:latest<br>sizeBytes: 1162745</li></ul></li><li>names:<ul><li>registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64@sha256:759c3f0f6493093a9043cc813092290af69029699ade0e3dbe024e968fcb7cca</li><li>registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1<br>sizeBytes: 742472<br>nodeInfo:<br>architecture: amd64<br>bootID: 4c547d33-3e71-4ab6-94bc-a9867ae6fb2f<br>containerRuntimeVersion: docker://1.13.1<br>kernelVersion: 3.10.0-693.11.6.el7.x86_64<br>kubeProxyVersion: v1.11.1<br>kubeletVersion: v1.11.1<br>machineID: 37db00ab394b4b99a870185d3a95d0a1<br>operatingSystem: linux<br>osImage: CentOS Linux 7 (Core)<br>systemUUID: 37DB00AB-394B-4B99-A870-185D3A95D0A1</li></ul></li></ul><p>发现节点IP地址不正常<br>…………<br>status:<br>  addresses:</p><ul><li>address: 10.0.2.15<br>type: InternalIP</li><li>address: lab2<br>type: Hostname<br>…………<br>kubectl  get pod –all-namespaces -owide<br>NAMESPACE     NAME                           READY     STATUS             RESTARTS   AGE       IP             NODE<br>kube-system   coredns-777d78ff6f-27tv7       0/1       CrashLoopBackOff   6          9m        <none>         lab3<br>kube-system   coredns-777d78ff6f-b7j8w       0/1       CrashLoopBackOff   7          16m       <none>         lab2<br>kube-system   etcd-lab1                      1/1       Running            0          12m       11.11.11.111   lab1<br>kube-system   kube-apiserver-lab1            1/1       Running            0          12m       11.11.11.111   lab1<br>kube-system   kube-controller-manager-lab1   1/1       Running            0          12m       11.11.11.111   lab1<br>kube-system   kube-flannel-ds-amd64-4jrbk    1/1       Running            3          13m       11.11.11.112   lab2<br>kube-system   kube-flannel-ds-amd64-gvhs6    1/1       Running            0          13m       11.11.11.111   lab1<br>kube-system   kube-flannel-ds-amd64-kcpvr    0/1       CrashLoopBackOff   1          13m       11.11.11.113   lab3<br>kube-system   kube-proxy-4zdnc               1/1       Running            0          16m       11.11.11.111   lab1<br>kube-system   kube-proxy-7d59q               1/1       Running            3          14m       11.11.11.112   lab2<br>kube-system   kube-proxy-8w5gr               0/1       CrashLoopBackOff   1          14m       11.11.11.113   lab3<br>kube-system   kube-scheduler-lab1            1/1       Running            0          12m       11.11.11.111   lab1</none></none></li></ul><p>[root@lab1 vagrant]# kubectl logs  -n kube-system coredns-777d78ff6f-b7j8w<br>standard_init_linux.go:178: exec user process caused “operation not permitted”</p><p>解决方案<br><a href="https://github.com/rancher/rancher/issues/13310" target="_blank" rel="noopener">https://github.com/rancher/rancher/issues/13310</a><br>edit /etc/sysconfig/docker and remove –selinux-enabled from the OPTIONS variable</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;官方地址：&quot;&gt;&lt;a href=&quot;#官方地址：&quot; class=&quot;headerlink&quot; title=&quot;官方地址：&quot;&gt;&lt;/a&gt;官方地址：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/independent/crea
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://amote.xin/categories/kubernetes/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Centos7" scheme="https://amote.xin/tags/Centos7/"/>
    
      <category term="kubernetes" scheme="https://amote.xin/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>centos7搭建docker私有镜像中心</title>
    <link href="https://amote.xin/2018/12/14/centos7%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83/"/>
    <id>https://amote.xin/2018/12/14/centos7搭建docker私有镜像中心/</id>
    <published>2018-12-14T08:39:00.000Z</published>
    <updated>2018-12-14T10:02:03.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Docker-Registry"><a href="#安装Docker-Registry" class="headerlink" title="安装Docker Registry"></a>安装Docker Registry</h1><p>sudo docker run -d -v /home/hzq/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest</p><p>•    -v /home/hzq/registry:/var/lib/registry 默认情况下，会将仓库存放于容器内的/var/lib/registry目录下，指定本地目录挂载到容器。<br>•    -p 5000:5000 端口映射<br>•    –restart=always1 在容器退出时总是重启容器,主要应用在生产环境<br>•    –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误<br>•    –name registry 指定容器的名称<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/1.png"><br>查看版本<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/2.png"></p><h1 id="服务端需要修改的地方"><a href="#服务端需要修改的地方" class="headerlink" title="服务端需要修改的地方"></a>服务端需要修改的地方</h1><p>Docker从1.3.X之后，与docker registry交互默认使用的是https，然而此处搭建的私有仓库只提供http服务，所以当与私有仓库交互时就会报误。为了解决这个问题需要在启动docker server时增加启动参数为默认使用http访问。修改docker启动配置文件</p><p>vi  /usr/lib/systemd/system/docker.service</p><p>找到 ExecStart<br>ExecStart=/usr/bin/dockerd  <font color="#FF0000"> –insecure-registry 192.168.0.153:5000</font><br>红色字体为添加的<br>如下图所示<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/3.png"><br>重启docker<br>systemctl daemon-reload<br>systemctl restart docker</p><h1 id="客户端需要修改的地方"><a href="#客户端需要修改的地方" class="headerlink" title="客户端需要修改的地方"></a>客户端需要修改的地方</h1><p>编辑/etc/docker/daemon.json文件，添加”insecure-registries”:[“xxx.xxx.xxx.xxx:5000”]<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/4.png"><br>重启docker<br>systemctl daemon-reload<br>systemctl restart docker</p><h1 id="登录到私有镜像中心"><a href="#登录到私有镜像中心" class="headerlink" title="登录到私有镜像中心"></a>登录到私有镜像中心</h1><p>docker login xx.xx.xx.xx:5000<br>如图<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/5.png"></p><h1 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h1> <img src="/2018/12/14/centos7搭建docker私有镜像中心/6.png"><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1> <img src="/2018/12/14/centos7搭建docker私有镜像中心/7.png"> <img src="/2018/12/14/centos7搭建docker私有镜像中心/8.png"><h1 id="查看镜像仓库的镜像"><a href="#查看镜像仓库的镜像" class="headerlink" title="查看镜像仓库的镜像"></a>查看镜像仓库的镜像</h1><p>curl -XGET <a href="http://xx.xx.xx.xx:5000/v2/_catalog" target="_blank" rel="noopener">http://xx.xx.xx.xx:5000/v2/_catalog</a><br>如下图所示<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/9.png"></p><h1 id="获取镜像仓库某个镜像的标签列表"><a href="#获取镜像仓库某个镜像的标签列表" class="headerlink" title="获取镜像仓库某个镜像的标签列表"></a>获取镜像仓库某个镜像的标签列表</h1><p>curl –XGET <a href="http://xx.xx.xx.xx:5000/v2/yyyy/tags/list" target="_blank" rel="noopener">http://xx.xx.xx.xx:5000/v2/yyyy/tags/list</a></p><font color="#FF0000">注：yyyy是镜像名称</font><br>如图所示<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/10.png"><br><br># 删除镜像<br>Docker仓库在2.1版本中支持了删除镜像的API，但这个删除操作只会删除镜像元数据，不会删除层数据。在2.4版本中对这一问题进行了解决，增加了一个垃圾回收命令，删除未被引用的层数据。<br><br>启动容器，此时不挂载config文件<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/11.png"><br><br>进去容器，并查看/etc/docker/registry/config.yml文件，并复制文件内容<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/12.png"><br><br>在宿主机，/home目录下新建config.yml文件，并将上一步复制的内容copy进去，而且添加允许删除<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/13.png"><br><br>停止之前启动的Registry，并删除，重新启动Registry，此时挂载config.yml文件，再次进入容器，可看到已添加delete=true<br>sudo docker run -d -v /home/hzq/registry:/var/lib/registry –v /home/config.yml:/etc/docker/registry/config.yml -p 5000:5000 –restart=always –privileged=true –name registry registry:latest<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/14.png"><br><br><br>获取要删除指定镜像指定标签的Digest sha256<br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v1<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/15.png"><br><br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v2<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/16.png"><br><br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v3<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/17.png"><br>app-auto-medical镜像下的tag=v1、tag=v2的digest sha256值相同，与v3的digest sha256值不同<br><br>删除指定标签指定镜像(<font color="#FF0000">仅是逻辑删除！如果同一个镜像下的多个tag的digest sha256值一样，则会一起被删除</font>)<br>删除之前可看到该镜像下有三个tag<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/18.png"><br>也可以在浏览器直接查看<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/19.png"><br>执行删除命令<br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X DELETE <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae</a><br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/20.png"><br><br><br>删除后查看该镜像下边的tag情况<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/21.png"><br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/22.png"><br><br><font color="#FF0000">因为此镜像的tag v1和v2的digest sha256值相同，所以删除的时候就会被一起删除，但此时都只是逻辑删除，对应的文件资源并没有在磁盘上删除！</font><p>垃圾回收<br>垃圾回收前，查看Registry镜像资源数据大小，因为镜像资源所在目录已经被挂载到宿主机/home/hzq/registry目录，所以查看宿主机此目录的大小<br>du -sch /home/hzq/registry<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/23.png"><br>进入镜像仓库容器，进行垃圾回收(<font color="#FF0000">2.4版本以上的registry才有此功能</font>)<br>docker exec -it d78b4c6f2f81  /bin/registry garbage-collect  /etc/docker/registry/config.yml<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/24.png"><br>再次查看Registry镜像资源数据大小<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/25.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Docker-Registry&quot;&gt;&lt;a href=&quot;#安装Docker-Registry&quot; class=&quot;headerlink&quot; title=&quot;安装Docker Registry&quot;&gt;&lt;/a&gt;安装Docker Registry&lt;/h1&gt;&lt;p&gt;sudo docke
      
    
    </summary>
    
      <category term="Docker" scheme="https://amote.xin/categories/Docker/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Register" scheme="https://amote.xin/tags/Register/"/>
    
      <category term="Centos7" scheme="https://amote.xin/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>Devops搭建手冊</title>
    <link href="https://amote.xin/2018/12/13/Devops%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8A/"/>
    <id>https://amote.xin/2018/12/13/Devops搭建手冊/</id>
    <published>2018-12-13T09:35:06.000Z</published>
    <updated>2018-12-14T03:18:06.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h1><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><pre><code>dpkg --force-depends -i gitlab-ce_10.3.3-ce.0_amd64.deb</code></pre><h2 id="备份-etc-gitlab-gitlab-rb文件"><a href="#备份-etc-gitlab-gitlab-rb文件" class="headerlink" title="备份/etc/gitlab/gitlab.rb文件"></a>备份/etc/gitlab/gitlab.rb文件</h2><pre><code>cp gitlab.rb gitlab.rb.bak</code></pre><h2 id="修改-etc-gitlab-gitlab-rb文件"><a href="#修改-etc-gitlab-gitlab-rb文件" class="headerlink" title="修改/etc/gitlab/gitlab.rb文件"></a>修改/etc/gitlab/gitlab.rb文件</h2><pre><code>external_url &quot;http://gitlab.example.com&quot; 为 external_url &quot;http://ip地址&quot;</code></pre><h2 id="使修改生效"><a href="#使修改生效" class="headerlink" title="使修改生效"></a>使修改生效</h2><pre><code>sudo gitlab-ctl reconfigure</code></pre><h2 id="默认root账号，需添加密码"><a href="#默认root账号，需添加密码" class="headerlink" title="默认root账号，需添加密码"></a>默认root账号，需添加密码</h2><h2 id="访问url"><a href="#访问url" class="headerlink" title="访问url"></a>访问url</h2><pre><code>ip:端口号(默认80)</code></pre><h1 id="Nexus安装"><a href="#Nexus安装" class="headerlink" title="Nexus安装"></a>Nexus安装</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>cd /usr/local<br>mkdir nexus</p><h2 id="下载Nexus安装包，并解压文件"><a href="#下载Nexus安装包，并解压文件" class="headerlink" title="下载Nexus安装包，并解压文件"></a>下载Nexus安装包，并解压文件</h2><p>wget <a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gz" target="_blank" rel="noopener">https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gz</a><br>tar -xzvf nexus-2.14.8-01-bundle.tar.gz -C nexus</p><h2 id="添加root用户"><a href="#添加root用户" class="headerlink" title="添加root用户"></a>添加root用户</h2><p>vi /usr/local/nexus/nexus-2.14.8-01/bin/nexus<br>添加 RUN_AS_USER=root<br>保存以上修改。<br>备注：修改前请先备份原始文件</p><h2 id="启动Nexus"><a href="#启动Nexus" class="headerlink" title="启动Nexus"></a>启动Nexus</h2><p>/usr/local/nexus/ nexus-2.14.8-01/bin/nexus start</p><h2 id="访问Nexus"><a href="#访问Nexus" class="headerlink" title="访问Nexus"></a>访问Nexus</h2><p>ip:端口号(默认8081)/nexus</p><h2 id="默认Nexus账号密码"><a href="#默认Nexus账号密码" class="headerlink" title="默认Nexus账号密码"></a>默认Nexus账号密码</h2><p>admin admin123</p><p>注意：下载Nexus安装包的过程可以在本机操作，然后把安装包通过FTP上传到服务器上。<br>存储所在路径：压缩包解压后，文件夹内nexus-2.14.8-01-bundle/sonatype-work/，这个路径就是，具体存储路径可以在nexus-2.14.8-01/conf/ nexus.properties文件里进行修改。<br>参考：<a href="https://www.linuxidc.com/Linux/2016-08/134617.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-08/134617.htm</a></p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="FTP上传Docker的deb安装文件"><a href="#FTP上传Docker的deb安装文件" class="headerlink" title="FTP上传Docker的deb安装文件"></a>FTP上传Docker的deb安装文件</h2><p>比如上传到此目录下：/tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb</p><h2 id="更新库，安装依赖"><a href="#更新库，安装依赖" class="headerlink" title="更新库，安装依赖"></a>更新库，安装依赖</h2><p>apt-get update<br>apt-get install -y apt-utils iptables libdevmapper1.02.1 libltdl7 libseccomp2</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>dpkg -i /tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb</p><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><p>docker –version<br>如下图，显示docker版本号则安装成功<br><img src="/2018/12/13/Devops搭建手冊/1.png"></p><h1 id="Kubectl安装"><a href="#Kubectl安装" class="headerlink" title="Kubectl安装"></a>Kubectl安装</h1><h2 id="下载kubectl安装包"><a href="#下载kubectl安装包" class="headerlink" title="下载kubectl安装包"></a>下载kubectl安装包</h2><p>wget <a href="https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz</a></p><h2 id="解压kubectl安装包"><a href="#解压kubectl安装包" class="headerlink" title="解压kubectl安装包"></a>解压kubectl安装包</h2><p>tar -zxvf kubernetes-client-linux-amd64.tar.gz</p><h2 id="进入到kubernetes-client-bin目录，并给kubectl文件赋权限"><a href="#进入到kubernetes-client-bin目录，并给kubectl文件赋权限" class="headerlink" title="进入到kubernetes/client/bin目录，并给kubectl文件赋权限"></a>进入到kubernetes/client/bin目录，并给kubectl文件赋权限</h2><p>cd kubernetes/client/bin<br>chmod +x ./kubectl</p><h2 id="移动kubectl文件到-usr-local-bin-目录下"><a href="#移动kubectl文件到-usr-local-bin-目录下" class="headerlink" title="移动kubectl文件到/usr/local/bin/目录下"></a>移动kubectl文件到/usr/local/bin/目录下</h2><p>sudo mv ./kubectl /usr/local/bin/kubectl<br>sudo chmod +x /usr/local/bin/kubectl</p><h2 id="创建-kube文件夹"><a href="#创建-kube文件夹" class="headerlink" title="创建.kube文件夹"></a>创建.kube文件夹</h2><p>mkdir ~/.kube</p><h2 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建config文件</h2><p>touch ~/.kube/config</p><h2 id="K8S的配置信息"><a href="#K8S的配置信息" class="headerlink" title="K8S的配置信息"></a>K8S的配置信息</h2><h3 id="通过token添加配置信息"><a href="#通过token添加配置信息" class="headerlink" title="通过token添加配置信息"></a>通过token添加配置信息</h3><p>首先：web登录到ICP<br> <img src="/2018/12/13/Devops搭建手冊/2.png"><br>其次：复制token信息<br> <img src="/2018/12/13/Devops搭建手冊/3.png"><br>最后：在服务器命令行执行token信息里的命令，执行完之后步骤6里的config文件里会保存有k8s的相关配置信息，但是token是有实效期的。</p><h3 id="通过证书添加配置信息"><a href="#通过证书添加配置信息" class="headerlink" title="通过证书添加配置信息"></a>通过证书添加配置信息</h3><p>首先：向ICP管理员要三个证书，三个证书在ICP的master节点上的路径为/etc/cfc/conf/，三个证书为：ca.crt，kubecfg.crt，kubecfg.key，将三个证书存放到/etc/kubernetes/conf/目录下，如果没有请创建该目录<br>其次：执行kubectl命令，修改config文件。<br>kubectl config set-cluster mycluster.icp  –server=<a href="https://10.8.154.198:8001" target="_blank" rel="noopener">https://10.8.154.198:8001</a>  –certificate-authority=/etc/kubernetes/conf/ca.crt \<br>&amp;&amp; kubectl config set-credentials admin –client-certificate=/etc/kubernetes/conf/kubecfg.crt –client-key=/etc/kubernetes/conf/kubecfg.key \<br>&amp;&amp; kubectl config set-context icp –cluster=mycluster.icp –user=admin \<br>&amp;&amp; kubectl config use-context icp \<br>&amp;&amp; kubectl config view</p><p>下载地址：<br><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md</a><br>​                    参考：<br>​                        <a href="http://blog.csdn.net/farYang/article/details/79427573" target="_blank" rel="noopener">http://blog.csdn.net/farYang/article/details/79427573</a><br>​                        <a href="http://blog.csdn.net/weiguang1017/article/details/69972015" target="_blank" rel="noopener">http://blog.csdn.net/weiguang1017/article/details/69972015</a><br>​                    注意：<br>1.压缩包里只有一个kubectl文件，1,、2、3、4步已经安装好kubectl了，只是不能与k8s通讯。<br>2.证书配置是针对管理员的，普通用户用token<br>3.修改host文件.如：10.8.154.198  mycluster.icp</p><ol start="4"><li>7步骤b)中的–server= <a href="https://10.8.154.198:8001要进行修改" target="_blank" rel="noopener">https://10.8.154.198:8001要进行修改</a></li></ol><h1 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h1><h2 id="向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示："><a href="#向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示：" class="headerlink" title="向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示："></a>向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示：</h2> <img src="/2018/12/13/Devops搭建手冊/4.png"><p>将master的上个证书存放到：/etc/kubernetes/conf/<br>将私有镜像中心的证书存放到：/etc/docker/certs.d/mycluster.icp:8500/</p><p>注意：证书原始路径，在ICP的master节点上<br>​    Master证书路径：/etc/cfc/conf/ca.crt<br>/etc/cfc/conf/kubecfg.crt<br>/etc/cfc/conf/kubecfg.key<br>​            私有镜像中心证书路径：/etc/docker/certs.d/mycluster.icp\:8500/ca.crt</p><h2 id="向ICP管理员询问cluster-vip、cluster-CA-domain、proxy-vip、storageClassName的值"><a href="#向ICP管理员询问cluster-vip、cluster-CA-domain、proxy-vip、storageClassName的值" class="headerlink" title="向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值"></a>向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值</h2><p>cluster_vip：页面访问ICP的IP地址<br>​    cluster_CA_domain：私有镜像中心域名<br>​    proxy_vip：代理的vip，用于应用的映射<br>​    storageClassName：PVC的时候使用</p><h2 id="修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示"><a href="#修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示" class="headerlink" title="修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示"></a>修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示</h2> <img src="/2018/12/13/Devops搭建手冊/5.png"><h2 id="在k8s集群内新建devops命名空间"><a href="#在k8s集群内新建devops命名空间" class="headerlink" title="在k8s集群内新建devops命名空间"></a>在k8s集群内新建devops命名空间</h2><p>命令：kubectl create ns devops<br>ICP页面创建：<br> <img src="/2018/12/13/Devops搭建手冊/6.png"></p><h2 id="根据应用的场景创建java-slave-nodejs-slave等jenkins的slave镜像"><a href="#根据应用的场景创建java-slave-nodejs-slave等jenkins的slave镜像" class="headerlink" title="根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像"></a>根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像</h2><h2 id="从docker-hub上下载openjdk、nginx、jenkins等镜像"><a href="#从docker-hub上下载openjdk、nginx、jenkins等镜像" class="headerlink" title="从docker-hub上下载openjdk、nginx、jenkins等镜像"></a>从docker-hub上下载openjdk、nginx、jenkins等镜像</h2><h2 id="上传5、6步骤里的镜像到ICP的私有镜像中心"><a href="#上传5、6步骤里的镜像到ICP的私有镜像中心" class="headerlink" title="上传5、6步骤里的镜像到ICP的私有镜像中心"></a>上传5、6步骤里的镜像到ICP的私有镜像中心</h2><p>如何上传，请参考ICP官方文档：<br><a href="https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html</a></p><h2 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h2><p>kubectl create secret docker-registry myregistrykey –docker-server=mycluster.icp:8500 –docker-username=admin –docker-password=admin <a href="mailto:--docker-email=shuaichao_gao@trtjk.com" target="_blank" rel="noopener">--docker-email=shuaichao_gao@trtjk.com</a> -n=devops<br>在jenkins的yaml里添加对该secret的引用</p><h2 id="执行jenkins、pvc等yaml文件"><a href="#执行jenkins、pvc等yaml文件" class="headerlink" title="执行jenkins、pvc等yaml文件"></a>执行jenkins、pvc等yaml文件</h2><p>kubectl apply -f jenkins-master-sts-dev-test.yaml<br>kubectl apply -f jenkins-slave-glusterfs-pvc.yaml</p><h2 id="查看jenkins的状态"><a href="#查看jenkins的状态" class="headerlink" title="查看jenkins的状态"></a>查看jenkins的状态</h2><p>#查看pod状态<br>kubectl get pods -n=devops</p><p>#查看pod详细描述信息<br>kubectl describe pods -n=devops</p><p>#查看应用的日志<br>kubectl logs -f pods -n=devops</p><h2 id="浏览器访问jenkins，按需安装必要插件"><a href="#浏览器访问jenkins，按需安装必要插件" class="headerlink" title="浏览器访问jenkins，按需安装必要插件"></a>浏览器访问jenkins，按需安装必要插件</h2><h2 id="在gitlab服务器修改hosts文件，添加jenkins应用的映射"><a href="#在gitlab服务器修改hosts文件，添加jenkins应用的映射" class="headerlink" title="在gitlab服务器修改hosts文件，添加jenkins应用的映射"></a>在gitlab服务器修改hosts文件，添加jenkins应用的映射</h2> <img src="/2018/12/13/Devops搭建手冊/7.png"><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。"><a href="#Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。" class="headerlink" title="Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。"></a>Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。</h2><h2 id="各个软件的安装包和文件已打包"><a href="#各个软件的安装包和文件已打包" class="headerlink" title="各个软件的安装包和文件已打包"></a>各个软件的安装包和文件已打包</h2><h2 id="证书与ICP环境是对应的，不同的ICP环境证书是不一样的。"><a href="#证书与ICP环境是对应的，不同的ICP环境证书是不一样的。" class="headerlink" title="证书与ICP环境是对应的，不同的ICP环境证书是不一样的。"></a>证书与ICP环境是对应的，不同的ICP环境证书是不一样的。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gitlab安装&quot;&gt;&lt;a href=&quot;#Gitlab安装&quot; class=&quot;headerlink&quot; title=&quot;Gitlab安装&quot;&gt;&lt;/a&gt;Gitlab安装&lt;/h1&gt;&lt;h2 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Devops" scheme="https://amote.xin/categories/Devops/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
  </entry>
  
</feed>
