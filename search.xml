<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[centos7搭建docker私有镜像中心]]></title>
    <url>%2F2018%2F12%2F14%2Fcentos7%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%2F</url>
    <content type="text"><![CDATA[安装Docker Registrysudo docker run -d -v /home/hzq/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest • -v /home/hzq/registry:/var/lib/registry 默认情况下，会将仓库存放于容器内的/var/lib/registry目录下，指定本地目录挂载到容器。• -p 5000:5000 端口映射• –restart=always1 在容器退出时总是重启容器,主要应用在生产环境• –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误• –name registry 指定容器的名称 查看版本 服务端需要修改的地方Docker从1.3.X之后，与docker registry交互默认使用的是https，然而此处搭建的私有仓库只提供http服务，所以当与私有仓库交互时就会报误。为了解决这个问题需要在启动docker server时增加启动参数为默认使用http访问。修改docker启动配置文件 vi /usr/lib/systemd/system/docker.service 找到 ExecStartExecStart=/usr/bin/dockerd –insecure-registry 192.168.0.153:5000红色字体为添加的如下图所示 重启dockersystemctl daemon-reloadsystemctl restart docker 客户端需要修改的地方编辑/etc/docker/daemon.json文件，添加”insecure-registries”:[“xxx.xxx.xxx.xxx:5000”] 重启dockersystemctl daemon-reloadsystemctl restart docker 登录到私有镜像中心docker login xx.xx.xx.xx:5000如图 上传镜像 拉取镜像 查看镜像仓库的镜像curl -XGET http://xx.xx.xx.xx:5000/v2/_catalog如下图所示 获取镜像仓库某个镜像的标签列表curl –XGET http://xx.xx.xx.xx:5000/v2/yyyy/tags/list 注：yyyy是镜像名称如图所示# 删除镜像Docker仓库在2.1版本中支持了删除镜像的API，但这个删除操作只会删除镜像元数据，不会删除层数据。在2.4版本中对这一问题进行了解决，增加了一个垃圾回收命令，删除未被引用的层数据。启动容器，此时不挂载config文件 进去容器，并查看/etc/docker/registry/config.yml文件，并复制文件内容 在宿主机，/home目录下新建config.yml文件，并将上一步复制的内容copy进去，而且添加允许删除停止之前启动的Registry，并删除，重新启动Registry，此时挂载config.yml文件，再次进入容器，可看到已添加delete=truesudo docker run -d -v /home/hzq/registry:/var/lib/registry –v /home/config.yml:/etc/docker/registry/config.yml -p 5000:5000 –restart=always –privileged=true –name registry registry:latest获取要删除指定镜像指定标签的Digest sha256curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1 2&gt;&amp;1 | grep Docker-Content-Digesttag=v1 curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2 2&gt;&amp;1 | grep Docker-Content-Digesttag=v2 curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3 2&gt;&amp;1 | grep Docker-Content-Digesttag=v3 app-auto-medical镜像下的tag=v1、tag=v2的digest sha256值相同，与v3的digest sha256值不同删除指定标签指定镜像(仅是逻辑删除！如果同一个镜像下的多个tag的digest sha256值一样，则会一起被删除)删除之前可看到该镜像下有三个tag 也可以在浏览器直接查看 执行删除命令curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X DELETE http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae 删除后查看该镜像下边的tag情况 因为此镜像的tag v1和v2的digest sha256值相同，所以删除的时候就会被一起删除，但此时都只是逻辑删除，对应的文件资源并没有在磁盘上删除！ 垃圾回收垃圾回收前，查看Registry镜像资源数据大小，因为镜像资源所在目录已经被挂载到宿主机/home/hzq/registry目录，所以查看宿主机此目录的大小du -sch /home/hzq/registry 进入镜像仓库容器，进行垃圾回收(2.4版本以上的registry才有此功能)docker exec -it d78b4c6f2f81 /bin/registry garbage-collect /etc/docker/registry/config.yml 再次查看Registry镜像资源数据大小]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>Register</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Devops搭建手冊]]></title>
    <url>%2F2018%2F12%2F13%2FDevops%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8A%2F</url>
    <content type="text"><![CDATA[Gitlab安装安装命令dpkg --force-depends -i gitlab-ce_10.3.3-ce.0_amd64.deb 备份/etc/gitlab/gitlab.rb文件cp gitlab.rb gitlab.rb.bak 修改/etc/gitlab/gitlab.rb文件external_url &quot;http://gitlab.example.com&quot; 为 external_url &quot;http://ip地址&quot; 使修改生效sudo gitlab-ctl reconfigure 默认root账号，需添加密码访问urlip:端口号(默认80) Nexus安装创建文件夹cd /usr/localmkdir nexus 下载Nexus安装包，并解压文件wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gztar -xzvf nexus-2.14.8-01-bundle.tar.gz -C nexus 添加root用户vi /usr/local/nexus/nexus-2.14.8-01/bin/nexus添加 RUN_AS_USER=root保存以上修改。备注：修改前请先备份原始文件 启动Nexus/usr/local/nexus/ nexus-2.14.8-01/bin/nexus start 访问Nexusip:端口号(默认8081)/nexus 默认Nexus账号密码admin admin123 注意：下载Nexus安装包的过程可以在本机操作，然后把安装包通过FTP上传到服务器上。存储所在路径：压缩包解压后，文件夹内nexus-2.14.8-01-bundle/sonatype-work/，这个路径就是，具体存储路径可以在nexus-2.14.8-01/conf/ nexus.properties文件里进行修改。参考：https://www.linuxidc.com/Linux/2016-08/134617.htm Docker安装FTP上传Docker的deb安装文件比如上传到此目录下：/tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb 更新库，安装依赖apt-get updateapt-get install -y apt-utils iptables libdevmapper1.02.1 libltdl7 libseccomp2 安装Dockerdpkg -i /tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb 验证安装是否成功docker –version如下图，显示docker版本号则安装成功 Kubectl安装下载kubectl安装包wget https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz 解压kubectl安装包tar -zxvf kubernetes-client-linux-amd64.tar.gz 进入到kubernetes/client/bin目录，并给kubectl文件赋权限cd kubernetes/client/binchmod +x ./kubectl 移动kubectl文件到/usr/local/bin/目录下sudo mv ./kubectl /usr/local/bin/kubectlsudo chmod +x /usr/local/bin/kubectl 创建.kube文件夹mkdir ~/.kube 创建config文件touch ~/.kube/config K8S的配置信息通过token添加配置信息首先：web登录到ICP 其次：复制token信息 最后：在服务器命令行执行token信息里的命令，执行完之后步骤6里的config文件里会保存有k8s的相关配置信息，但是token是有实效期的。 通过证书添加配置信息首先：向ICP管理员要三个证书，三个证书在ICP的master节点上的路径为/etc/cfc/conf/，三个证书为：ca.crt，kubecfg.crt，kubecfg.key，将三个证书存放到/etc/kubernetes/conf/目录下，如果没有请创建该目录其次：执行kubectl命令，修改config文件。kubectl config set-cluster mycluster.icp –server=https://10.8.154.198:8001 –certificate-authority=/etc/kubernetes/conf/ca.crt \&amp;&amp; kubectl config set-credentials admin –client-certificate=/etc/kubernetes/conf/kubecfg.crt –client-key=/etc/kubernetes/conf/kubecfg.key \&amp;&amp; kubectl config set-context icp –cluster=mycluster.icp –user=admin \&amp;&amp; kubectl config use-context icp \&amp;&amp; kubectl config view 下载地址：https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md​ 参考：​ http://blog.csdn.net/farYang/article/details/79427573​ http://blog.csdn.net/weiguang1017/article/details/69972015​ 注意：1.压缩包里只有一个kubectl文件，1,、2、3、4步已经安装好kubectl了，只是不能与k8s通讯。2.证书配置是针对管理员的，普通用户用token3.修改host文件.如：10.8.154.198 mycluster.icp 7步骤b)中的–server= https://10.8.154.198:8001要进行修改 Jenkins安装向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示： 将master的上个证书存放到：/etc/kubernetes/conf/将私有镜像中心的证书存放到：/etc/docker/certs.d/mycluster.icp:8500/ 注意：证书原始路径，在ICP的master节点上​ Master证书路径：/etc/cfc/conf/ca.crt/etc/cfc/conf/kubecfg.crt/etc/cfc/conf/kubecfg.key​ 私有镜像中心证书路径：/etc/docker/certs.d/mycluster.icp\:8500/ca.crt 向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值cluster_vip：页面访问ICP的IP地址​ cluster_CA_domain：私有镜像中心域名​ proxy_vip：代理的vip，用于应用的映射​ storageClassName：PVC的时候使用 修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示 在k8s集群内新建devops命名空间命令：kubectl create ns devopsICP页面创建： 根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像从docker-hub上下载openjdk、nginx、jenkins等镜像上传5、6步骤里的镜像到ICP的私有镜像中心如何上传，请参考ICP官方文档：https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html 创建secretkubectl create secret docker-registry myregistrykey –docker-server=mycluster.icp:8500 –docker-username=admin –docker-password=admin --docker-email=shuaichao_gao@trtjk.com -n=devops在jenkins的yaml里添加对该secret的引用 执行jenkins、pvc等yaml文件kubectl apply -f jenkins-master-sts-dev-test.yamlkubectl apply -f jenkins-slave-glusterfs-pvc.yaml 查看jenkins的状态#查看pod状态kubectl get pods -n=devops #查看pod详细描述信息kubectl describe pods -n=devops #查看应用的日志kubectl logs -f pods -n=devops 浏览器访问jenkins，按需安装必要插件在gitlab服务器修改hosts文件，添加jenkins应用的映射 注意Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。各个软件的安装包和文件已打包证书与ICP环境是对应的，不同的ICP环境证书是不一样的。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尘归尘，土归土]]></title>
    <url>%2F2018%2F12%2F13%2F%E5%B0%98%E5%BD%92%E5%B0%98%EF%BC%8C%E5%9C%9F%E5%BD%92%E5%9C%9F%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
