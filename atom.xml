<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amote</title>
  <icon>https://www.gravatar.com/avatar/2d43ac97653017ba500ce506cb7c8500</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amote.xin/"/>
  <updated>2018-12-14T10:02:03.273Z</updated>
  <id>https://amote.xin/</id>
  
  <author>
    <name>如是我闻</name>
    <email>shuaichaogao@gamil.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7搭建docker私有镜像中心</title>
    <link href="https://amote.xin/2018/12/14/centos7%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83/"/>
    <id>https://amote.xin/2018/12/14/centos7搭建docker私有镜像中心/</id>
    <published>2018-12-14T08:39:00.000Z</published>
    <updated>2018-12-14T10:02:03.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Docker-Registry"><a href="#安装Docker-Registry" class="headerlink" title="安装Docker Registry"></a>安装Docker Registry</h1><p>sudo docker run -d -v /home/hzq/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest</p><p>•    -v /home/hzq/registry:/var/lib/registry 默认情况下，会将仓库存放于容器内的/var/lib/registry目录下，指定本地目录挂载到容器。<br>•    -p 5000:5000 端口映射<br>•    –restart=always1 在容器退出时总是重启容器,主要应用在生产环境<br>•    –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误<br>•    –name registry 指定容器的名称<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/1.png"><br>查看版本<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/2.png"></p><h1 id="服务端需要修改的地方"><a href="#服务端需要修改的地方" class="headerlink" title="服务端需要修改的地方"></a>服务端需要修改的地方</h1><p>Docker从1.3.X之后，与docker registry交互默认使用的是https，然而此处搭建的私有仓库只提供http服务，所以当与私有仓库交互时就会报误。为了解决这个问题需要在启动docker server时增加启动参数为默认使用http访问。修改docker启动配置文件</p><p>vi  /usr/lib/systemd/system/docker.service</p><p>找到 ExecStart<br>ExecStart=/usr/bin/dockerd  <font color="#FF0000"> –insecure-registry 192.168.0.153:5000</font><br>红色字体为添加的<br>如下图所示<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/3.png"><br>重启docker<br>systemctl daemon-reload<br>systemctl restart docker</p><h1 id="客户端需要修改的地方"><a href="#客户端需要修改的地方" class="headerlink" title="客户端需要修改的地方"></a>客户端需要修改的地方</h1><p>编辑/etc/docker/daemon.json文件，添加”insecure-registries”:[“xxx.xxx.xxx.xxx:5000”]<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/4.png"><br>重启docker<br>systemctl daemon-reload<br>systemctl restart docker</p><h1 id="登录到私有镜像中心"><a href="#登录到私有镜像中心" class="headerlink" title="登录到私有镜像中心"></a>登录到私有镜像中心</h1><p>docker login xx.xx.xx.xx:5000<br>如图<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/5.png"></p><h1 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h1> <img src="/2018/12/14/centos7搭建docker私有镜像中心/6.png"><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1> <img src="/2018/12/14/centos7搭建docker私有镜像中心/7.png"> <img src="/2018/12/14/centos7搭建docker私有镜像中心/8.png"><h1 id="查看镜像仓库的镜像"><a href="#查看镜像仓库的镜像" class="headerlink" title="查看镜像仓库的镜像"></a>查看镜像仓库的镜像</h1><p>curl -XGET <a href="http://xx.xx.xx.xx:5000/v2/_catalog" target="_blank" rel="noopener">http://xx.xx.xx.xx:5000/v2/_catalog</a><br>如下图所示<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/9.png"></p><h1 id="获取镜像仓库某个镜像的标签列表"><a href="#获取镜像仓库某个镜像的标签列表" class="headerlink" title="获取镜像仓库某个镜像的标签列表"></a>获取镜像仓库某个镜像的标签列表</h1><p>curl –XGET <a href="http://xx.xx.xx.xx:5000/v2/yyyy/tags/list" target="_blank" rel="noopener">http://xx.xx.xx.xx:5000/v2/yyyy/tags/list</a></p><font color="#FF0000">注：yyyy是镜像名称</font><br>如图所示<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/10.png"><br><br># 删除镜像<br>Docker仓库在2.1版本中支持了删除镜像的API，但这个删除操作只会删除镜像元数据，不会删除层数据。在2.4版本中对这一问题进行了解决，增加了一个垃圾回收命令，删除未被引用的层数据。<br><br>启动容器，此时不挂载config文件<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/11.png"><br><br>进去容器，并查看/etc/docker/registry/config.yml文件，并复制文件内容<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/12.png"><br><br>在宿主机，/home目录下新建config.yml文件，并将上一步复制的内容copy进去，而且添加允许删除<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/13.png"><br><br>停止之前启动的Registry，并删除，重新启动Registry，此时挂载config.yml文件，再次进入容器，可看到已添加delete=true<br>sudo docker run -d -v /home/hzq/registry:/var/lib/registry –v /home/config.yml:/etc/docker/registry/config.yml -p 5000:5000 –restart=always –privileged=true –name registry registry:latest<br><img src="/2018/12/14/centos7搭建docker私有镜像中心/14.png"><br><br><br>获取要删除指定镜像指定标签的Digest sha256<br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v1<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/15.png"><br><br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v2<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/16.png"><br><br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET  <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3</a> 2&gt;&amp;1 | grep Docker-Content-Digest<br><br>tag=v3<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/17.png"><br>app-auto-medical镜像下的tag=v1、tag=v2的digest sha256值相同，与v3的digest sha256值不同<br><br>删除指定标签指定镜像(<font color="#FF0000">仅是逻辑删除！如果同一个镜像下的多个tag的digest sha256值一样，则会一起被删除</font>)<br>删除之前可看到该镜像下有三个tag<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/18.png"><br>也可以在浏览器直接查看<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/19.png"><br>执行删除命令<br>curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X DELETE <a href="http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae" target="_blank" rel="noopener">http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae</a><br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/20.png"><br><br><br>删除后查看该镜像下边的tag情况<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/21.png"><br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/22.png"><br><br><font color="#FF0000">因为此镜像的tag v1和v2的digest sha256值相同，所以删除的时候就会被一起删除，但此时都只是逻辑删除，对应的文件资源并没有在磁盘上删除！</font><p>垃圾回收<br>垃圾回收前，查看Registry镜像资源数据大小，因为镜像资源所在目录已经被挂载到宿主机/home/hzq/registry目录，所以查看宿主机此目录的大小<br>du -sch /home/hzq/registry<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/23.png"><br>进入镜像仓库容器，进行垃圾回收(<font color="#FF0000">2.4版本以上的registry才有此功能</font>)<br>docker exec -it d78b4c6f2f81  /bin/registry garbage-collect  /etc/docker/registry/config.yml<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/24.png"><br>再次查看Registry镜像资源数据大小<br> <img src="/2018/12/14/centos7搭建docker私有镜像中心/25.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Docker-Registry&quot;&gt;&lt;a href=&quot;#安装Docker-Registry&quot; class=&quot;headerlink&quot; title=&quot;安装Docker Registry&quot;&gt;&lt;/a&gt;安装Docker Registry&lt;/h1&gt;&lt;p&gt;sudo docke
      
    
    </summary>
    
      <category term="Docker" scheme="https://amote.xin/categories/Docker/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
      <category term="Docker" scheme="https://amote.xin/tags/Docker/"/>
    
      <category term="Register" scheme="https://amote.xin/tags/Register/"/>
    
      <category term="Centos7" scheme="https://amote.xin/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>Devops搭建手冊</title>
    <link href="https://amote.xin/2018/12/13/Devops%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8A/"/>
    <id>https://amote.xin/2018/12/13/Devops搭建手冊/</id>
    <published>2018-12-13T09:35:06.000Z</published>
    <updated>2018-12-14T03:18:06.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h1><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><pre><code>dpkg --force-depends -i gitlab-ce_10.3.3-ce.0_amd64.deb</code></pre><h2 id="备份-etc-gitlab-gitlab-rb文件"><a href="#备份-etc-gitlab-gitlab-rb文件" class="headerlink" title="备份/etc/gitlab/gitlab.rb文件"></a>备份/etc/gitlab/gitlab.rb文件</h2><pre><code>cp gitlab.rb gitlab.rb.bak</code></pre><h2 id="修改-etc-gitlab-gitlab-rb文件"><a href="#修改-etc-gitlab-gitlab-rb文件" class="headerlink" title="修改/etc/gitlab/gitlab.rb文件"></a>修改/etc/gitlab/gitlab.rb文件</h2><pre><code>external_url &quot;http://gitlab.example.com&quot; 为 external_url &quot;http://ip地址&quot;</code></pre><h2 id="使修改生效"><a href="#使修改生效" class="headerlink" title="使修改生效"></a>使修改生效</h2><pre><code>sudo gitlab-ctl reconfigure</code></pre><h2 id="默认root账号，需添加密码"><a href="#默认root账号，需添加密码" class="headerlink" title="默认root账号，需添加密码"></a>默认root账号，需添加密码</h2><h2 id="访问url"><a href="#访问url" class="headerlink" title="访问url"></a>访问url</h2><pre><code>ip:端口号(默认80)</code></pre><h1 id="Nexus安装"><a href="#Nexus安装" class="headerlink" title="Nexus安装"></a>Nexus安装</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>cd /usr/local<br>mkdir nexus</p><h2 id="下载Nexus安装包，并解压文件"><a href="#下载Nexus安装包，并解压文件" class="headerlink" title="下载Nexus安装包，并解压文件"></a>下载Nexus安装包，并解压文件</h2><p>wget <a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gz" target="_blank" rel="noopener">https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gz</a><br>tar -xzvf nexus-2.14.8-01-bundle.tar.gz -C nexus</p><h2 id="添加root用户"><a href="#添加root用户" class="headerlink" title="添加root用户"></a>添加root用户</h2><p>vi /usr/local/nexus/nexus-2.14.8-01/bin/nexus<br>添加 RUN_AS_USER=root<br>保存以上修改。<br>备注：修改前请先备份原始文件</p><h2 id="启动Nexus"><a href="#启动Nexus" class="headerlink" title="启动Nexus"></a>启动Nexus</h2><p>/usr/local/nexus/ nexus-2.14.8-01/bin/nexus start</p><h2 id="访问Nexus"><a href="#访问Nexus" class="headerlink" title="访问Nexus"></a>访问Nexus</h2><p>ip:端口号(默认8081)/nexus</p><h2 id="默认Nexus账号密码"><a href="#默认Nexus账号密码" class="headerlink" title="默认Nexus账号密码"></a>默认Nexus账号密码</h2><p>admin admin123</p><p>注意：下载Nexus安装包的过程可以在本机操作，然后把安装包通过FTP上传到服务器上。<br>存储所在路径：压缩包解压后，文件夹内nexus-2.14.8-01-bundle/sonatype-work/，这个路径就是，具体存储路径可以在nexus-2.14.8-01/conf/ nexus.properties文件里进行修改。<br>参考：<a href="https://www.linuxidc.com/Linux/2016-08/134617.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-08/134617.htm</a></p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="FTP上传Docker的deb安装文件"><a href="#FTP上传Docker的deb安装文件" class="headerlink" title="FTP上传Docker的deb安装文件"></a>FTP上传Docker的deb安装文件</h2><p>比如上传到此目录下：/tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb</p><h2 id="更新库，安装依赖"><a href="#更新库，安装依赖" class="headerlink" title="更新库，安装依赖"></a>更新库，安装依赖</h2><p>apt-get update<br>apt-get install -y apt-utils iptables libdevmapper1.02.1 libltdl7 libseccomp2</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>dpkg -i /tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb</p><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><p>docker –version<br>如下图，显示docker版本号则安装成功<br><img src="/2018/12/13/Devops搭建手冊/1.png"></p><h1 id="Kubectl安装"><a href="#Kubectl安装" class="headerlink" title="Kubectl安装"></a>Kubectl安装</h1><h2 id="下载kubectl安装包"><a href="#下载kubectl安装包" class="headerlink" title="下载kubectl安装包"></a>下载kubectl安装包</h2><p>wget <a href="https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz</a></p><h2 id="解压kubectl安装包"><a href="#解压kubectl安装包" class="headerlink" title="解压kubectl安装包"></a>解压kubectl安装包</h2><p>tar -zxvf kubernetes-client-linux-amd64.tar.gz</p><h2 id="进入到kubernetes-client-bin目录，并给kubectl文件赋权限"><a href="#进入到kubernetes-client-bin目录，并给kubectl文件赋权限" class="headerlink" title="进入到kubernetes/client/bin目录，并给kubectl文件赋权限"></a>进入到kubernetes/client/bin目录，并给kubectl文件赋权限</h2><p>cd kubernetes/client/bin<br>chmod +x ./kubectl</p><h2 id="移动kubectl文件到-usr-local-bin-目录下"><a href="#移动kubectl文件到-usr-local-bin-目录下" class="headerlink" title="移动kubectl文件到/usr/local/bin/目录下"></a>移动kubectl文件到/usr/local/bin/目录下</h2><p>sudo mv ./kubectl /usr/local/bin/kubectl<br>sudo chmod +x /usr/local/bin/kubectl</p><h2 id="创建-kube文件夹"><a href="#创建-kube文件夹" class="headerlink" title="创建.kube文件夹"></a>创建.kube文件夹</h2><p>mkdir ~/.kube</p><h2 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建config文件</h2><p>touch ~/.kube/config</p><h2 id="K8S的配置信息"><a href="#K8S的配置信息" class="headerlink" title="K8S的配置信息"></a>K8S的配置信息</h2><h3 id="通过token添加配置信息"><a href="#通过token添加配置信息" class="headerlink" title="通过token添加配置信息"></a>通过token添加配置信息</h3><p>首先：web登录到ICP<br> <img src="/2018/12/13/Devops搭建手冊/2.png"><br>其次：复制token信息<br> <img src="/2018/12/13/Devops搭建手冊/3.png"><br>最后：在服务器命令行执行token信息里的命令，执行完之后步骤6里的config文件里会保存有k8s的相关配置信息，但是token是有实效期的。</p><h3 id="通过证书添加配置信息"><a href="#通过证书添加配置信息" class="headerlink" title="通过证书添加配置信息"></a>通过证书添加配置信息</h3><p>首先：向ICP管理员要三个证书，三个证书在ICP的master节点上的路径为/etc/cfc/conf/，三个证书为：ca.crt，kubecfg.crt，kubecfg.key，将三个证书存放到/etc/kubernetes/conf/目录下，如果没有请创建该目录<br>其次：执行kubectl命令，修改config文件。<br>kubectl config set-cluster mycluster.icp  –server=<a href="https://10.8.154.198:8001" target="_blank" rel="noopener">https://10.8.154.198:8001</a>  –certificate-authority=/etc/kubernetes/conf/ca.crt \<br>&amp;&amp; kubectl config set-credentials admin –client-certificate=/etc/kubernetes/conf/kubecfg.crt –client-key=/etc/kubernetes/conf/kubecfg.key \<br>&amp;&amp; kubectl config set-context icp –cluster=mycluster.icp –user=admin \<br>&amp;&amp; kubectl config use-context icp \<br>&amp;&amp; kubectl config view</p><p>下载地址：<br><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md</a><br>​                    参考：<br>​                        <a href="http://blog.csdn.net/farYang/article/details/79427573" target="_blank" rel="noopener">http://blog.csdn.net/farYang/article/details/79427573</a><br>​                        <a href="http://blog.csdn.net/weiguang1017/article/details/69972015" target="_blank" rel="noopener">http://blog.csdn.net/weiguang1017/article/details/69972015</a><br>​                    注意：<br>1.压缩包里只有一个kubectl文件，1,、2、3、4步已经安装好kubectl了，只是不能与k8s通讯。<br>2.证书配置是针对管理员的，普通用户用token<br>3.修改host文件.如：10.8.154.198  mycluster.icp</p><ol start="4"><li>7步骤b)中的–server= <a href="https://10.8.154.198:8001要进行修改" target="_blank" rel="noopener">https://10.8.154.198:8001要进行修改</a></li></ol><h1 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h1><h2 id="向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示："><a href="#向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示：" class="headerlink" title="向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示："></a>向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示：</h2> <img src="/2018/12/13/Devops搭建手冊/4.png"><p>将master的上个证书存放到：/etc/kubernetes/conf/<br>将私有镜像中心的证书存放到：/etc/docker/certs.d/mycluster.icp:8500/</p><p>注意：证书原始路径，在ICP的master节点上<br>​    Master证书路径：/etc/cfc/conf/ca.crt<br>/etc/cfc/conf/kubecfg.crt<br>/etc/cfc/conf/kubecfg.key<br>​            私有镜像中心证书路径：/etc/docker/certs.d/mycluster.icp\:8500/ca.crt</p><h2 id="向ICP管理员询问cluster-vip、cluster-CA-domain、proxy-vip、storageClassName的值"><a href="#向ICP管理员询问cluster-vip、cluster-CA-domain、proxy-vip、storageClassName的值" class="headerlink" title="向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值"></a>向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值</h2><p>cluster_vip：页面访问ICP的IP地址<br>​    cluster_CA_domain：私有镜像中心域名<br>​    proxy_vip：代理的vip，用于应用的映射<br>​    storageClassName：PVC的时候使用</p><h2 id="修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示"><a href="#修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示" class="headerlink" title="修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示"></a>修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示</h2> <img src="/2018/12/13/Devops搭建手冊/5.png"><h2 id="在k8s集群内新建devops命名空间"><a href="#在k8s集群内新建devops命名空间" class="headerlink" title="在k8s集群内新建devops命名空间"></a>在k8s集群内新建devops命名空间</h2><p>命令：kubectl create ns devops<br>ICP页面创建：<br> <img src="/2018/12/13/Devops搭建手冊/6.png"></p><h2 id="根据应用的场景创建java-slave-nodejs-slave等jenkins的slave镜像"><a href="#根据应用的场景创建java-slave-nodejs-slave等jenkins的slave镜像" class="headerlink" title="根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像"></a>根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像</h2><h2 id="从docker-hub上下载openjdk、nginx、jenkins等镜像"><a href="#从docker-hub上下载openjdk、nginx、jenkins等镜像" class="headerlink" title="从docker-hub上下载openjdk、nginx、jenkins等镜像"></a>从docker-hub上下载openjdk、nginx、jenkins等镜像</h2><h2 id="上传5、6步骤里的镜像到ICP的私有镜像中心"><a href="#上传5、6步骤里的镜像到ICP的私有镜像中心" class="headerlink" title="上传5、6步骤里的镜像到ICP的私有镜像中心"></a>上传5、6步骤里的镜像到ICP的私有镜像中心</h2><p>如何上传，请参考ICP官方文档：<br><a href="https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html</a></p><h2 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h2><p>kubectl create secret docker-registry myregistrykey –docker-server=mycluster.icp:8500 –docker-username=admin –docker-password=admin <a href="mailto:--docker-email=shuaichao_gao@trtjk.com" target="_blank" rel="noopener">--docker-email=shuaichao_gao@trtjk.com</a> -n=devops<br>在jenkins的yaml里添加对该secret的引用</p><h2 id="执行jenkins、pvc等yaml文件"><a href="#执行jenkins、pvc等yaml文件" class="headerlink" title="执行jenkins、pvc等yaml文件"></a>执行jenkins、pvc等yaml文件</h2><p>kubectl apply -f jenkins-master-sts-dev-test.yaml<br>kubectl apply -f jenkins-slave-glusterfs-pvc.yaml</p><h2 id="查看jenkins的状态"><a href="#查看jenkins的状态" class="headerlink" title="查看jenkins的状态"></a>查看jenkins的状态</h2><p>#查看pod状态<br>kubectl get pods -n=devops</p><p>#查看pod详细描述信息<br>kubectl describe pods -n=devops</p><p>#查看应用的日志<br>kubectl logs -f pods -n=devops</p><h2 id="浏览器访问jenkins，按需安装必要插件"><a href="#浏览器访问jenkins，按需安装必要插件" class="headerlink" title="浏览器访问jenkins，按需安装必要插件"></a>浏览器访问jenkins，按需安装必要插件</h2><h2 id="在gitlab服务器修改hosts文件，添加jenkins应用的映射"><a href="#在gitlab服务器修改hosts文件，添加jenkins应用的映射" class="headerlink" title="在gitlab服务器修改hosts文件，添加jenkins应用的映射"></a>在gitlab服务器修改hosts文件，添加jenkins应用的映射</h2> <img src="/2018/12/13/Devops搭建手冊/7.png"><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。"><a href="#Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。" class="headerlink" title="Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。"></a>Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。</h2><h2 id="各个软件的安装包和文件已打包"><a href="#各个软件的安装包和文件已打包" class="headerlink" title="各个软件的安装包和文件已打包"></a>各个软件的安装包和文件已打包</h2><h2 id="证书与ICP环境是对应的，不同的ICP环境证书是不一样的。"><a href="#证书与ICP环境是对应的，不同的ICP环境证书是不一样的。" class="headerlink" title="证书与ICP环境是对应的，不同的ICP环境证书是不一样的。"></a>证书与ICP环境是对应的，不同的ICP环境证书是不一样的。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gitlab安装&quot;&gt;&lt;a href=&quot;#Gitlab安装&quot; class=&quot;headerlink&quot; title=&quot;Gitlab安装&quot;&gt;&lt;/a&gt;Gitlab安装&lt;/h1&gt;&lt;h2 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Devops" scheme="https://amote.xin/categories/Devops/"/>
    
    
      <category term="Devops" scheme="https://amote.xin/tags/Devops/"/>
    
  </entry>
  
</feed>
