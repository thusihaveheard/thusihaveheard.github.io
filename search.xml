<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于jenkins官方的Dockerfile修改之后预装镜像的Dockerfile]]></title>
    <url>%2F2018%2F12%2F18%2F%E5%9F%BA%E4%BA%8Ejenkins%E5%AE%98%E6%96%B9%E7%9A%84Dockerfile%E4%BF%AE%E6%94%B9%E4%B9%8B%E5%90%8E%E9%A2%84%E8%A3%85%E9%95%9C%E5%83%8F%E7%9A%84Dockerfile%2F</url>
    <content type="text"><![CDATA[为何要修改官方的Dockerfile？官方的Dockerfile基于jenkins用户,修改后基于root用户,当然这个可以根据自己的需要去做修改，具体可以查看官方Dockerfile文件的注释！Jenkins插件为王，不安装插件基本jenkins就报废。使用官方的Jenkins镜像在启动成功之后访问jenkins会提示安装必要的插件，当然可以略过，进去jenkins之后再选择需要的插件进行安装，但是毕竟插件仓库都在国外，网络不好或者网络限制会造成插件安装失败(我们公司就是！)。基于此,在官方Dockerfile的基础上制作jenkins镜像的时候，可以直接去预装插件！ 注：官方Dockerfile地址 https://github.com/jenkinsci/docker/blob/587b2856cd225bb152c4abeeaaa24934c75aa460/Dockerfile 制作jenkins镜像docker build -t jenkins:2.60.3 . 注：默认Dockerfile使用的是2.60.3版本jenkins的war包，如果要改变使用的jenkins版本，在build的镜像通过参数–build-arg JENKINS_VERSION =版本号 传递如：docker build -t jenkins:2.60.3 –build-arg JENKINS_VERSION = 2.99 .但是不同的jenkins版本基于的jdk版本不一样，Dockerfile的基类镜像是openjdk8的 启动jenkins镜像docker run –d -p 8088:8080 -p 50000:50000 –restart=always –name myjenkins -u root -v /var/jenkins_home:/var/jenkins_home 镜像id(或者repository:tag)-d后台启动，-p映射端口号, –restart=always自动重启， –name容器名称， –u使用什么账号运行，-v挂载目录 查看jenkins日志，并获取初始化admin用户的密码docker logs -f 0ad214f3c2c2-f 查看实时日志，0ad214f3c2c2 容器id 注：如果密码在日志里没有查到，可以去查找/var/jenkins_home/secrets/initialAdminPassword文件，此文件已挂载到宿主机 浏览器访问jenkins 输入上一步获取到的密码，点击Continue 选择Install suggested plugins,进入后会看到插件都已安装上，忘记截图了！ 如何制作plugins.txt方法一：1.安装jenkins2.安装需要的插件3.导入已安装的插件到plugins.txtcurl -sSL “http://username:password@myhost.com:port/pluginManager/api/xml?depth=1&amp;xpath=/*/*/shortName|/*/*/version&amp;wrapper=plugins&quot; | perl -pe ‘s/.?([\w-]+).?([^&lt;]+)()(&lt;\/\w+&gt;)+/\1 \2\n/g’|sed ‘s/ /:/‘ &gt; plugins.txt 方法二：1.创建空的plugins.txt 2.打开plugins.txt文件，并填写插件名称，以及对应版本号 建议使用方法一！ 所需资源下载相关资源sssss]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker搭建mysql数据库]]></title>
    <url>%2F2018%2F12%2F17%2FDocker%E6%90%AD%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[拉取镜像 演示的是5.7.24版本 docker pull mysql:5.7.24 启动镜像docker run –name mysql5.7.24 -p 3306:3306 -d –restart always -v /volume_data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1qaz2wsx! mysql:5.7.24–name是容器别名，-p对外暴露端口，-d 后台执行挂了自动重启，-v 对外挂在目录，将mysql数据持久化到本地，-e MYSQL_ROOT_PASSWORD通过变量设置root账号的密码，最后是镜像名称。启动成功后可以在外部直接访问到数据库]]></content>
      <categories>
        <category>Docker</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Ingress]]></title>
    <url>%2F2018%2F12%2F17%2F%E5%AE%89%E8%A3%85Ingress%2F</url>
    <content type="text"><![CDATA[Ingress其实就是从kuberenets集群外部访问集群的一个入口，将外部的请求转发到集群内不同的Service 上，其实就相当于nginx、apache 等负载均衡代理服务器，再加上一个规则定义，路由信息的刷新需要靠Ingress controller来提供。Ingress controller可以理解为一个监听器，通过不断地与kube-apiserver打交道，实时的感知后端service、pod 等的变化，当得到这些变化信息后，Ingress controller再结合Ingress的配置，更新反向代理负载均衡器，达到服务发现的作用。其实这点和服务发现工具consul的consul-template非常类似。# 创建rbac# 创建文件：ingress-rbac.yaml，用于service account验证 apiVersion: v1kind: ServiceAccountmetadata: name: ingress namespace: kube-system -–kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: ingresssubjects: kind: ServiceAccountname: ingressnamespace: kube-systemroleRef:kind: ClusterRolename: cluster-adminapiGroup: rbac.authorization.k8s.io # DaemonSet 形式部署traefik# 创建文件：traefik-daemonset.yaml，为保证traefik 总能提供服务，在每个节点上都部署一个traefik，所以这里使用DaemonSet 的形式 kind: ConfigMapapiVersion: v1metadata: name: traefik-conf namespace: kube-systemdata: traefik-config: |-​ defaultEntryPoints = [“http”,”https”]​ [entryPoints]​ [entryPoints.http]​ address = “:80”​ [entryPoints.http.redirect]​ entryPoint = “https”​ [entryPoints.https]​ address = “:443”​ [entryPoints.https.tls]​ [[entryPoints.https.tls.certificates]]​ CertFile = “/ssl/ssl.crt”​ KeyFile = “/ssl/ssl.key” kind: DaemonSetapiVersion: extensions/v1beta1metadata: name: traefik-ingress namespace: kube-system labels:​ k8s-app: traefik-ingressspec: template:​ metadata:​ labels:​ k8s-app: traefik-ingress​ name: traefik-ingress​ spec:​ terminationGracePeriodSeconds: 60​ restartPolicy: Always​ serviceAccountName: ingress​ containers:​ - image: traefik:latest​ name: traefik-ingress​ ports:​ - name: http​ containerPort: 80​ hostPort: 80​ - name: https​ containerPort: 443​ hostPort: 443​ - name: admin​ containerPort: 8080​ args:​ - –configFile=/etc/traefik/traefik.toml​ - -d​ - –web​ - –kubernetes​ - –logLevel=DEBUG​ volumeMounts:​ - name: traefik-config-volume​ mountPath: /etc/traefik​ - name: traefik-ssl-volume​ mountPath: /ssl​ volumes:​ - name: traefik-config-volume​ configMap:​ name: traefik-conf​ items:​ - key: traefik-config​ path: traefik.toml​ - name: traefik-ssl-volume​ secret:​ secretName: traefik-ssl上面的yaml 文件中我们添加了一个名为traefik-conf的ConfigMap，该配置是用来将http 请求强制跳转成https，并指定https 所需CA 文件地址，这里我们使用secret的形式来指定CA 文件的路径： OpenSSL生成CA证书[root@lab1 /]# mkdir ssl[root@lab1 /]# cd ssl/[root@lab1 ssl]# openssl req -newkey rsa:2048 -nodes -keyout ssl.key -x509 -days 3650 -out ssl.crtGenerating a 2048 bit RSA private key…………………………………………+++…………………………..+++writing new private key to ‘ssl.key’-—-You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter ‘.’, the field will be left blank.-—-Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:BJLocality Name (eg, city) [Default City]:BJOrganization Name (eg, company) [Default Company Ltd]:TRTOrganizational Unit Name (eg, section) []:OPSCommon Name (eg, your name or your server’s hostname) []:CA.test.comEmail Address []:shuaichao_gao@trtjk.com[root@lab1 ssl]# ls -ltotal 8-rw-r–r–. 1 root root 1391 Aug 3 13:16 ssl.crt-rw-r–r–. 1 root root 1700 Aug 3 13:16 ssl.key $ lsssl.crt ssl.key$ kubectl create secret generic traefik-ssl –from-file=ssl.crt –from-file=ssl.key –namespace=kube-systemsecret “traefik-ssl” created# 创建ingress# 创建文件：traefik-ingress.yaml，现在可以通过创建ingress文件来定义请求规则了，根据自己集群中的service 自己修改相应的serviceName 和servicePort apiVersion: extensions/v1beta1kind: Ingressmetadata: name: traefik-ingressspec: rules: host: traefik.nginx.iohttp: paths: path: /backend: serviceName: my-nginx servicePort: 80$ kubectl create -f ingress-rbac.yamlserviceaccount “ingress” createdclusterrolebinding “ingress” created$ kubectl create -f traefik-daemonset.yamlconfigmap “traefik-conf” createddaemonset “traefik-ingress” created$ kubectl create -f traefik-ingress.yamlingress “traefik-ingress” created# Traefik UI# 创建文件：traefik-ui.yaml apiVersion: v1kind: Servicemetadata: name: traefik-ui namespace: kube-systemspec: selector:​ k8s-app: traefik-ingress ports: name: webport: 80targetPort: 8080-–apiVersion: extensions/v1beta1kind: Ingressmetadata:name: traefik-uinamespace: kube-systemspec:rules: host: traefik-ui.localhttp: paths: path: /backend: serviceName: traefik-ui servicePort: web# 部署完成后，在本地/etc/hosts添加一条配置 # 将下面的xx.xx.xx.xx替换成任意节点IPxx.xx.xx.xx master03 traefik.nginx.io traefik-ui.local # 配置完成后，在本地访问：traefik-ui.local，则可以访问到traefik的dashboard页面# 同样的可以访问traefik.nginx.io，得到正确的结果页面]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浮生如茶]]></title>
    <url>%2F2018%2F12%2F14%2F%E6%B5%AE%E7%94%9F%E5%A6%82%E8%8C%B6%2F</url>
    <content type="text"><![CDATA[一个屡屡失意的年轻人千里迢迢来到普济寺，慕名寻到老僧释圆，沮丧地对他说：“人生总不如意，活着也是苟且，有什么意思呢？” 释圆静静听着年轻人的叹息和絮叨，末了才吩咐小和尚说：“施主远道而来，烧一壶温水送过来。” 不一会儿，小和尚送来了一壶温水，释圆抓了茶叶放进杯子，然后用温水沏了，放在茶几上，微笑着请年轻人喝茶。杯子冒出微微的水汽，茶叶静静浮着。年轻人不解地询问：“宝刹怎么温茶？” 释圆笑而不语。年轻人喝一口细品，不由摇摇头：“一点茶香都没有呢。”释圆说：“这可是闽地名茶铁观音啊。” 年轻人又端起杯子品尝，然后肯定地说：“真的没有一丝茶香。” 释圆又吩咐小和尚：“再去烧一壶沸水送过来。” 又过了一会儿，小和尚便提着一壶冒着浓浓白汽的沸水进来。释圆起身，又取过一个杯子，放茶叶，倒沸水，再放在茶几上。年轻人俯首看去，茶叶在杯子里上下沉浮，丝丝清香不绝如缕，望而生津。 年轻人欲去端杯，释圆作势挡开，又提起水壶注入一线沸水。茶叶翻腾得更厉害了，一缕更醇厚更醉人的茶香袅袅升腾，在禅房弥漫开来。释圆这样注了五次水，杯子终于满了，那绿绿的一杯茶水，端在手上清香扑鼻，入口沁人心脾。 释圆笑着问：“施主可知道，同是铁观音，为什么茶味迥异吗？” 年轻人思忖着说：“一杯用温水，一杯用沸水，冲沏的水不同。” 释圆点头：“用水不同，则茶叶的沉浮就不一样。温水沏茶，茶叶轻浮水上，怎会散发清香？沸水沏茶，反复几次，茶叶沉沉浮浮，释放出四季的风韵：既有春的幽静夏的炽热，又有秋的丰盈和冬的清冽。世间芸芸众生，又何尝不是沉浮的茶叶呢？ 那些不经风雨的人，就像温水沏的茶叶，只在生活表面漂浮，根本浸泡不出生命的芳香；而那些栉风沐雨的人，如被沸水冲沏的酽茶，在沧桑岁月里几度沉浮，才有那沁人的清香啊。”]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>佛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心若水]]></title>
    <url>%2F2018%2F12%2F14%2F%E5%BF%83%E8%8B%A5%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[清风吹 伊人楼台随 近水楼台 雾里捕捉你的影 纤纤碎步 不知你是谁 月光皎洁 而你静静伫立 我只想去陪 伊人眉 似柳似叶使人醉 亭亭玉立 月色已在褪 白皙蝶衣 犹如玻璃脆 轻轻去唤 不肯来理会 上善若水 不惹世间之非 钟情缘 一生有几回 心若水 涟漪泛起 微风轻轻在吹 你的眼神是壁画的一笔 我看着你 只有生命的纯粹 心若水 一点一滴 就像晶莹的泪 你的寂静是憔悴的美 我感悟你 需要一生去品味​]]></content>
      <categories>
        <category>歌词</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>歌</tag>
        <tag>词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[望穿秋水]]></title>
    <url>%2F2018%2F12%2F14%2F%E6%9C%9B%E7%A9%BF%E7%A7%8B%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[细水流涓涓 闲坐船 柳叶垂两岸 花自然 沏一杯毛尖 味醇酣 闻帘子间 谁将琵琶弹 忧伤溢满 泪水湿透衣衫 邀相见 憔悴容颜 已沉鱼落雁 心愈寒 相逢何必曾相见 侃侃而谈 人生何其短 知己有几番 举杯把酒言欢 落叶吹翻 不见故人又还 望眼欲穿 袅袅几缕炊烟 思念缠一线 分割两半 一半瞬间 一半永远 一行飞雁 捎去相思之念]]></content>
      <categories>
        <category>歌词</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>歌</tag>
        <tag>词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[道德经]]></title>
    <url>%2F2018%2F12%2F14%2F%E9%81%93%E5%BE%B7%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[第 一 章 道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。 无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。 故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。 此 两 者 ， 同 出 而 异 名 ， 同 谓 之 玄 。 玄 之 又 玄 ， 众 妙 之 门 。 第 二 章 天 下 皆 知 美 之 为 美 ， 斯 恶 已 。 皆 知 善 之 为 善 ， 斯 不 善 已 。 有 无 相 生 ， 难 易 相 成 ， 长 短 相 形 ，高 下 相 盈 ， 音 声 相 和 ， 前 后 相 随 。恒 也 。 是 以 圣 人 处 无 为 之 事 ，行 不 言 之 教 ﹔ 万 物 作 而 弗 始 ，生 而 弗 有 ， 为 而 弗 恃 ， 功 成 而 不 居 。 夫 唯 弗 居 ， 是 以 不 去 。 第 三 章 不 尚 贤 ， 使 民 不 争 不 贵 难 得 之 货 ， 使 民 不 为 盗 ﹔ 不 见 可 欲 ， 使 民 心 不 乱 。 是 以 圣 人 之 治 ， 虚 其 心 ，实 其 腹 ， 弱 其 志 ，强 其 骨 。 常 使 民 无 知 无 欲 。 使 夫 智 者 不 敢 为 也 。 为 无 为 ， 则 无 不 治 。 第 四 章 道 冲 ， 而 用 之 或 不 盈 。 渊 兮 ， 似 万 物 之 宗 ﹔ 湛 兮 ， 似 或 存 。 吾 不 知 谁 之 子 ， 象 帝 之 先 。 第 五 章 天 地 不 仁 ， 以 万 物 为 刍 狗 ﹔ 圣 人 不 仁 ， 以 百 姓 为 刍 狗 。 天 地 之 间 ， 其 犹 橐 龠 乎 。 虚 而 不 屈 ， 动 而 愈 出 。 多 言 数 穷 ， 不 如 守 中 。 第 六 章 谷 神 不 死 ， 是 谓 玄 牝 。 玄 牝 之 门 ， 是 谓 天 地 根 。 绵 绵 若 存 ， 用 之 不 勤 。 第 七 章 天 长 地 久 。 天 地 所 以 能 长 且 久 者 ， 以 其 不 自 生 ， 故 能 长 生 。 是 以 圣 人 后 其 身 而 身 先 ﹔ 外 其 身 而 身 存 。 非 以 其 无 私 邪 。故 能 成 其 私 。 第 八 章 上 善 若 水 。 水 善 利 万 物 而 不 争 ， 处 众 人 之 所 恶 ， 故 几 于 道 。 居 善 地 ，心 善 渊 ， 与 善 仁 ，言 善 信 ， 政 善 治 ， 事 善 能 ，动 善 时 。 夫 唯 不 争 ， 故 无 尤 。 第 九 章 持 而 盈 之 ， 不 如 其 已 ﹔ 揣 而 锐 之 ， 不 可 长 保 。 金 玉 满 堂 ， 莫 之 能 守 ﹔ 富 贵 而 骄 ， 自 遗 其 咎 。 功 遂 身 退 ， 天 之 道 也 。 第 十 章 载 营 魄 抱 一 ， 能 无 离 乎 。 专 气 致 柔 ， 能 如 婴 儿 乎 。 涤 除 玄 鉴 ， 能 无 疵 乎 。 爱 国 治 民 ， 能 无 为 乎 。 天 门 开 阖 ， 能 为 雌 乎 。 明 白 四 达 ， 能 无 知 乎 。 第 十 一 章 三 十 辐 ， 共 一 毂 ， 当 其 无 ， 有 车 之 用 。 埏 埴 以 为 器 ， 当 其 无 ， 有 器 之 用 。 凿 户 牖 以 为 室 ， 当 其 无 ， 有 室 之 用 。 故 有 之 以 为 利 ， 无 之 以 为 用 。 第 十 二 章 五 色 令 人 目 盲 ﹔ 五 音 令 人 耳 聋 ﹔ 五 味 令 人 口 爽 ﹔ 驰 骋 畋 猎 ， 令 人 心 发 狂 ﹔ 难 得 之 货 ， 令 人 行 妨 。 是 以 圣 人 为 腹 不 为 目 ， 故 去 彼 取 此 。 第 十 三 章 宠 辱 若 惊 ， 贵 大 患 若 身 。 何 谓 宠 辱 若 惊 。 宠 为 下 ， 得 之 若 惊 ， 失 之 若 惊 ， 是 谓 宠 辱 若 惊 。 何 谓 贵 大 患 若 身 。 吾 所 以 有 大 患 者 ， 为 吾 有 身 ， 及 吾 无 身 ， 吾 有 何 患 。 故 贵 以 身 为 天 下 ， 若 可 寄 天 下 ﹔ 爱 以 身 为 天 下 ， 若 可 托 天 下 。 第 十 四 章 视 之 不 见 ， 名 曰 夷 ﹔ 听 之 不 闻 ， 名 曰 希 ﹔ 搏 之 不 得 ， 名 曰 微 。 此 三 者 不 可 致 诘 ， 故 混 而 为 一 。 其 上 不 皦 ， 其 下 不 昧 。 绳 绳 兮 不 可 名 ， 复 归 于无 物 。 是 谓 无 状 之 状 ， 无 物 之 象 ， 是 谓 惚 恍 。 迎 之 不 见 其 首 ， 随 之 不 见 其 后 。 执 古 之 道 ， 以 御 今 之 有 。 能 知 古 始 ， 是 谓 道 纪 。 第 十 五 章 古 之 善 为 道 者 ， 微 妙 玄 通 ， 深 不 可 识 。 夫 唯 不 可 识 ， 故 强 为 之 容 ： 豫 兮 若 冬 涉 川 ﹔ 犹 兮 若 畏 四 邻 ﹔ 俨 兮 其 若 容 ﹔ 涣 兮 若 冰 之 将 释 ﹔ 敦 兮 其 若 朴 ﹔ 旷 兮 其 若 谷 ﹔ 混 兮 其 若 浊 ﹔ 澹 兮 其 若 海 ﹔ 飂 兮 若 无 止 。 孰 能 浊 以 静 之 徐 清 。 孰 能 安 以 动 之 徐 生 。 保 此 道 者 ， 不 欲 盈 。 夫 唯 不 盈 ， 故 能 蔽 而 新 成 。 第 十 六 章 致 虚 极 ， 守 静 笃。 万 物 并 作 ， 吾 以 观 复。 夫 物 芸 芸 ， 各 复 归 其 根 。 归 根 曰 静 ， 静 曰 复 命 。 复 命 曰 常 ， 知 常 曰 明 。 不 知 常 ， 妄 作 凶 。 知 常 容 ， 容 乃 公 ， 公 乃 全 ， 全 乃 天 ， 天 乃 道 ， 道 乃 久 ， 没 身 不 殆 。 第 十 七 章 太 上 ， 不 知 有 之 ﹔ 其 次 ， 亲 而 誉 之 ﹔ 其 次 ， 畏 之 ﹔ 其 次 ， 侮 之 。 信 不 足 焉 ， 有 不 信 焉 。 悠 兮 其 贵 言 。 功 成 事 遂 ， 百 姓 皆 谓 ： 「 我 自 然 」 。 第 十 八 章 大 道 废 ， 有 仁 义 ﹔ 智 慧 出 ， 有 大 伪 ﹔ 六 亲 不 和 ， 有 孝 慈 ﹔ 国 家 昏 乱 ， 有 忠 臣 。 第 十 九 章 绝 圣 弃 智 ， 民 利 百 倍 ﹔ 绝 仁 弃 义 ， 民 复 孝 慈 ﹔ 绝 巧 弃 利 ， 盗 贼 无 有 。 此 三 者 以 为 文 不 足 ，故 令 有 所 属 。 见 素 抱 朴 ，少 思 寡 欲 ， 绝 学 无 忧 。 第 二 十 章 唯 之 与 阿 ， 相 去 几 何 。 善 之 与 恶 ， 相 去 若 何 。 人 之 所 畏 ， 不 可 不 畏 。 荒 兮 ， 其 未 央 哉 。 众 人 熙 熙 ， 如 享 太 牢 ， 如 春 登 台 。 我 独 泊 兮 ， 其 未 兆 ﹔ 沌 沌 兮 ， 如 婴 儿 之 未 孩 ﹔ 儽 儽 兮 ， 若 无 所 归 。 众 人 皆 有 余 ， 而 我 独 若 遗 。 我 愚 人 之 心 也 哉 。 俗 人 昭 昭 ， 我 独 昏 昏 。 俗 人 察 察 ， 我 独 闷 闷 。 众 人 皆 有 以 ， 而 我 独 顽 且 鄙 。 我 独 异 于 人 ， 而 贵 食 母 。 第 二 十 一 章 孔 德 之 容 ， 惟 道 是 从 。 道 之 为 物 ， 惟 恍 惟 惚 。 惚 兮 恍 兮 ， 其 中 有 象 ﹔ 恍 兮 惚 兮 ， 其 中 有 物 。 窈 兮 冥 兮 ， 其 中 有 精 ﹔ 其 精 甚 真 ， 其 中 有 信 。 自 今 及 古 ， 其 名 不 去 ， 以 阅 众 甫 。 吾 何 以 知 众 甫 之 状 哉 。 以 此 。 第 二 十 二 章 曲 则 全 ， 枉 则 直 ， 洼 则 盈 ， 敝 则 新 ， 少 则 得 ， 多 则 惑 。 是 以 圣 人 抱 一 为 天 下 式 。 不 自 见 ， 故 明 ﹔ 不 自 是 ， 故 彰 ﹔ 不 自 伐 ， 故 有 功 ﹔ 不 自 矜 ， 故 长 。 夫 唯 不 争 ， 故 天 下 莫 能 与 之 争 。 古 之 所 谓 「 曲 则 全 」 者 ， 岂 虚 言 哉 。 诚 全 而 归 之 。 第 二 十 三 章 希 言 自 然 。 故 飘 风 不 终 朝 ， 骤 雨 不 终 日 。 孰 为 此 者 。 天 地 。 天 地 尚 不 能 久 ， 而 况 于 人 乎 。 故 从 事 于 道 者 ， 同 于 道 ﹔ 德 者 ， 同 于 德 ﹔ 失 者 ， 同 于 失 。 同 于 道 者 ， 道 亦 乐 得 之 ﹔ 同 于 德 者 ， 德 亦 乐 得 之 ﹔ 同 于 失 者 ， 失 亦 乐 得 之 。 信 不 足 焉 ， 有 不 信 焉 。 第 二 十 四 章 企 者 不 立 ﹔ 跨 者 不 行 ﹔ 自 见 者 不 明 ﹔ 自 是 者 不 彰 ﹔ 自 伐 者 无 功 ﹔ 自 矜 者 不 长 。 其 在 道 也 ， 曰 ： 余 食 赘 形 。 物 或 恶 之 ， 故 有 道 者 不 处 。 第 二 十 五 章 有 物 混 成 ， 先 天 地 生 。 寂 兮 寥 兮 ， 独 立 而 不 改 ， 周 行 而 不 殆 ， 可 以 为 天 地 母 。 吾 不 知 其 名 ， 强 字 之 曰 道 ， 强 为 之 名 曰 大 。 大 曰 逝 ， 逝 曰 远 ， 远 曰 反 。 故 道 大 ， 天 大 ， 地 大 ， 人 亦 大 。 域 中 有 四 大 ， 而 人 居 其 一 焉 。 人 法 地 ， 地 法 天 ， 天 法 道 ， 道 法 自 然 。 第 二 十 六 章 重 为 轻 根 ， 静 为 躁 君 。 是 以 君 子 终 日 行 不 离 辎 重 。 虽 有 荣 观 ， 燕 处 超 然 。 奈 何 万 乘 之 主 ， 而 以 身 轻 天 下 。 轻 则 失 根 ， 躁 则 失 君 。 第 二 十 七 章 善 行 无 辙 迹 ， 善 言 无 瑕 谪 ﹔ 善 数 不 用 筹 策 ﹔ 善 闭 无 关 楗 而 不 可 开 ， 善 结 无 绳 约 而 不 可 解 。 是 以 圣 人 常 善 救 人 ， 故 无 弃 人 ﹔ 常 善 救 物 ， 故 无 弃 物 。 是 谓 袭 明 。 故 善 人 者 ， 不 善 人 之 师 ﹔ 不 善 人 者 ， 善 人 之 资 。 不 贵 其 师 ， 不 爱 其 资 ， 虽 智 大 迷 ， 是 谓 要 妙 。 第 二 十 八 章 知 其 雄 ， 守 其 雌 ， 为 天 下 溪 。 为 天 下 溪 ， 常 德 不 离 ， 复 归 于 婴 儿 。 知 其 白 ， 守 其黑 ， 为 天 下 式 。 为 天 下 式 ， 常 德 不 忒 ， 复 归 于 无 极 。 知 其 荣，守 其 辱，为 天 下 谷。 为 天 下 谷，常 德 乃 足。 复 归 於 朴，朴 散 则 为 器 。 圣 人 用 之 ，则 为 官 长 ， 故 大 制 不 割 。 第 二 十 九 章 将 欲 取 天 下 而 为 之 ， 吾 见 其 不 得 已 。 天 下 神 器 ， 不 可 为 也 ， 不 可 执 也 。 为 者 败 之 ， 执 者 失 之 。 是 以 圣 人 无 为 ， 故 无 败 ﹔ 无 执 ， 故 无 失。 夫 物 或 行 或 随 ﹔ 或 嘘 或 吹 ﹔ 或 强 或 羸 ﹔ 或 挫 或 隳 。 是 以 圣 人 去 甚 ， 去 奢 ， 去 泰 。 第 三 十 章 以 道 佐 人 主 者 ， 不 以 兵 强 天 下 。 其 事 好 远 。 师 之 所 处 ， 荆 棘 生 焉 。 大 军 之 后 ， 必 有 凶 年 。 善 有 果 而 已 ， 不 以 取 强 。 果 而 勿 矜 ， 果 而 勿 伐 ， 果 而 勿 骄 。 果 而 不 得 已 ， 果 而 勿 强 。 物 壮 则 老 ， 是 谓 不 道 ， 不 道 早 已 。 第 三 十 一 章 夫 兵 者 ， 不 祥 之 器 ， 物 或 恶 之 ， 故 有 道 者 不 处 。 君 子 居 则 贵 左 ， 用 兵 则 贵 右 。 兵 者 不 祥 之 器 ， 非 君 子 之 器 ， 不 得 已 而 用 之 ， 恬 淡 为 上 。 胜 而 不 美 ， 而 美 之 者 ， 是 乐 杀 人 。 夫 乐 杀 人 者 ， 则 不 可 得 志 于 天 下 矣 。 吉 事 尚 左 ， 凶 事 尚 右 。 偏 将 军 居 左 ， 上 将 军 居 右 ，言 以 丧 礼 处 之 。 杀 人 之 众 ， 以 悲 哀 泣 之 ， 战 胜 以 丧 礼 处 之 。 第 三 十 二 章 道 常 无 名 。 朴 虽 小 ， 天 下 莫 能 臣 。 侯 王 若 能 守 之 ， 万 物 将 自 宾 。 天 地 相 合 ， 以 降 甘 露 ， 民 莫 之 令 而 自 均 。 始 制 有 名 ， 名 亦 既 有 ， 夫 亦 将 知 止 ， 知 止 可 以 不 殆 。 譬 道 之 在 天 下 ， 犹 川 谷 之 于 江 海 。 第 三 十 三 章 知 人 者 智 ， 自 知 者 明 。 胜 人 者 有 力 ， 自 胜 者 强 ，知 足 者 富 。 强 行 者 有 志 。 不 失 其 所 者 久 。 死 而 不 亡 者 寿 。 第 三 十 四 章 大 道 泛 兮 ， 其 可 左 右 。 万 物 恃 之 以 生 而 不 辞 ， 功 成 而 不 有 。 衣 养 万 物 而 不 为 主 。常 无 欲 可 名 于 小 ﹔ 万 物 归 焉 而 不 为 主 ， 可 名 为 大 。 以 其 终 不 自 为 大 ， 故 能 成 其 大 。 第 三 十 五 章 执 大 象 ， 天 下 往 。 往 而 不 害 ， 安 平 泰 。 乐 与 饵 ， 过 客 止 。 道 之 出 口 ， 淡 乎 其 无 味 ， 视 之 不 足 见 ， 听 之 不 足 闻 ， 用 之 不 足 既 。 第 三 十 六 章 将 欲 歙 之 ， 必 故 张 之 ﹔ 将 欲 弱 之 ， 必 故 强 之 ﹔ 将 欲 废 之 ， 必 故 兴 之 ﹔ 将 欲 取 之 ， 必 故 与 之 。 是 谓 微 明 。 柔 弱 胜 刚 强 。 鱼 不 可 脱 于 渊 ， 国 之 利 器 不 可 以 示 人 。 第 三 十 七 章 道 常 无 为 而 无 不 为 。 侯 王 若 能 守 之 ， 万 物 将 自 化 。 化 而 欲 作 ， 吾 将 镇 之 以 无 名 之 朴 。 无 名 之 朴 ， 夫 亦 将 不 欲 。 不 欲 以 静 ， 天 下 将 自 定 。 第 三 十 八 章 上 德 不 德 ， 是 以 有 德 ﹔ 下 德 不 失 德 ， 是 以 无 德 。 上 德 无 为 而 无 以 为 ﹔ 下 德 无 为 而 有 以 为 。 上 仁 为 之 而 无 以 为 ﹔ 上 义 为 之 而 有 以 为 。 上 礼 为 之 而 莫 之 应 ， 则 攘 臂 而 扔 之 。 故 失 道 而 后 德 ， 失 德 而 后 仁 ， 失 仁 而 后 义 ， 失 义 而 后 礼 。 夫 礼 者 ， 忠 信 之 薄 ， 而 乱 之 首 。 前 识 者 ， 道 之 华 ， 而 愚 之 始 。 是 以 大 丈 夫 处 其 厚 ， 不 居 其 薄 ﹔ 处 其 实 ， 不 居 其 华 。 故 去 彼 取 此 。 第 三 十 九 章 昔 之 得 一 者 ： 天 得 一 以 清 ﹔ 地 得 一 以 宁 ﹔ 神 得 一 以 灵 ﹔ 谷 得 一 以 生 ﹔ 侯 王 得 一 以 为 天 下 贞 。 其 致 之 也 ， 谓 天 无 以 清 ， 将 恐 裂 ﹔ 地 无 以 宁 ， 将 恐 废 ﹔ 神 无 以 灵 ， 将 恐 歇 ﹔ 谷 无 以 盈 ， 将 恐 竭 ﹔ 万 物 无 以 生 ， 将 恐 灭 ﹔ 侯 王 无 以 贞 ， 将 恐 蹶 。 故 贵 以 贱 为 本 ， 高 以 下 为 基 。 是 以 侯 王 自 称 孤 、 寡 、 不 谷 。 此 非 以 贱 为 本 邪 。 非 乎 。 故 致 誉 无 誉 。 是 故 不 欲 琭 琭 如 玉 ， 珞 珞 如 石 。 第 四 十 章 反 者 道 之 动 ﹔ 弱 者 道 之 用 。 天 下 万 物 生 于 有 ， 有 生 于 无 。 第 四 十 一 章 上 士 闻 道 ， 勤 而 行 之 ﹔ 中 士 闻 道 ， 若 存 若 亡 ﹔ 下 士 闻 道 ， 大 笑 之 。 不 笑 不 足 以 为 道 。 故 建 言 有 之 ： 明 道 若 昧 ﹔进 道 若 退 ﹔夷 道 若 颣 ﹔ 上 德 若 谷 ﹔广 德 若 不 足 ﹔ 建 德 若 偷 ﹔质 真 若 渝 ﹔ 大 白 若 辱 ﹔大 方 无 隅 ﹔ 大 器 晚 成 ﹔大 音 希 声 ﹔ 大 象 无 形 ﹔道 隐 无 名 。 夫 唯 道 ， 善 贷 且 成 。 第 四 十 二 章 道 生 一 ， 一 生 二 ， 二 生 三 ， 三 生 万 物 。 万 物 负 阴 而 抱 阳 ， 冲 气 以 为 和 。 人 之 所 恶 ， 唯 孤 、 寡 、 不 谷 ， 而 王 公 以 为 称 。 故 物 或 损 之 而 益 ， 或 益 之 而 损 。 人 之 所 教 ， 我 亦 教 之 。 强 梁 者 不 得 其 死 ， 吾 将 以 为 教 父 。 第 四 十 三 章 天 下 之 至 柔 ， 驰 骋 天 下 之 至 坚 。 无 有 入 无 间 ， 吾 是 以 知 无 为 之 有 益 。 不 言 之 教 ， 无 为 之 益 ， 天 下 希 及 之 。 第 四 十 四 章 名 与 身 孰 亲 。 身 与 货 孰 多 。 得 与 亡 孰 病 。 甚 爱 必 大 费 ﹔ 多 藏 必 厚 亡 。 故 知 足 不 辱 ， 知 止 不 殆 ， 可 以 长 久 。 第 四 十 五 章 大 成 若 缺 ， 其 用 不 弊 。 大 盈 若 冲 ， 其 用 不 穷 。 大 直 若 屈 ， 大 巧 若 拙 ， 大 辩 若 讷 。 静 胜 躁 ， 寒 胜 热 。 清 静 为 天 下 正 。 第 四 十 六 章 天 下 有 道 ， 却 走 马 以 粪 。 天 下 无 道 ， 戎 马 生 于 郊 。 祸 莫 大 于 不 知 足 ﹔ 咎 莫 大 于 欲 得 。 故 知 足 之 足 ， 常 足 矣 。 第 四 十 七 章 不 出 户 ， 知 天 下 ﹔ 不 窥 牖 ， 见 天 道 。 其 出 弥 远 ， 其 知 弥 少 。 是 以 圣 人 不 行 而 知 ， 不 见 而 明 ， 不 为 而 成 。 第 四 十 八 章 为 学 日 益 ， 为 道 日 损 。 损 之 又 损 ， 以 至 于 无 为 。 无 为 而 无 不 为 。 取 天 下 常 以 无 事 ， 及 其 有 事 ， 不 足 以 取 天 下 。 第 四 十 九 章 圣 人 常 无 心 ， 以 百 姓 心 为 心 。 善 者 ， 吾 善 之 ﹔ 不 善 者 ， 吾 亦 善 之 ﹔ 德 善 。 信 者 ， 吾 信 之 ﹔ 不 信 者 ， 吾 亦 信 之 ﹔ 德 信 。 圣 人 在 天 下 ， 歙 歙 焉 ， 为 天 下 浑 其 心 ， 百 姓 皆 注 其 耳 目 ， 圣 人 皆 孩 之 。 第 五 十 章 出 生 入 死 。 生 之 徒 ， 十 有 三 ﹔ 死 之 徒 ， 十 有 三 ﹔ 人 之 生 ， 动 之 于 死 地 ， 亦 十 有 三 。 夫 何 故 ，以 其 生 之 厚 。 盖 闻 善 摄 生 者 ， 路 行 不 遇 兕 虎 ， 入 军 不 被 甲 兵 ﹔ 兕 无 所 投 其 角 ， 虎 无 所 用 其 爪 ， 兵 无 所 容 其 刃 。 夫 何 故 ，以 其 无 死 地 。 第 五 十 一 章 道 生 之 ， 德 畜 之 ， 物 形 之 ， 势 成 之 。 是 以 万 物 莫 不 尊 道 而 贵 德 。 道 之 尊 ， 德 之 贵 ， 夫 莫 之 命 而 常 自 然 。 故 道 生 之 ， 德 畜 之 ﹔ 长 之 育 之 ﹔ 成 之 熟 之 ﹔ 养 之 覆 之 。 生 而 不 有 ， 为 而 不 恃 ， 长 而 不 宰 。 是 谓 玄 德 。 第 五 十 二 章 天 下 有 始 ， 以 为 天 下 母 。 既 得 其 母 ， 以 知 其 子 ， 复 守 其 母 ， 没 身 不 殆 。 塞 其 兑 ， 闭 其 门 ， 终 身 不 勤 。 开 其 兑 ， 济 其 事 ， 终 身 不 救 。 见 小 曰 明 ， 守 柔 曰 强 。 用 其 光 ， 复 归 其 明 ， 无 遗 身 殃 ﹔ 是 为 袭 常 。 第 五 十 三 章 使 我 介 然 有 知 ， 行 于 大 道 ， 唯 施 是 畏 。 大 道 甚 夷 ， 而 人 好 径 。 朝 甚 除 ， 田 甚 芜 ， 仓 甚 虚 ﹔ 服 文 采 ， 带 利 剑 ， 厌 饮 食 ， 财 货 有 余 ﹔ 是 为 盗 夸 。 非 道 也 哉 。 第 五 十 四 章 善 建 者 不 拔 ， 善 抱 者 不 脱 ， 子 孙 以 祭 祀 不 辍 。 修 之 于 身 ， 其 德 乃 真 ﹔ 修 之 于 家 ， 其 德 乃 余 ﹔ 修 之 于 乡 ， 其 德 乃 长 ﹔ 修 之 于 邦 ， 其 德 乃 丰 ﹔ 修 之 于 天 下 ， 其 德 乃 普 。 故 以 身 观 身 ，以 家 观 家 ，以 乡 观 乡 ，以 邦 观 邦 ， 以 天 下 观 天 下 。 吾 何 以 知 天 下 然 哉 。 以 此 。 第 五 十 五 章 含 「 德 」 之 厚 ， 比 于 赤 子 。 毒 虫 不 螫 ， 猛 兽 不 据 ， 攫 鸟 不 搏 。 骨 弱 筋 柔 而 握 固 。 未 知 牝 牡 之 合 而 峻 作 ， 精 之 至 也 。 终 日 号 而 不 嗄 ， 和 之 至 也 。 知 和 曰 「 常 」 ，知 常 曰 「 明 」 。 益 生 曰 祥 。 心 使 气 曰 强 。 物 壮 则 老 ， 谓 之 不 道 ， 不 道 早 已 。 第 五 十 六 章 知 者 不 言 ， 言 者 不 知 。 挫 其 锐 ， 解 其 纷 。 和 其 光 ，同 其 尘 ， 是 谓 「 玄 同 」 。 故 不 可 得 而 亲 ， 不 可 得 而 疏 ﹔ 不 可 得 而 利 ， 不 可 得 而 害 ﹔ 不 可 得 而 贵 ， 不 可 得 而 贱 。 故 为 天 下 贵 。 第 五 十 七 章 以 正 治 国 ， 以 奇 用 兵 ， 以 无 事 取 天 下 。 吾 何 以 知 其 然 哉 。 以 此 ： 天 下 多 忌 讳 ， 而 民 弥 贫 ﹔ 人 多 利 器 ， 国 家 滋 昏 ﹔ 人 多 伎 巧 ， 奇 物 滋 起 ﹔ 法 令 滋 彰 ， 盗 贼 多 有 。 故 圣 人 云 ： 「 我 无 为 ， 而 民 自 化 ﹔ 我 好 静 ， 而 民 自 正 ﹔ 我 无 事 ， 而 民 自 富 ﹔ 我 无 欲 ， 而 民 自 朴 。 」 第 五 十 八 章 其 政 闷 闷 ， 其 民 淳 淳 ﹔ 其 政 察 察 ， 其 民 缺 缺 。 祸 兮 福 之 所 倚 ， 福 兮 祸 之 所 伏 。 孰 知 其 极 。 其 无 正 也 。 正 复 为 奇 ， 善 复 为 妖 。 人 之 迷 ， 其 日 固 久 。 是 以 圣 人 方 而 不 割 ， 廉 而 不 刿 ，直 而 不 肆 ， 光 而 不 耀 。 第 五 十 九 章 治 人 事 天 ， 莫 若 啬 。 夫 唯 啬 ， 是 谓 早 服 ﹔ 早 服 谓 之 重 积 德 ﹔ 重 积 德 则 无 不 克 ﹔ 无 不 克 则 莫 知 其 极 ﹔ 莫 知 其 极 ， 可 以 有 国 ﹔ 有 国 之 母 ， 可 以 长 久 ﹔ 是 谓 深 根 固 柢 ， 长 生 久 视 之 道 。 第 六 十 章 治 大 国 ， 若 烹 小 鲜 。 以 道 莅 天 下 ， 其 鬼 不 神 ﹔ 非 其 鬼 不 神 ， 其 神 不 伤 人 ﹔ 非 其 神 不 伤 人 ， 圣 人 亦 不 伤 人 。 夫 两 不 相 伤 ， 故 德 交 归 焉 。 第 六 十 一 章 大 邦 者 下 流 ， 天 下 之 交 ，天 下 之 牝 。 牝 常 以 静 胜 牡 ， 以 静 为 下 。 故 大 邦 以 下 小 邦 ， 则 取 小 邦 ﹔ 小 邦 以 下 大 邦 ， 则 取 大 邦 。 故 或 下 以 取 ， 或 下 而 取 。 大 邦 不 过 欲 兼 畜 人 ， 小 邦 不 过 欲 入 事 人 。 夫 两 者 各 得 所 欲 ， 大 者 宜 为 下 。 第 六 十 二 章 道 者 万 物 之 奥 。 善 人 之 宝 ， 不 善 人 之 所 保 。 美 言 可 以 市 尊 ， 美 行 可 以 加 人 。 人 之 不 善 ， 何 弃 之 有 。 故 立 天 子 ， 置 三 公 ， 虽 有 拱 璧 以 先 驷 马 ，不 如 坐 进 此 道 。 古 之 所 以 贵 此 道 者 何 。 不 曰 ： 求 以 得 ， 有 罪 以 免 邪 。 故 为 天 下 贵 。 第 六 十 三 章 为 无 为 ， 事 无 事 ， 味 无 味 。 图 难 于 其 易 ， 为 大 于 其 细 ﹔ 天 下 难 事 ， 必 作 于 易 ， 天 下 大 事 ， 必 作 于 细 。 是 以 圣 人 终 不 为 大 ， 故 能 成 其 大 。 夫 轻 诺 必 寡 信 ， 多 易 必 多 难 。 是 以 圣 人 犹 难 之 ， 故 终 无 难 矣 。 第 六 十 四 章 其 安 易 持 ， 其 未 兆 易 谋 。 其 脆 易 泮 ， 其 微 易 散 。 为 之 于 未 有 ， 治 之 于 未 乱 。 合 抱 之 木 ， 生 于 毫 末 ﹔ 九 层 之 台 ， 起 于 累 土 ﹔ 千 里 之 行 ， 始 于 足 下。 民 之 从 事 ， 常 于 几 成 而 败 之 。 慎 终 如 始 ， 则 无 败 事 。 第 六 十 五 章 古 之 善 为 道 者 ， 非 以 明 民 ， 将 以 愚 之 。 民 之 难 治 ， 以 其 智 多 。 故 以 智 治 国 ， 国 之 贼 ﹔ 不 以 智 治 国 ， 国 之 福 。 知 此 两 者 亦 稽 式 。 常 知 稽 式 ， 是 谓 「 玄 德 」 。 「 玄 德 」 深 矣 ， 远 矣 ， 与 物 反 矣 ， 然 后 乃 至 大 顺 。 第 六 十 六 章 江 海 之 所 以 能 为 百 谷 王 者 ， 以 其 善 下 之 ， 故 能 为 百 谷 王 。 是 以 圣 人 欲 上 民 ， 必 以 言 下 之 ﹔ 欲 先 民 ， 必 以 身 后 之 。 是 以 圣 人 处 上 而 民 不 重 ， 处 前 而 民 不 害 。 是 以 天 下 乐 推 而 不 厌 。 以 其 不 争 ， 故 天 下 莫 能 与 之 争 。 第 六 十 七 章 天 下 皆 谓 我 道 大 ， 似 不 肖 。 夫 唯 大 ， 故 似 不 肖 。 若 肖 ， 久 矣 其 细 也 夫 。 我 有 三 宝 ， 持 而 保 之 。 一 曰 慈 ，二 曰 俭 ， 三 曰 不 敢 为 天 下 先 。 慈 故 能 勇 ﹔ 俭 故 能 广 ﹔ 不 敢 为 天 下 先 ， 故 能 成 器 长 。 今 舍 慈 且 勇 ﹔ 舍 俭 且 广 ﹔ 舍 后 且 先 ﹔ 死 矣 。 夫 慈 以 战 则 胜 ， 以 守 则 固 。 天 将 救 之 ， 以 慈 卫 之 。 第 六 十 八 章 善 为 士 者 ， 不 武 ﹔ 善 战 者 ， 不 怒 ﹔ 善 胜 敌 者 ， 不 与 ﹔ 善 用 人 者 ， 为 之 下 。 是 谓 不 争 之 德 ， 是 谓 用 人 之 力 ， 是 谓 配 天 古 之 极 。 第 六 十 九 章 用 兵 有 言 ： 「 吾 不 敢 为 主 ， 而 为 客 ﹔ 不 敢 进 寸 ， 而 退 尺 。 」 是 谓 行 无 行 ﹔ 攘 无 臂 ﹔ 扔 无 敌 ﹔ 执 无 兵 。 祸 莫 大 于 轻 敌 ， 轻 敌 几 丧 吾 宝 。 故 抗 兵 相 若 ， 哀 者 胜 矣 。 第 七 十 章 吾 言 甚 易 知 ， 甚 易 行 。 天 下 莫 能 知 ， 莫 能 行 。 言 有 宗 ， 事 有 君 。 夫 唯 无 知 ， 是 以 不 我 知 。 知 我 者 希 ， 则 我 者 贵 。 是 以 圣 人 被 褐 而 怀 玉 。 第 七 十 一 章 知 不 知 ， 尚 矣 ﹔ 不 知 知 ， 病 也 。 圣 人 不 病 ， 以 其 病 病 。 夫 唯 病 病 ， 是 以 不 病 。 第 七 十 二 章 民 不 畏 威 ，则 大 威 至 。 无 狎 其 所 居 ，无 厌 其 所 生 。 夫 唯 不 厌 ，是 以 不 厌 。 是 以 圣 人 自 知 不 自 见 ﹔ 自 爱 不 自 贵 。故 去 彼 取 此 。 第 七 十 三 章 勇 于 敢 则 杀 ， 勇 于 不 敢 则 活 。 此 两 者 ， 或 利 或 害 。 天 之 所 恶 ， 孰 知 其 故 。 天 之 道 ，不 争 而 善 胜 ， 不 言 而 善 应 ，不 召 而 自 来 ， 繟 然 而 善 谋 。 天 网 恢 恢 ， 疏 而 不 失 。 第 七 十 四 章 民 不 畏 死 ， 奈 何 以 死 惧 之 。 若 使 民 常 畏 死 ， 而 为 奇 者 ， 吾 得 执 而 杀 之 ， 孰 敢 。 常 有 司 杀 者 杀 。 夫 代 司 杀 者 杀 ， 是 谓 代 大 匠 斲 ， 夫 代 大 匠 斲 者 ， 希 有 不 伤 其 手 矣 。 第 七 十 五 章 民 之 饥 ， 以 其 上 食 税 之 多 ， 是 以 饥 。 民 之 难 治 ， 以 其 上 之 有 为 ， 是 以 难 治 。 民 之 轻 死 ， 以 其 上 求 生 之 厚 ， 是 以 轻 死 。 夫 唯 无 以 生 为 者 ， 是 贤 于 贵 生 。 第 七 十 六 章 人 之 生 也 柔 弱 ， 其 死 也 坚 强 。 草 木 之 生 也 柔 脆 ， 其 死 也 枯 槁 。 故 坚 强 者 死 之 徒 ， 柔 弱 者 生 之 徒 。 是 以 兵 强 则 灭 ， 木 强 则 折 。 强 大 处 下 ， 柔 弱 处 上 。 第 七 十 七 章 天 之 道 ， 其 犹 张 弓 欤 。 高 者 抑 之 ， 下 者 举 之 ﹔ 有 余 者 损 之 ， 不 足 者 补 之 。 天 之 道 ， 损 有 余 而 补 不 足 。 人 之 道 ， 则 不 然 ， 损 不 足 以 奉 有 余 。 孰 能 有 余 以 奉 天 下 ， 唯 有 道 者 。 是 以 圣 人 为 而 不 恃 ， 功 成 而 不 处 ， 其 不 欲 见 贤 。 第 七 十 八 章 天 下 莫 柔 弱 于 水 ， 而 攻 坚 强 者 莫 之 能 胜 ， 以 其 无 以 易 之 。 弱 之 胜 强 ， 柔 之 胜 刚 ， 天 下 莫 不 知 ， 莫 能 行 。 是 以 圣 人 云 ： 「 受 国 之 垢 ， 是 谓 社 稷 主 ﹔ 受 国 不 祥 ， 是 为 天 下 王 。 」 正 言 若 反 。 第 七 十 九 章 和 大 怨 ， 必 有 余 怨 ﹔ 报 怨 以 德 ， 安 可 以 为 善 。 是 以 圣 人 执 左 契 ， 而 不 责 于 人 。 有 德 司 契 ， 无 德 司 彻 。 天 道 无 亲 ， 常 与 善 人 。 第 八 十 章 小 国 寡 民 。 使 有 什 伯 之 器 而 不 用 ﹔ 使 民 重 死 而 不 远 徙 。 虽 有 舟 舆 ， 无 所 乘 之 ， 虽 有 甲 兵 ， 无 所 陈 之 。 使 民 复 结 绳 而 用 之 。 甘 其 食 ， 美 其 服 ， 安 其 居 ， 乐 其 俗 。 邻 国 相 望 ， 鸡 犬 之 声 相 闻 ， 民 至 老 死 ， 不 相 往 来 。 第 八 十 一 章 信 言 不 美 ， 美 言 不 信 。 善 者 不 辩 ， 辩 者 不 善 。 知 者 不 博 ， 博 者 不 知 。 圣 人 不 积 ， 既 以 为 人 己 愈 有 ， 既 以 与 人 己 愈 多 。 天 之 道 ， 利 而 不 害 ﹔ 圣 人 之 道 ， 为 而 不 争]]></content>
      <categories>
        <category>道</category>
      </categories>
      <tags>
        <tag>道</tag>
        <tag>道德经</tag>
        <tag>老子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[般若波罗蜜多心经]]></title>
    <url>%2F2018%2F12%2F14%2F%E8%88%AC%E8%8B%A5%E6%B3%A2%E7%BD%97%E8%9C%9C%E5%A4%9A%E5%BF%83%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。 舍利子，色不异空，空不异色，色即是空，空即是色，受想行识亦复如是。 舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界乃至无意识界，无无明亦无无明尽，乃至无老死，亦无老死尽，无苦集灭道，无智亦无得。 以无所得故，菩提萨埵，依般若波罗蜜多故，心无挂碍；无挂碍故，无有恐怖，远离颠倒梦想，究竟涅槃。 三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。 故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。 故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。]]></content>
      <categories>
        <category>佛</category>
      </categories>
      <tags>
        <tag>佛</tag>
        <tag>心经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos安装NFS]]></title>
    <url>%2F2018%2F12%2F14%2Fcentos%E5%AE%89%E8%A3%85NFS%2F</url>
    <content type="text"><![CDATA[服务器端安装关闭防火墙$ systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service 安装配置nfs$ yum -y install nfs-utils rpcbind$ mkdir -p /data/k8s$ chmod 755 /data/k8s/ nfs 的默认配置文件在 /etc/exports 文件下，在该文件中添加下面的配置信息$ vi /etc/exports/data/k8s *(rw,sync,no_root_squash) 配置说明：/data/k8s：是共享的数据目录*：表示任何人都有权限连接，当然也可以是一个网段，一个 IP，也可以是域名rw：读写的权限sync：表示文件同时写入硬盘和内存no_root_squash：当登录 NFS 主机使用共享目录的使用者是 root 时，其权限将被转换成为匿名使用者，通常它的 UID 与 GID，都会变成 nobody 身份3、启动nfs# 启动服务 nfs 需要向 rpc 注册，rpc 一旦重启了，注册的文件都会丢失，向他注册的服务都需要重启# 注意启动顺序，先启动 rpcbind $ systemctl start rpcbind.service &amp;&amp; systemctl enable rpcbind$ systemctl status rpcbind● rpcbind.service - RPC bind service Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled) Active: active (running) since Mon 2018-07-30 15:56:09 CST; 12s ago Main PID: 24517 (rpcbind) CGroup: /system.slice/rpcbind.service └─24517 /sbin/rpcbind -w Jul 30 15:56:09 lab1 systemd[1]: Starting RPC bind service…Jul 30 15:56:09 lab1 systemd[1]: Started RPC bind service. $ systemctl start nfs.service &amp;&amp; systemctl enable nfs$ systemctl status nfs● nfs-server.service - NFS server and services Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled) Drop-In: /run/systemd/generator/nfs-server.service.d └─order-with-mounts.conf Active: active (exited) since Mon 2018-07-30 15:56:46 CST; 11s ago Main PID: 24742 (code=exited, status=0/SUCCESS) CGroup: /system.slice/nfs-server.service Jul 30 15:56:46 lab1 systemd[1]: Starting NFS server and services…Jul 30 15:56:46 lab1 systemd[1]: Started NFS server and services. 客户端安装关闭防火墙$ systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service安装nfs$ yum -y install nfs-utils rpcbind 先启动 rpc、然后启动 nfs$ systemctl start rpcbind.service &amp;&amp; systemctl enable rpcbind.service $ systemctl start nfs.service &amp;&amp; systemctl enable nfs.service 验证、测试确认服务端启动$ rpcinfo -p|grep nfs 100003 3 tcp 2049 nfs 100003 4 tcp 2049 nfs 100227 3 tcp 2049 nfs_acl 100003 3 udp 2049 nfs 100003 4 udp 2049 nfs 100227 3 udp 2049 nfs_acl 服务端查看具体目录挂载权限$ cat /var/lib/nfs/etab/data/k8s *(rw,sync,wdelay,hide,nocrossmnt,secure,no_root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,secure,no_root_squash,no_all_squash) 客户端挂载测试查看nfs 是否有共享目录$ showmount -e 11.11.11.111Export list for 11.11.11.111:/data/k8s * 客户端上新建目录$ mkdir -p /root/zhang $ mount -t nfs 11.11.11.111:/data/k8s /root/zhang$ touch /root/zhang/test.txt 在服务器端查看$ ls -ls /data/k8s/total 00 -rw-r–r–. 1 root root 0 Jul 30 16:09 test.txt参考地址：https://blog.qikqiak.com/post/kubernetes-persistent-volume1/]]></content>
      <categories>
        <category>存储</category>
      </categories>
      <tags>
        <tag>NFS</tag>
        <tag>存储</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7使用kubeadm安装k8s-1.11版本多主高可用]]></title>
    <url>%2F2018%2F12%2F14%2Fcentos7%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85k8s-1-11%E7%89%88%E6%9C%AC%E5%A4%9A%E4%B8%BB%E9%AB%98%E5%8F%AF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[实验环境说明实验架构图lab1: etcd master haproxy keepalived 11.11.11.111lab2: etcd master haproxy keepalived 11.11.11.112lab3: etcd master haproxy keepalived 11.11.11.113lab4: node 11.11.11.114lab5: node 11.11.11.115lab6: node 11.11.11.116 vip(loadblancer ip): 11.11.11.110复制代码实验使用的Vagrantfile# -- mode: ruby --# vi: set ft=ruby : ENV[“LC_ALL”] = “en_US.UTF-8” Vagrant.configure(“2”) do |config|​ (1..6).each do |i|​ config.vm.define “lab#{i}” do |node|​ node.vm.box = “centos-7.4-docker-17”​ node.ssh.insert_key = false​ node.vm.hostname = “lab#{i}”​ node.vm.network “private_network”, ip: “11.11.11.11#{i}”​ node.vm.provision “shell”,​ inline: “echo hello from node #{i}”​ node.vm.provider “virtualbox” do |v|​ v.cpus = 2​ v.customize [“modifyvm”, :id, “–name”, “lab#{i}”, “–memory”, “2048”]​ end​ end​ endend 安装配置dockerv1.11.0版本推荐使用docker v17.03, v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。 测试发现17.09无法正常使用，不能使用资源限制(内存CPU)如下操作在所有节点操作 安装docker# 卸载安装指定版本docker-ceyum remove -y docker-ce docker-ce-selinux container-selinuxyum install -y –setopt=obsoletes=0 \docker-ce-17.03.1.ce-1.el7.centos \docker-ce-selinux-17.03.1.ce-1.el7.centos 启动dockersystemctl enable docker &amp;&amp; systemctl restart docker 安装 kubeadm, kubelet 和 kubectl 如下操作在所有节点操作## 使用阿里镜像安装# 配置源cat &lt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF# 安装yum install -y kubelet kubeadm kubectl ipvsadm## 配置系统相关参数# 临时禁用selinux# 永久关闭 修改/etc/sysconfig/selinux文件设置sed -i ‘s/SELINUX=permissive/SELINUX=disabled/‘ /etc/sysconfig/selinuxsetenforce 0# 临时关闭swap# 永久关闭 注释/etc/fstab文件里swap相关的行swapoff -a# 开启forward# Docker从1.13版本开始调整了默认的防火墙规则# 禁用了iptables filter表中FOWARD链# 这样会引起Kubernetes集群中跨Node的Pod无法通信iptables -P FORWARD ACCEPT# 配置转发相关参数，否则可能会出错cat &lt; /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1vm.swappiness=0EOFsysctl –system# 加载ipvs相关内核模块# 如果重新开机，需要重新加载modprobe ip_vsmodprobe ip_vs_rrmodprobe ip_vs_wrrmodprobe ip_vs_shmodprobe nf_conntrack_ipv4lsmod | grep ip_vs## 配置hosts解析 如下操作在所有节点操作cat &gt;&gt;/etc/hosts&lt;&lt;EOF11.11.11.111 lab111.11.11.112 lab211.11.11.113 lab311.11.11.114 lab411.11.11.115 lab511.11.11.116 lab6EOF# 配置haproxy代理和keepalived 如下操作在节点lab1,lab2,lab3操作# 拉取haproxy镜像docker pull haproxy:1.7.8-alpinemkdir /etc/haproxycat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOFglobal log 127.0.0.1 local0 err maxconn 50000 uid 99 gid 99 #daemon nbproc 1 pidfile haproxy.piddefaults mode http log 127.0.0.1 local0 err maxconn 50000 retries 3 timeout connect 5s timeout client 30s timeout server 30s timeout check 2slisten admin_stats mode http bind 0.0.0.0:1080 log 127.0.0.1 local0 err stats refresh 30s stats uri /haproxy-status stats realm Haproxy\ Statistics stats auth will:will stats hide-version stats admin if TRUEfrontend k8s-https bind 0.0.0.0:8443 mode tcp #maxconn 50000 default_backend k8s-httpsbackend k8s-https mode tcp balance roundrobin server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3 server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3 server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3EOF# 启动haproxydocker run -d –name my-haproxy \-v /etc/haproxy:/usr/local/etc/haproxy:ro \-p 8443:8443 \-p 1080:1080 \–restart always \haproxy:1.7.8-alpine# 查看日志docker logs my-haproxy# 浏览器查看状态http://11.11.11.111:1080/haproxy-statushttp://11.11.11.112:1080/haproxy-status# 拉取keepalived镜像docker pull osixia/keepalived:1.4.4# 启动# 载入内核相关模块lsmod | grep ip_vsmodprobe ip_vs# 启动keepalived# eth1为本次实验11.11.11.0/24网段的所在网卡docker run –net=host –cap-add=NET_ADMIN \-e KEEPALIVED_INTERFACE=eth1 \-e KEEPALIVED_VIRTUAL_IPS=”#PYTHON2BASH:[‘11.11.11.110’]” \-e KEEPALIVED_UNICAST_PEERS=”#PYTHON2BASH:[‘11.11.11.111’,’11.11.11.112’,’11.11.11.113’]” \-e KEEPALIVED_PASSWORD=hello \–name k8s-keepalived \–restart always \-d osixia/keepalived:1.4.4# 查看日志# 会看到两个成为backup 一个成为masterdocker logs k8s-keepalived# 此时会配置 11.11.11.110 到其中一台机器# ping测试ping -c4 11.11.11.110# 如果失败后清理后，重新实验docker rm -f k8s-keepalivedip a del 11.11.11.110/32 dev eth1# 配置启动kubelet 如下操作在所有节点操作# 配置kubelet使用国内pause镜像# 配置kubelet的cgroups# 获取docker的cgroupsDOCKER_CGROUPS=$(docker info | grep ‘Cgroup’ | cut -d’ ‘ -f3)echo $DOCKER_CGROUPScat &gt;/etc/sysconfig/kubelet&lt;&lt;EOFKUBELET_EXTRA_ARGS=”–cgroup-driver=$DOCKER_CGROUPS –pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1”EOF# 启动systemctl daemon-reloadsystemctl enable kubelet &amp;&amp; systemctl restart kubelet# 配置master## 配置第一个master节点 如下操作在lab1节点操作# 1.11 版本 centos 下使用 ipvs 模式会出问题# 参考 https://github.com/kubernetes/kubernetes/issues/65461# 生成配置文件CP0_IP=”11.11.11.111”CP0_HOSTNAME=”lab1”cat &gt;kubeadm-master.config&lt;&lt;EOFapiVersion: kubeadm.k8s.io/v1alpha2kind: MasterConfigurationkubernetesVersion: v1.11.0imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containersapiServerCertSANs:- “lab1”- “lab2”- “lab3”- “11.11.11.111”- “11.11.11.112”- “11.11.11.113”- “11.11.11.110”- “127.0.0.1”api: advertiseAddress: $CP0_IP controlPlaneEndpoint: 11.11.11.110:8443etcd: local:​ extraArgs:​ listen-client-urls: “https://127.0.0.1:2379,https://$CP0_IP:2379&quot;​ advertise-client-urls: “https://$CP0_IP:2379”​ listen-peer-urls: “https://$CP0_IP:2380”​ initial-advertise-peer-urls: “https://$CP0_IP:2380”​ initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380”​ serverCertSANs:​ - $CP0_HOSTNAME​ - $CP0_IP​ peerCertSANs:​ - $CP0_HOSTNAME​ - $CP0_IPcontrollerManagerExtraArgs: node-monitor-grace-period: 10s pod-eviction-timeout: 10snetworking: podSubnet: 10.244.0.0/16kubeProxy: config:​ # mode: ipvs​ mode: iptablesEOF# 提前拉取镜像# 如果执行失败 可以多次执行kubeadm config images pull –config kubeadm-master.config# 初始化# 注意保存返回的 join 命令kubeadm init –config kubeadm-master.config# 打包ca相关文件上传至其他master节点# 前提是lab2,lab3已设置免密ssh，如何设置免密ssh,请查看相关文档cd /etc/kubernetes &amp;&amp; tar cvzf k8s-key.tgz admin.conf pki/ca. pki/sa. pki/front-proxy-ca. pki/etcd/ca.scp k8s-key.tgz lab2:~/scp k8s-key.tgz lab3:~/ssh lab2 ‘tar xf k8s-key.tgz -C /etc/kubernetes/‘ssh lab3 ‘tar xf k8s-key.tgz -C /etc/kubernetes/‘## 配置第二个master节点如下操作在 lab2节点操作# 1.11 版本 centos 下使用 ipvs 模式会出问题# 参考 https://github.com/kubernetes/kubernetes/issues/65461# 生成配置文件CP0_IP=”11.11.11.111”CP0_HOSTNAME=”lab1”CP1_IP=”11.11.11.112”CP1_HOSTNAME=”lab2”cat &gt;kubeadm-master.config&lt;&lt;EOFapiVersion: kubeadm.k8s.io/v1alpha2kind: MasterConfigurationkubernetesVersion: v1.11.0imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containersapiServerCertSANs:- “lab1”- “lab2”- “lab3”- “11.11.11.111”- “11.11.11.112”- “11.11.11.113”- “11.11.11.110”- “127.0.0.1”api: advertiseAddress: $CP1_IP controlPlaneEndpoint: 11.11.11.110:8443etcd: local:​ extraArgs:​ listen-client-urls: “https://127.0.0.1:2379,https://$CP1_IP:2379&quot;​ advertise-client-urls: “https://$CP1_IP:2379”​ listen-peer-urls: “https://$CP1_IP:2380”​ initial-advertise-peer-urls: “https://$CP1_IP:2380”​ initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380”​ initial-cluster-state: existing​ serverCertSANs:​ - $CP1_HOSTNAME​ - $CP1_IP​ peerCertSANs:​ - $CP1_HOSTNAME​ - $CP1_IPcontrollerManagerExtraArgs: node-monitor-grace-period: 10s pod-eviction-timeout: 10snetworking: podSubnet: 10.244.0.0/16kubeProxy: config:​ # mode: ipvs​ mode: iptablesEOF# 配置kubeletkubeadm alpha phase certs all –config kubeadm-master.configkubeadm alpha phase kubelet config write-to-disk –config kubeadm-master.configkubeadm alpha phase kubelet write-env-file –config kubeadm-master.configkubeadm alpha phase kubeconfig kubelet –config kubeadm-master.configsystemctl restart kubelet# 添加etcd到集群中CP0_IP=”11.11.11.111”CP0_HOSTNAME=”lab1”CP1_IP=”11.11.11.112”CP1_HOSTNAME=”lab2”KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-${CP0_HOSTNAME} – etcdctl –ca-file /etc/kubernetes/pki/etcd/ca.crt –cert-file /etc/kubernetes/pki/etcd/peer.crt –key-file /etc/kubernetes/pki/etcd/peer.key –endpoints=https://${CP0_IP}:2379 member add ${CP1_HOSTNAME} https://${CP1_IP}:2380kubeadm alpha phase etcd local –config kubeadm-master.config# 提前拉取镜像# 如果执行失败 可以多次执行kubeadm config images pull –config kubeadm-master.config# 部署kubeadm alpha phase kubeconfig all –config kubeadm-master.configkubeadm alpha phase controlplane all –config kubeadm-master.configkubeadm alpha phase mark-master –config kubeadm-master.config## 配置第三个master节点如下操作在 lab3节点操作# 1.11 版本 centos 下使用 ipvs 模式会出问题# 参考 https://github.com/kubernetes/kubernetes/issues/65461# 生成配置文件CP0_IP=”11.11.11.111”CP0_HOSTNAME=”lab1”CP1_IP=”11.11.11.112”CP1_HOSTNAME=”lab2”CP2_IP=”11.11.11.113”CP2_HOSTNAME=”lab3”cat &gt;kubeadm-master.config&lt;&lt;EOFapiVersion: kubeadm.k8s.io/v1alpha2kind: MasterConfigurationkubernetesVersion: v1.11.0imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containersapiServerCertSANs:- “lab1”- “lab2”- “lab3”- “11.11.11.111”- “11.11.11.112”- “11.11.11.113”- “11.11.11.110”- “127.0.0.1”api: advertiseAddress: $CP2_IP controlPlaneEndpoint: 11.11.11.110:8443etcd: local:​ extraArgs:​ listen-client-urls: “https://127.0.0.1:2379,https://$CP2_IP:2379&quot;​ advertise-client-urls: “https://$CP2_IP:2379”​ listen-peer-urls: “https://$CP2_IP:2380”​ initial-advertise-peer-urls: “https://$CP2_IP:2380”​ initial-cluster: “$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380,$CP2_HOSTNAME=https://$CP2_IP:2380”​ initial-cluster-state: existing​ serverCertSANs:​ - $CP2_HOSTNAME​ - $CP2_IP​ peerCertSANs:​ - $CP2_HOSTNAME​ - $CP2_IPcontrollerManagerExtraArgs: node-monitor-grace-period: 10s pod-eviction-timeout: 10snetworking: podSubnet: 10.244.0.0/16kubeProxy: config:​ # mode: ipvs​ mode: iptablesEOF# 配置kubeletkubeadm alpha phase certs all –config kubeadm-master.configkubeadm alpha phase kubelet config write-to-disk –config kubeadm-master.configkubeadm alpha phase kubelet write-env-file –config kubeadm-master.configkubeadm alpha phase kubeconfig kubelet –config kubeadm-master.configsystemctl restart kubelet# 添加etcd到集群中CP0_IP=”11.11.11.111”CP0_HOSTNAME=”lab1”CP2_IP=”11.11.11.113”CP2_HOSTNAME=”lab3”KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-${CP0_HOSTNAME} – etcdctl –ca-file /etc/kubernetes/pki/etcd/ca.crt –cert-file /etc/kubernetes/pki/etcd/peer.crt –key-file /etc/kubernetes/pki/etcd/peer.key –endpoints=https://${CP0_IP}:2379 member add ${CP2_HOSTNAME} https://${CP2_IP}:2380kubeadm alpha phase etcd local –config kubeadm-master.config# 提前拉取镜像# 如果执行失败 可以多次执行kubeadm config images pull –config kubeadm-master.config# 部署kubeadm alpha phase kubeconfig all –config kubeadm-master.configkubeadm alpha phase controlplane all –config kubeadm-master.configkubeadm alpha phase mark-master –config kubeadm-master.config# 配置使用kubectl如下操作在任意master节点操作rm -rf $HOME/.kubemkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config# 查看node节点kubectl get nodes# 只有网络插件也安装配置完成之后，才能会显示为ready状态# 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件# 如 dashboard, heapster, efk等kubectl taint nodes –all node-role.kubernetes.io/master-# 配置使用网络插件如下操作在任意 master节点操作# 下载配置mkdir flannel &amp;&amp; cd flannelwget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml# 修改配置# 此处的ip配置要与上面kubeadm的pod-network一致 net-conf.json: |​ {​ “Network”: “10.244.0.0/16”,​ “Backend”: {​ “Type”: “vxlan”​ }​ }# 修改镜像image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64docker pull registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64# 修改image为registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64# 如果Node有多个网卡的话，参考flannel issues 39701，# https://github.com/kubernetes/kubernetes/issues/39701# 目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，# 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，# flanneld启动参数加上–iface=​ containers:​ - name: kube-flannel​ image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64​ command:​ - /opt/bin/flanneld​ args:​ - –ip-masq​ - –kube-subnet-mgr​ - –iface=eth1# 启动kubectl apply -f kube-flannel.yml# 查看kubectl get pods –namespace kube-systemkubectl get svc –namespace kube-system# 配置node节点加入集群如下操作在所有 node节点操作# 此命令为初始化master成功后返回的结果kubeadm join 11.11.11.110:8443 –token yzb7v7.dy40mhlljt1d48i9 –discovery-token-ca-cert-hash sha256:61ec309e6f942305006e6622dcadedcc64420e361231eff23cb535a183c0e77a# 常见错误## coredns不正常ubectl get podskubectl get svckubectl describe svc example-service查看日志# 解决方案# https://github.com/rancher/rancher/issues/13310# edit /etc/sysconfig/docker and remove –selinux-enabled from the OPTIONS variable (or –selinux-enabled=false)在所有节点操作！重启dockersystemctl restart docker 基础测试测试容器间的通信和DNS配置好网络之后，kubeadm会自动部署coredns如下测试可以在配置kubectl的节点上操作 启动kubectl run nginx –replicas=2 –image=nginx:alpine –port=80kubectl expose deployment nginx –type=NodePort –name=example-service-nodeportkubectl expose deployment nginx –name=example-service 查看状态kubectl get deploykubectl get podskubectl get svckubectl describe svc example-service DNS解析kubectl run curl –image=radial/busyboxplus:curl -i –ttynslookup kubernetesnslookup example-servicecurl example-service 访问测试# 10.96.59.56 为查看svc时获取到的clusteripcurl “10.96.59.56:80” # 32223 为查看svc时获取到的 nodeporthttp://11.11.11.112:32223/http://11.11.11.113:32223/ 清理删除kubectl delete svc example-service example-service-nodeportkubectl delete deploy nginx curl 高可用测试关闭任一master节点测试集群是能否正常执行上一步的基础测试，查看相关信息，不能同时关闭两个节点，因为3个节点组成的etcd集群，最多只能有一个当机。 # 查看组件状态kubectl get pod –all-namespaces -o widekubectl get pod –all-namespaces -o wide | grep lab1kubectl get pod –all-namespaces -o wide | grep lab2kubectl get pod –all-namespaces -o wide | grep lab3kubectl get nodes -o widekubectl get deploykubectl get podskubectl get svc # 访问测试CURL_POD=$(kubectl get pods | grep curl | grep Running | cut -d ‘ ‘ -f1)kubectl exec -ti $CURL_POD – sh –ttynslookup kubernetesnslookup example-servicecurl example-service 小技巧忘记初始master节点时的node节点加入集群命令怎么办 # 简单方法kubeadm token create –print-join-command # 第二种方法token=$(kubeadm token generate)kubeadm token create $token –print-join-command –ttl=0]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>Centos7</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7使用kubeadm安装k8s-1.11版本]]></title>
    <url>%2F2018%2F12%2F14%2Fcentos7%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85k8s-1-11%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[官方地址：https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/ https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/ 实验架构：lab1: master 11.11.11.111lab2: node 11.11.11.112lab3: node 11.11.11.113 #cat /etc/redhat-releaseCentOS Linux release 7.4.1708 (Core) 如下操作在所有节点操作：安装 kubeadm, kubelet 和 kubectl配置源cat &lt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF 安装yum install -y kubelet kubeadm kubectl ipvsadm 配置系统相关参数临时禁用selinux永久关闭 修改/etc/sysconfig/selinux文件设置sed -i ‘s/SELINUX=permissive/SELINUX=disabled/‘ /etc/sysconfig/selinuxsetenforce 0 临时关闭swap永久关闭 注释/etc/fstab文件里swap相关的行swapoff -a 开启forwardDocker从1.13版本开始调整了默认的防火墙规则禁用了iptables filter表中FOWARD链这样会引起Kubernetes集群中跨Node的Pod无法通信 iptables -P FORWARD ACCEPT 配置转发相关参数，否则可能会出错cat &lt; /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1vm.swappiness=0EOFsysctl –system 加载ipvs相关内核模块如果重新开机，需要重新加载modprobe ip_vsmodprobe ip_vs_rrmodprobe ip_vs_wrrmodprobe ip_vs_shmodprobe nf_conntrack_ipv4lsmod | grep ip_vs 配置启动kubelet配置kubelet使用国内pause镜像配置kubelet的cgroups获取docker的cgroupsDOCKER_CGROUPS=$(docker info | grep ‘Cgroup’ | cut -d’ ‘ -f3)echo $DOCKER_CGROUPScat &gt;/etc/sysconfig/kubelet&lt;&lt;EOFKUBELET_EXTRA_ARGS=”–cgroup-driver=$DOCKER_CGROUPS –pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1”EOF 启动systemctl daemon-reloadsystemctl enable kubelet &amp;&amp; systemctl start kubelet 如下操作在master节点操作配置master节点1.11 版本 centos 下使用 ipvs 模式会出问题参考 https://github.com/kubernetes/kubernetes/issues/65461 生成配置文件cat &gt;kubeadm-master.config&lt;&lt;EOFapiVersion: kubeadm.k8s.io/v1alpha2kind: MasterConfigurationkubernetesVersion: v1.11.0imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containersapi: advertiseAddress: 11.11.11.111 controllerManagerExtraArgs: node-monitor-grace-period: 10s pod-eviction-timeout: 10s networking: podSubnet: 10.244.0.0/16 kubeProxy: config:​ # mode: ipvs​ mode: iptablesEOF 提前拉取镜像如果执行失败 可以多次执行kubeadm config images pull –config kubeadm-master.config 初始化kubeadm init –config kubeadm-master.config 配置使用kubectlrm -rf $HOME/.kubemkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 查看node节点kubectl get nodes 只有网络插件也安装配置完成之后，才能会显示为ready状态设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件如 dashboard, heapster, efk等kubectl taint nodes –all node-role.kubernetes.io/master- 配置使用网络插件下载配置mkdir flannel &amp;&amp; cd flannelwget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml 修改配置此处的ip配置要与上面kubeadm的pod-network一致 net-conf.json: |​ {​ “Network”: “10.244.0.0/16”,​ “Backend”: {​ “Type”: “vxlan”​ }​ } 修改镜像image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64 docker registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64 如果Node有多个网卡的话，参考flannel issues 39701，https://github.com/kubernetes/kubernetes/issues/39701目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，flanneld启动参数加上–iface=​ containers:​ - name: kube-flannel​ image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64​ command:​ - /opt/bin/flanneld​ args:​ - –ip-masq​ - –kube-subnet-mgr​ - –iface=eth1 启动kubectl apply -f kube-flannel.yml 查看kubectl get pods –namespace kube-systemkubectl get svc –namespace kube-system 如下操作在Node节点操作配置node节点加入集群此命令为初始化master成功后返回的结果kubeadm join 11.11.11.111:6443 –token ocj4qp.qzshbzjpv095e418 –discovery-token-ca-cert-hash sha256:9ea06d48a41289b538aadb2103bbe794b3d2cb70740e522bd97ac6ef129e11e6 测试kubectl run nginx –replicas=2 –image=nginx:alpine –port=80kubectl expose deployment nginx –type=NodePort –name=example-service-nodeportkubectl expose deployment nginx –name=example-service kubectl get deploykubectl get podskubectl get svckubectl describe svc example-service kubectl run curl –image=radial/busyboxplus:curl -i –ttynslookup kubernetesnslookup example-servicecurl example-service 10.96.100.22 为查看svc时获取到的clusteripcurl “10.96.100.22” 32223 为查看svc时获取到的 nodeporthttp://11.11.11.112:32058/http://11.11.11.113:32058/ 清理删除kubectl delete svc example-service example-service-nodeportkubectl delete deploy nginx curl 小技巧忘记初始master节点时的node节点加入集群命令怎么办简单方法kubeadm token create –print-join-command 第二种方法token=$(kubeadm token generate)kubeadm token create $token –print-join-command –ttl=0 安装dashboardwget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml 将Service改成NodePort类型……spec: type: NodePort ports:​ - port: 443​ targetPort: 8443 selector:​ k8s-app: kubernetes-dashboard…… 将镜像修改 image: registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3 docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3 docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3 k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3 $ kubectl create -f kubernetes-dashboard.yaml我们创建一个admin用户并授予admin 角色绑定，使用下面的yaml文件创建admin用户并赋予他管理员权限，然后就可以通过token 登陆dashbaord，这种认证方式本质实际上是通过Service Account 的身份认证加上Bearer token请求 API server 的方式实现，参考 Kubernetes 中的认证。生成tokenhttps://blog.qikqiak.com/post/update-kubernetes-dashboard-more-secure/ $ cat &gt; admin.yaml&lt;&lt;EOFkind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: admin annotations:​ rbac.authorization.kubernetes.io/autoupdate: “true”roleRef: kind: ClusterRole name: cluster-admin apiGroup: rbac.authorization.k8s.iosubjects: kind: ServiceAccountname: adminnamespace: kube-system apiVersion: v1kind: ServiceAccountmetadata: name: admin namespace: kube-system labels:​ kubernetes.io/cluster-service: “true”​ addonmanager.kubernetes.io/mode: ReconcileEOF $ kubectl create -f admin.yaml 获取token第一种方法$ kubectl get secret -n kube-system|grep admin-tokenadmin-token-gtzqz kubernetes.io/service-account-token 3 14s$ kubectl get secret admin-token-d5jsg -o jsonpath={.data.token} -n kube-system |base64 -d会生成一串很长的base64后的字符串 第二种方法$ kubectl -n kube-system describe secret kubectl -n kube-system get secret|grep admin-token|cut -d &quot; &quot; -f1|grep “token:”|tr -s “ “|cut -d “ “ -f2 安装所需镜像master节点所需镜像registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.11.0registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.11.0registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.11.0registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.18registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3 node节点所需镜像docker pull registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64 &amp;&amp; \docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0 &amp;&amp; \docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 &amp;&amp; \docker pull quay.io/coreos/flannel:v0.10.0-arm &amp;&amp; \docker pull quay.io/coreos/flannel:v0.10.0-ppc64le &amp;&amp; \docker pull quay.io/coreos/flannel:v0.10.0-s390x 相关配置文件查看kubeadm配置$ kubeadm config view /etc/kubernetes/admin.conf/etc/kubernetes/kubelet.conf/etc/kubernetes/controller-manager.conf/etc/kubernetes/scheduler.conf 排错coredns不正常，参考：https://medium.com/@joatmon08/playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706发现coredns不正常 $ kubectl get pod –all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEblog mysql-deploy-88dffb7cf-7lsf4 1/1 Running 0 24mblog wordpress-deploy-66bcc48bdb-5vgmv 0/1 Init:0/1 0 24mdefault curl-87b54756-6hxk6 1/1 Running 0 3hdefault nginx-5dbb4c75cd-5rkhg 1/1 Running 0 4hdefault nginx-5dbb4c75cd-mcbdm 1/1 Running 0 4hkube-system coredns-777d78ff6f-6l57g 0/1 CrashLoopBackOff 76 6hkube-system coredns-777d78ff6f-pzjhs 0/1 CrashLoopBackOff 76 6hkube-system etcd-lab1 1/1 Running 0 7hkube-system kube-apiserver-lab1 1/1 Running 0 7hkube-system kube-controller-manager-lab1 1/1 Running 0 7hkube-system kube-flannel-ds-hlmjr 1/1 Running 0 6hkube-system kube-flannel-ds-ksk79 1/1 Running 0 7hkube-system kube-flannel-ds-nvd8g 1/1 Running 0 6hkube-system kube-proxy-glpgs 1/1 Running 0 7hkube-system kube-proxy-nnb2n 1/1 Running 0 7hkube-system kube-proxy-pfxrn 1/1 Running 0 6hkube-system kube-scheduler-lab1 1/1 Running 0 7hkube-system kubernetes-dashboard-754f4d5f69-t7mcl 1/1 Running 0 6h查看日志，显示报错$ kubectl logs coredns-777d78ff6f-6l57g -n kube-systemError from server (NotFound): the server could not find the requested resource ( pods/log coredns-777d78ff6f-6l57g)$ kubectl get nodes lab2 -o yamlapiVersion: v1kind: Nodemetadata: annotations:​ flannel.alpha.coreos.com/backend-data: ‘{“VtepMAC”:”fe:28:b1:8d:81:ce”}’​ flannel.alpha.coreos.com/backend-type: vxlan​ flannel.alpha.coreos.com/kube-subnet-manager: “true”​ flannel.alpha.coreos.com/public-ip: 10.0.2.15​ kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock​ node.alpha.kubernetes.io/ttl: “0”​ volumes.kubernetes.io/controller-managed-attach-detach: “true” creationTimestamp: 2018-07-30T02:24:33Z labels:​ beta.kubernetes.io/arch: amd64​ beta.kubernetes.io/os: linux​ kubernetes.io/hostname: lab2 name: lab2 resourceVersion: “41316” selfLink: /api/v1/nodes/lab2 uid: b2481ea3-939f-11e8-93c1-525400ad3b43spec: podCIDR: 10.244.1.0/24status: addresses: address: 10.0.2.15type: InternalIP address: lab2type: Hostnameallocatable:cpu: “2”ephemeral-storage: “36190907537”hugepages-2Mi: “0”memory: 1780976Kipods: “110”capacity:cpu: “2”ephemeral-storage: 39269648Kihugepages-2Mi: “0”memory: 1883376Kipods: “110”conditions: lastHeartbeatTime: 2018-07-30T09:30:54ZlastTransitionTime: 2018-07-30T09:13:40Zmessage: kubelet has sufficient disk space availablereason: KubeletHasSufficientDiskstatus: “False”type: OutOfDisk lastHeartbeatTime: 2018-07-30T09:30:54ZlastTransitionTime: 2018-07-30T09:13:40Zmessage: kubelet has sufficient memory availablereason: KubeletHasSufficientMemorystatus: “False”type: MemoryPressure lastHeartbeatTime: 2018-07-30T09:30:54ZlastTransitionTime: 2018-07-30T09:13:40Zmessage: kubelet has no disk pressurereason: KubeletHasNoDiskPressurestatus: “False”type: DiskPressure lastHeartbeatTime: 2018-07-30T09:30:54ZlastTransitionTime: 2018-07-30T02:24:33Zmessage: kubelet has sufficient PID availablereason: KubeletHasSufficientPIDstatus: “False”type: PIDPressure lastHeartbeatTime: 2018-07-30T09:30:54ZlastTransitionTime: 2018-07-30T09:13:40Zmessage: kubelet is posting ready statusreason: KubeletReadystatus: “True”type: ReadydaemonEndpoints:kubeletEndpoint: Port: 10250images: names: docker.io/wordpress@sha256:7f8aa332e6c905d1cb6efc6632801e4c6b52d9a91e41a25a1de7668fb6f1a6da docker.io/wordpress:latestsizeBytes: 408103498 names: docker.io/mysql@sha256:aaba540cdd9313645d892f4f20573e8b42b30e5be71c054b7befed2f7da5f85b docker.io/mysql:5.7sizeBytes: 371941626 names: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64@sha256:4be24eb360668859f75b85829f99e006639683606d0fe077e47f4dea292439cd registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.0sizeBytes: 97772373 names: registry.cn-hangzhou.aliyuncs.com/google_containers/coredns@sha256:d929e48a87979279307111fd28a52272d3fac0ed1dc8f2f53a9489be45e5f2eb registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3sizeBytes: 45587362 names: quay.io/coreos/flannel@sha256:88f2b4d96fae34bfff3d46293f7f18d1f9f3ca026b4a4d288f28347fcb6580ac quay.io/coreos/flannel:v0.10.0-amd64sizeBytes: 44598861 names: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel@sha256:25e23320b5965ec8d5063ecf9f5a154372f6c230334dd11d76a0290184e789be registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64sizeBytes: 44598861 names: docker.io/nginx@sha256:23e4dacbc60479fa7f23b3b8e18aad41bd8445706d0538b25ba1d575a6e2410b docker.io/nginx:alpinesizeBytes: 18638463 names: docker.io/radial/busyboxplus@sha256:a68c05ab1112fd90ad7b14985a48520e9d26dbbe00cb9c09aa79fdc0ef46b372 docker.io/radial/busyboxplus:curlsizeBytes: 4233788 names: docker.io/busybox@sha256:d21b79794850b4b15d8d332b451d95351d14c951542942a816eea69c9e04b240 docker.io/busybox:latestsizeBytes: 1162745 names: registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64@sha256:759c3f0f6493093a9043cc813092290af69029699ade0e3dbe024e968fcb7cca registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1sizeBytes: 742472nodeInfo:architecture: amd64bootID: 4c547d33-3e71-4ab6-94bc-a9867ae6fb2fcontainerRuntimeVersion: docker://1.13.1kernelVersion: 3.10.0-693.11.6.el7.x86_64kubeProxyVersion: v1.11.1kubeletVersion: v1.11.1machineID: 37db00ab394b4b99a870185d3a95d0a1operatingSystem: linuxosImage: CentOS Linux 7 (Core)systemUUID: 37DB00AB-394B-4B99-A870-185D3A95D0A1 发现节点IP地址不正常…………status: addresses: address: 10.0.2.15type: InternalIP address: lab2type: Hostname…………kubectl get pod –all-namespaces -owideNAMESPACE NAME READY STATUS RESTARTS AGE IP NODEkube-system coredns-777d78ff6f-27tv7 0/1 CrashLoopBackOff 6 9m lab3kube-system coredns-777d78ff6f-b7j8w 0/1 CrashLoopBackOff 7 16m lab2kube-system etcd-lab1 1/1 Running 0 12m 11.11.11.111 lab1kube-system kube-apiserver-lab1 1/1 Running 0 12m 11.11.11.111 lab1kube-system kube-controller-manager-lab1 1/1 Running 0 12m 11.11.11.111 lab1kube-system kube-flannel-ds-amd64-4jrbk 1/1 Running 3 13m 11.11.11.112 lab2kube-system kube-flannel-ds-amd64-gvhs6 1/1 Running 0 13m 11.11.11.111 lab1kube-system kube-flannel-ds-amd64-kcpvr 0/1 CrashLoopBackOff 1 13m 11.11.11.113 lab3kube-system kube-proxy-4zdnc 1/1 Running 0 16m 11.11.11.111 lab1kube-system kube-proxy-7d59q 1/1 Running 3 14m 11.11.11.112 lab2kube-system kube-proxy-8w5gr 0/1 CrashLoopBackOff 1 14m 11.11.11.113 lab3kube-system kube-scheduler-lab1 1/1 Running 0 12m 11.11.11.111 lab1 [root@lab1 vagrant]# kubectl logs -n kube-system coredns-777d78ff6f-b7j8wstandard_init_linux.go:178: exec user process caused “operation not permitted” 解决方案https://github.com/rancher/rancher/issues/13310edit /etc/sysconfig/docker and remove –selinux-enabled from the OPTIONS variable]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>Centos7</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建docker私有镜像中心]]></title>
    <url>%2F2018%2F12%2F14%2Fcentos7%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%2F</url>
    <content type="text"><![CDATA[安装Docker Registrysudo docker run -d -v /home/hzq/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest • -v /home/hzq/registry:/var/lib/registry 默认情况下，会将仓库存放于容器内的/var/lib/registry目录下，指定本地目录挂载到容器。• -p 5000:5000 端口映射• –restart=always1 在容器退出时总是重启容器,主要应用在生产环境• –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误• –name registry 指定容器的名称 查看版本 服务端需要修改的地方Docker从1.3.X之后，与docker registry交互默认使用的是https，然而此处搭建的私有仓库只提供http服务，所以当与私有仓库交互时就会报误。为了解决这个问题需要在启动docker server时增加启动参数为默认使用http访问。修改docker启动配置文件 vi /usr/lib/systemd/system/docker.service 找到 ExecStartExecStart=/usr/bin/dockerd –insecure-registry 192.168.0.153:5000红色字体为添加的如下图所示 重启dockersystemctl daemon-reloadsystemctl restart docker 客户端需要修改的地方编辑/etc/docker/daemon.json文件，添加”insecure-registries”:[“xxx.xxx.xxx.xxx:5000”] 重启dockersystemctl daemon-reloadsystemctl restart docker 登录到私有镜像中心docker login xx.xx.xx.xx:5000如图 上传镜像 拉取镜像 查看镜像仓库的镜像curl -XGET http://xx.xx.xx.xx:5000/v2/_catalog如下图所示 获取镜像仓库某个镜像的标签列表curl –XGET http://xx.xx.xx.xx:5000/v2/yyyy/tags/list 注：yyyy是镜像名称如图所示# 删除镜像Docker仓库在2.1版本中支持了删除镜像的API，但这个删除操作只会删除镜像元数据，不会删除层数据。在2.4版本中对这一问题进行了解决，增加了一个垃圾回收命令，删除未被引用的层数据。启动容器，此时不挂载config文件 进去容器，并查看/etc/docker/registry/config.yml文件，并复制文件内容 在宿主机，/home目录下新建config.yml文件，并将上一步复制的内容copy进去，而且添加允许删除停止之前启动的Registry，并删除，重新启动Registry，此时挂载config.yml文件，再次进入容器，可看到已添加delete=truesudo docker run -d -v /home/hzq/registry:/var/lib/registry –v /home/config.yml:/etc/docker/registry/config.yml -p 5000:5000 –restart=always –privileged=true –name registry registry:latest获取要删除指定镜像指定标签的Digest sha256curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v1 2&gt;&amp;1 | grep Docker-Content-Digesttag=v1 curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v2 2&gt;&amp;1 | grep Docker-Content-Digesttag=v2 curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X GET http://11.11.11.116:5000/v2/app-auto-medical/manifests/v3 2&gt;&amp;1 | grep Docker-Content-Digesttag=v3 app-auto-medical镜像下的tag=v1、tag=v2的digest sha256值相同，与v3的digest sha256值不同删除指定标签指定镜像(仅是逻辑删除！如果同一个镜像下的多个tag的digest sha256值一样，则会一起被删除)删除之前可看到该镜像下有三个tag 也可以在浏览器直接查看 执行删除命令curl -v –silent -H “Accept: application/vnd.docker.distribution.manifest.v2+json” -X DELETE http://11.11.11.116:5000/v2/app-auto-medical/manifests/sha256:09873e1ff2a995777f646aef95efd11d08ce0dc95e33cd5e6c1ac8b33dfc30ae 删除后查看该镜像下边的tag情况 因为此镜像的tag v1和v2的digest sha256值相同，所以删除的时候就会被一起删除，但此时都只是逻辑删除，对应的文件资源并没有在磁盘上删除！ 垃圾回收垃圾回收前，查看Registry镜像资源数据大小，因为镜像资源所在目录已经被挂载到宿主机/home/hzq/registry目录，所以查看宿主机此目录的大小du -sch /home/hzq/registry 进入镜像仓库容器，进行垃圾回收(2.4版本以上的registry才有此功能)docker exec -it d78b4c6f2f81 /bin/registry garbage-collect /etc/docker/registry/config.yml 再次查看Registry镜像资源数据大小]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>Register</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Devops搭建手冊]]></title>
    <url>%2F2018%2F12%2F13%2FDevops%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8A%2F</url>
    <content type="text"><![CDATA[Gitlab安装安装命令dpkg --force-depends -i gitlab-ce_10.3.3-ce.0_amd64.deb 备份/etc/gitlab/gitlab.rb文件cp gitlab.rb gitlab.rb.bak 修改/etc/gitlab/gitlab.rb文件external_url &quot;http://gitlab.example.com&quot; 为 external_url &quot;http://ip地址&quot; 使修改生效sudo gitlab-ctl reconfigure 默认root账号，需添加密码访问urlip:端口号(默认80) Nexus安装创建文件夹cd /usr/localmkdir nexus 下载Nexus安装包，并解压文件wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.8-01-bundle.tar.gztar -xzvf nexus-2.14.8-01-bundle.tar.gz -C nexus 添加root用户vi /usr/local/nexus/nexus-2.14.8-01/bin/nexus添加 RUN_AS_USER=root保存以上修改。备注：修改前请先备份原始文件 启动Nexus/usr/local/nexus/ nexus-2.14.8-01/bin/nexus start 访问Nexusip:端口号(默认8081)/nexus 默认Nexus账号密码admin admin123 注意：下载Nexus安装包的过程可以在本机操作，然后把安装包通过FTP上传到服务器上。存储所在路径：压缩包解压后，文件夹内nexus-2.14.8-01-bundle/sonatype-work/，这个路径就是，具体存储路径可以在nexus-2.14.8-01/conf/ nexus.properties文件里进行修改。参考：https://www.linuxidc.com/Linux/2016-08/134617.htm Docker安装FTP上传Docker的deb安装文件比如上传到此目录下：/tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb 更新库，安装依赖apt-get updateapt-get install -y apt-utils iptables libdevmapper1.02.1 libltdl7 libseccomp2 安装Dockerdpkg -i /tmp/docker-ce_17.12.1_ce-0_ubuntu_amd64.deb 验证安装是否成功docker –version如下图，显示docker版本号则安装成功 Kubectl安装下载kubectl安装包wget https://dl.k8s.io/v1.9.3/kubernetes-client-linux-amd64.tar.gz 解压kubectl安装包tar -zxvf kubernetes-client-linux-amd64.tar.gz 进入到kubernetes/client/bin目录，并给kubectl文件赋权限cd kubernetes/client/binchmod +x ./kubectl 移动kubectl文件到/usr/local/bin/目录下sudo mv ./kubectl /usr/local/bin/kubectlsudo chmod +x /usr/local/bin/kubectl 创建.kube文件夹mkdir ~/.kube 创建config文件touch ~/.kube/config K8S的配置信息通过token添加配置信息首先：web登录到ICP 其次：复制token信息 最后：在服务器命令行执行token信息里的命令，执行完之后步骤6里的config文件里会保存有k8s的相关配置信息，但是token是有实效期的。 通过证书添加配置信息首先：向ICP管理员要三个证书，三个证书在ICP的master节点上的路径为/etc/cfc/conf/，三个证书为：ca.crt，kubecfg.crt，kubecfg.key，将三个证书存放到/etc/kubernetes/conf/目录下，如果没有请创建该目录其次：执行kubectl命令，修改config文件。kubectl config set-cluster mycluster.icp –server=https://10.8.154.198:8001 –certificate-authority=/etc/kubernetes/conf/ca.crt \&amp;&amp; kubectl config set-credentials admin –client-certificate=/etc/kubernetes/conf/kubecfg.crt –client-key=/etc/kubernetes/conf/kubecfg.key \&amp;&amp; kubectl config set-context icp –cluster=mycluster.icp –user=admin \&amp;&amp; kubectl config use-context icp \&amp;&amp; kubectl config view 下载地址：https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.9.md​ 参考：​ http://blog.csdn.net/farYang/article/details/79427573​ http://blog.csdn.net/weiguang1017/article/details/69972015​ 注意：1.压缩包里只有一个kubectl文件，1,、2、3、4步已经安装好kubectl了，只是不能与k8s通讯。2.证书配置是针对管理员的，普通用户用token3.修改host文件.如：10.8.154.198 mycluster.icp 7步骤b)中的–server= https://10.8.154.198:8001要进行修改 Jenkins安装向ICP管理员索要四个证书，master三个证书，私有镜像中心一个证书。如下图所示： 将master的上个证书存放到：/etc/kubernetes/conf/将私有镜像中心的证书存放到：/etc/docker/certs.d/mycluster.icp:8500/ 注意：证书原始路径，在ICP的master节点上​ Master证书路径：/etc/cfc/conf/ca.crt/etc/cfc/conf/kubecfg.crt/etc/cfc/conf/kubecfg.key​ 私有镜像中心证书路径：/etc/docker/certs.d/mycluster.icp\:8500/ca.crt 向ICP管理员询问cluster_vip、cluster_CA_domain、proxy_vip、storageClassName的值cluster_vip：页面访问ICP的IP地址​ cluster_CA_domain：私有镜像中心域名​ proxy_vip：代理的vip，用于应用的映射​ storageClassName：PVC的时候使用 修改服务器的hosts文件，添加私有镜像中心的映射，如下图所示 在k8s集群内新建devops命名空间命令：kubectl create ns devopsICP页面创建： 根据应用的场景创建java-slave,nodejs-slave等jenkins的slave镜像从docker-hub上下载openjdk、nginx、jenkins等镜像上传5、6步骤里的镜像到ICP的私有镜像中心如何上传，请参考ICP官方文档：https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0/manage_images/using_docker_cli.html 创建secretkubectl create secret docker-registry myregistrykey –docker-server=mycluster.icp:8500 –docker-username=admin –docker-password=admin --docker-email=shuaichao_gao@trtjk.com -n=devops在jenkins的yaml里添加对该secret的引用 执行jenkins、pvc等yaml文件kubectl apply -f jenkins-master-sts-dev-test.yamlkubectl apply -f jenkins-slave-glusterfs-pvc.yaml 查看jenkins的状态#查看pod状态kubectl get pods -n=devops #查看pod详细描述信息kubectl describe pods -n=devops #查看应用的日志kubectl logs -f pods -n=devops 浏览器访问jenkins，按需安装必要插件在gitlab服务器修改hosts文件，添加jenkins应用的映射 注意Gitlab、Nexus、Docker、Kubectl都是安装在ubuntu服务器上的，jenkins是安装在ICP上的。各个软件的安装包和文件已打包证书与ICP环境是对应的，不同的ICP环境证书是不一样的。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
</search>
